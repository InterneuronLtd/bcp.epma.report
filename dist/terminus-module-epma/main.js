(self["webpackChunkterminus_module_epma"] = self["webpackChunkterminus_module_epma"] || []).push([["main"],{

/***/ 92:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppComponent: () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 2510);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/enum */ 6134);
/* harmony import */ var _components_template_number_template_number_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/template-number/template-number.component */ 9865);
/* harmony import */ var _services_subjects_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/subjects.service */ 3939);
/* harmony import */ var _services_app_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/app.service */ 529);
/* harmony import */ var _services_apirequest_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/apirequest.service */ 5351);
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-bootstrap/modal */ 2457);
/* harmony import */ var _services_datarequest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/datarequest */ 8698);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _components_drug_chart_drug_chart_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/drug-chart/drug-chart.component */ 4193);
/* harmony import */ var _components_demo_admission_record_demo_admission_record_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/demo-admission-record/demo-admission-record.component */ 929);














const _c0 = ["open_refreshmessage"];
const _c1 = ["close_pform"];
function AppComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementStart"](0, "div")(1, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵtextInterpolate2"](" This module is not supported by this browser (", ctx_r0.browserName, " ", ctx_r0.browserVersion, "). Either upgrade your browser, try to access this module on a different device or contact IT support. ");
  }
}
function AppComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementStart"](0, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelement"](1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementEnd"]();
  }
}
function AppComponent_div_3_app_drug_chart_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelement"](0, "app-drug-chart", 7);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("groupFilterType", ctx_r0.groupFilterType);
  }
}
function AppComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵtemplate"](1, AppComponent_div_3_app_drug_chart_1_Template, 1, 1, "app-drug-chart", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("ngIf", ctx_r0.showdrugChart);
  }
}
function AppComponent_app_demo_admission_record_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementStart"](0, "app-demo-admission-record", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵlistener"]("destroyTemplate", function AppComponent_app_demo_admission_record_4_Template_app_demo_admission_record_destroyTemplate_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵrestoreView"](_r2);
      const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵresetView"](ctx_r0.destroyRecordsTemplate());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("activeRecordedDays", ctx_r0.numberOfEmptyTemplates)("emptyTemplates", ctx_r0.numberOfEmptyTemplates)("sdate", ctx_r0.startDate)("edate", ctx_r0.endDate)("marType", ctx_r0.medicationAdministrationEmptyTemplate);
  }
}
class AppComponent {
  set datacontract(value) {
    this.appService.personId = value.personId;
    this.appService.apiService = value.apiService;
    this.subjects.unload = value.unload;
    this.initConfigAndGetMeta(this.appService.apiService);
    this.showPrintIcon = false;
    if (value.moduleAction) this.subscriptions.add(value.moduleAction.subscribe(e => {}));
    if (value.additionalInfo) {
      let terminusmodule = value.additionalInfo.find(x => x.key == "currentmodule");
      if (terminusmodule) this.appService.currentTerminusModle = terminusmodule.value;
    }
  }
  constructor(subjects, appService, apiRequest, modalService, cd, dr) {
    this.subjects = subjects;
    this.appService = appService;
    this.apiRequest = apiRequest;
    this.modalService = modalService;
    this.cd = cd;
    this.dr = dr;
    this.title = 'terminus-module-epma';
    this.noEncountersAvailable = false;
    this.datePicker = false;
    this.showPopOver = _services_enum__WEBPACK_IMPORTED_MODULE_1__.popovers.none;
    this.showTitrationChart = _services_enum__WEBPACK_IMPORTED_MODULE_1__.popovers.none;
    this.showChoosedate = false;
    this.browserVersionError = false;
    this.conflictuserid = "";
    this.showAdustInfusion = _services_enum__WEBPACK_IMPORTED_MODULE_1__.popovers.none;
    this.frameworkAction = new _angular_core__WEBPACK_IMPORTED_MODULE_9__.EventEmitter();
    this.subscriptions = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subscription();
    this.loadDrugChart = 0;
    this.currentmodule = _services_enum__WEBPACK_IMPORTED_MODULE_1__.modules["app-drug-chart"];
    this.clonePrescription = false;
    this.cloningExternally = false;
    this.groupFilterType = "Basic";
    this.showdrugChart = false;
    this.showPrescribingForm = false;
    this.totalmetadatarequests = 15;
    this.Showtherapies = "Active";
    this.Sorttherapie = "DESCRIPTION-ASC";
    this.FilterRoutesby = "All routes";
    this.medicationAdministrationEmptyTemplate = false;
    this.AllRoutes = [];
    this.isCalledOnce = false;
    this.showPrintIcon = false;
    this.printing = false;
    this.basicgrouping = ['Stat', 'VTE', 'Antimicrobials', 'Diabetics', 'Variable/Continuous infusion', 'PRN', 'IV Fluid', 'Regular drugs'];
    this.isLoading = false;
    this.showChart = false;
  }
  generateChart() {
    this.appService.reset();
    this.showChart = false;
    this.cd.detectChanges();
    this.showChart = true;
    this.cd.detectChanges();
    this.InitApp();
  }
  ngOnDestroy() {
    this.appService.logToConsole("app component being unloaded");
    if (this.appService.warningService) {
      this.appService.warningService.contexts.forEach(w => {
        w.resetWarningService();
      });
    }
    this.appService.encounter = null;
    this.appService.personId = null;
    this.appService.isCurrentEncouner = null;
    this.appService.reset();
    this.subscriptions.unsubscribe();
    this.dr.ngOnDestroy();
    this.appService.warningService = null;
    this.appService = null;
    this.subjects.unload.next("app-epma");
  }
  InitApp() {
    let encounter;
    let input = document.getElementById("encounter_input");
    if (input) encounter = JSON.parse(input.value);
    this.appService.encounter = encounter;
    this.appService.personId = encounter.person_id;
    this.appService.encounter = encounter;
    this.appService.lenghOfStay = this.appService.GetDurationBetweenDates(this.appService.encounter.admitdatetime, moment__WEBPACK_IMPORTED_MODULE_0___default()());
    this.appService.personDOB = encounter.dateofbirth;
    let value = {};
    value.authService = {};
    value.authService.user = {};
    let auth = this.apiRequest.authService;
    auth.getToken().then(token => {
      value.authService.user.access_token = token;
      this.initConfigAndGetMeta(value);
    });
  }
  initConfigAndGetMeta(value) {
    this.appService.apiService = value;
    this.dr.subscriptions = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subscription();
    this.subscriptions.add(this.apiRequest.getRequest("./assets/config/EPMAConfig.json?V" + Math.random()).subscribe(response => {
      this.appService.appConfig = response;
      this.appService.baseURI = this.appService.appConfig.uris.baseuri;
      this.appService.enableLogging = this.appService.appConfig.enablelogging;
      this.browserVersionSupported = this.appService.appConfig.AppSettings.minSafariVersionSupported;
      this.appService.buffertimeAmber = this.appService.appConfig.bufferTime.buffertimeAmber;
      this.appService.criticalDrugbuffertimeAmber = this.appService.appConfig.bufferTime.buffertime_criticalDrug;
      this.appService.EnableDischargeSummaryComplete = this.appService.appConfig.EnableDischargeSummaryComplete;
      this.appService.bufferAdministered = this.appService.appConfig.bufferTime.bufferAdministered;
      this.appService.pleaseResupplyStockValidation = this.appService.appConfig.pleaseResupplyStockValidation;
      this.appService.isReasonForChangeReuired = this.appService.appConfig.isReasonForChangeReuired;
      this.appService.platfromServiceURI = this.appService.appConfig.uris.platformserviceuri;
      this.appService.DCGroups = this.appService.appConfig.AppSettings.DCGroups;
      this.appService.administrationTimeDiffInMinute = this.appService.appConfig.AppSettings.administrationTimeDiffInMinute;
    }));
  }
  GetMetaData() {
    if (this.appService.apiService) {
      this.appService.loggedInUserName = "BCP.EPMA";
      this.dr.getAllPrescriptionMeta(() => {
        this.getPrescriptionsForCurrentEncounter();
        this.dr.getSupplyRequest(() => {});
        this.dr.GetMedicationSupply(() => {});
        this.dr.GetWitnesAuthentication(() => {});
        this.dr.GetPrescriptionEvent(() => {});
        this.dr.GetNursingInstruction(() => {});
      });
    }
  }
  GetDataVersion(cb) {
    this.apiRequest.getRequest(`${this.appService.baseURI}/GetSynchronousPostVersionNumber/?personId=${this.appService.personId}&moduleName=${this.appService.modulename}`).subscribe(response => {
      this.appService.dataversion = response;
      console.log("DataVersion: " + response);
      cb();
    });
  }
  getPrescriptionsForCurrentEncounter() {
    this.appService.Prescription = [];
    this.appService.FilteredPrescription = [];
    this.appService.TherapyPrescription = [];
    // let dataRequest = new DataRequest(this.apiRequest, this.appService);
    this.dr.getAllPrescription(() => {
      this.dr.getAdminstrations(() => {
        this.appService.Prescription.forEach(p => this.appService.UpdatePrescriptionCompletedStatus(p));
        this.dr.getReminders(() => {
          this.dr.getPharmacyReviewStatus(() => {
            this.appService.isAppDataReady = true;
            this.appService.Prescription.forEach(p => {
              var curTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).toDate()).add(-5, "minutes").format("YYYYMMDDHHmm");
              if (!((p.prescriptionstatus_id == "f1e191f1-3985-4d2f-b96b-0b1b48fa7714" || p.prescriptionstatus_id == "5d78c6a6-2962-4dcd-8fd0-9824ef09135f") && moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date(p.lastmodifiedon)).format("YYYYMMDDHHmm") < curTime)) {
                this.appService.FilteredPrescription.push(p);
              }
            });
            // get vtm units
            this.appService.VtmUnits = [];
            this.subscriptions.add(this.apiRequest.getRequest("./assets/config/vtmunits.json?V" + Math.random()).subscribe(response => {
              this.appService.VtmUnits = response;
              this.changeGroupType(this.groupFilterType);
            }));
          });
        });
      });
    });
  }
  changeGroupType(option) {
    this.showdrugChart = false;
    this.groupFilterType = option;
    let prescriptionroutes = [].concat(...this.appService.Prescription.map(p => p.__routes));
    // let prescriptionroutes = this.appService.Prescriptionroutes.filter(x => x.isdefault == true);
    this.appService.Choosenfilterdate = new Date();
    this.AllRoutes = prescriptionroutes.map(item => item.route).filter((value, index, self) => self.indexOf(value) === index);
    if (option == "Basic") {
      this.appService.DrugeGroupsType = [];
      this.appService.DrugeGroupsType = this.appService.appConfig.AppSettings.basicgrouping;
    }
    // else if (option == "custom group") {
    //   let primaryMedications = [].concat(...this.appService.Prescription.map(p => p.__medications)).filter(x => x.isprimary == true);
    //   this.appService.DrugeGroupsType = primaryMedications.map(item => item.customgroup)
    //     .filter((value, index, self) => self.indexOf(value) === index);
    // }
    else if (option == "Base") {
      if (this.appService.appConfig.AppSettings.UseStoredClassification) {
        let primaryMedications = [].concat(...this.appService.Prescription.map(p => p.__medications)).filter(x => x.isprimary == true);
        this.appService.DrugeGroupsType = primaryMedications.map(item => item.classification).filter((value, index, self) => self.indexOf(value) === index);
      } else {
        let allprescriptionsfdbgroups = [].concat(...this.appService.Prescription.map(p => {
          if (!p.__drugcodes) {
            return [{
              "additionalCodeSystem": "FDB",
              "additionalCodeDesc": null
            }];
          } else if (!p.__drugcodes.find(dc => dc.additionalCodeSystem == "FDB")) {
            return [{
              "additionalCodeSystem": "FDB",
              "additionalCodeDesc": null
            }];
          } else {
            return p.__drugcodes;
          }
        })).filter(x => x.additionalCodeSystem == "FDB");
        this.appService.DrugeGroupsType = allprescriptionsfdbgroups.map(item => item.additionalCodeDesc).filter((value, index, self) => self.indexOf(value) === index);
      }
      this.appService.DrugeGroupsType.sort();
    } else if (option == "Route") {
      this.appService.DrugeGroupsType = this.AllRoutes;
      this.appService.DrugeGroupsType.sort();
    }
    for (let i = 0; i < this.appService.DrugeGroupsType.length; i++) {
      if (this.appService.DrugeGroupsType[i] == null || this.appService.DrugeGroupsType[i].trim() == '') {
        this.appService.DrugeGroupsType[i] = "Others";
      }
      this.appService.DrugeGroupsType = this.appService.DrugeGroupsType.map(item => item).filter((value, index, self) => self.indexOf(value) === index);
    }
    //this.sortPrescription(this.Sorttherapie);
    this.appService.drugGroupOption = option;
    this.cd.detectChanges();
    this.showdrugChart = true;
    this.filterDateAndRought(this.Showtherapies, this.FilterRoutesby);
    // setTimeout(x => this.showdrugChart = true);
  }
  chooseDateclick(parameter) {
    this.showdrugChart = false;
    this.appService.FilteredPrescription = [];
    this.showChoosedate = parameter;
    if (!this.showChoosedate) {
      this.appService.Choosenfilterdate = new Date();
      this.filterDateAndRought(this.Showtherapies, this.FilterRoutesby);
    } else if (this.showChoosedate) {
      let selectedDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.Choosenfilterdate);
      selectedDate.set({
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
      });
      this.appService.changechoosenFilterDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate);
      for (let prescription of this.appService.Prescription) {
        let enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(prescription).prescriptionenddate);
        //let preStart = moment(null ? prescription.startdatetime : this.appService.encounter.sortdate);
        let preStart = prescription.startdatetime == null ? moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.encounter.sortdate) : moment__WEBPACK_IMPORTED_MODULE_0___default()(prescription.startdatetime);
        for (let poso of prescription.__posology) {
          if (moment__WEBPACK_IMPORTED_MODULE_0___default()(preStart).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_0___default()(poso.prescriptionstartdate))) {
            preStart = moment__WEBPACK_IMPORTED_MODULE_0___default()(poso.prescriptionstartdate);
          }
        }
        if (prescription.prescriptionstatus_id == "f1e191f1-3985-4d2f-b96b-0b1b48fa7714" || prescription.prescriptionstatus_id == "5d78c6a6-2962-4dcd-8fd0-9824ef09135f")
          // if prestion is stop
          {
            if (moment__WEBPACK_IMPORTED_MODULE_0___default()(prescription.lastmodifiedon, "YYYY-MM-DD").isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate)))
              // and stop date is selected or greate
              {
                enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate);
              } else {
              enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(prescription.lastmodifiedon);
            }
          }
        if (!enddate.isValid()) {
          // if enddate is null and not spot so end date is selected
          enddate = selectedDate;
        }
        if (moment__WEBPACK_IMPORTED_MODULE_0___default()(preStart, "YYYY-MM-DD").isSameOrBefore(selectedDate, 'day') || moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate, "YYYY-MM-DD").isSame(moment__WEBPACK_IMPORTED_MODULE_0___default()(), 'day')) {
          if (this.Showtherapies == "Active") {
            var curTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).toDate()).add(-5, "minutes").format("YYYYMMDDHHmm");
            if (!((prescription.prescriptionstatus_id == "f1e191f1-3985-4d2f-b96b-0b1b48fa7714" || prescription.prescriptionstatus_id == "5d78c6a6-2962-4dcd-8fd0-9824ef09135f") && moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date(prescription.lastmodifiedon)).format("YYYYMMDDHHmm") < curTime)) {
              if (prescription.__completed != true) {
                this.appService.FilteredPrescription.push(prescription);
              } else if (moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date(prescription.__completedOn)).format("YYYYMMDDHHmm") > curTime) {
                this.appService.FilteredPrescription.push(prescription);
              }
            }
          } else if (this.Showtherapies == "stoped") {
            let enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(prescription).prescriptionenddate);
            if (!enddate.isValid()) {
              enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
            }
            if (prescription.__completed == true) {
              this.appService.FilteredPrescription.push(prescription);
            } else if (prescription.prescriptionstatus_id != "5750c99f-75ec-4b33-b10c-782a000cc360" && prescription.prescriptionstatus_id != "fe406230-be68-4ad6-a979-ef15c42365cf" && prescription.prescriptionstatus_id != "fd8833de-213b-4570-8cc7-67babfa31393" && prescription.prescriptionstatus_id != "63e946cd-b4a4-4f60-9c18-a384c49486ea") {
              this.appService.FilteredPrescription.push(prescription);
            }
          } else if (this.Showtherapies == "ALL") {
            this.appService.FilteredPrescription.push(prescription);
          }
        }
      }
      this.sortPrescription(this.Sorttherapie);
      this.cd.detectChanges();
      this.showdrugChart = true;
    }
  }
  filterDateAndRought(therapietype, routerupe) {
    this.appService.changechoosenFilterDate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
    this.Showtherapies = therapietype;
    this.FilterRoutesby = routerupe;
    this.showdrugChart = false;
    this.appService.FilteredPrescription = [];
    if (this.Showtherapies == "Active") {
      for (let prescription of this.appService.Prescription) {
        var curTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).toDate()).add(-5, "minutes").format("YYYYMMDDHHmm");
        if (!((prescription.prescriptionstatus_id == "f1e191f1-3985-4d2f-b96b-0b1b48fa7714" || prescription.prescriptionstatus_id == "5d78c6a6-2962-4dcd-8fd0-9824ef09135f") && moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date(prescription.lastmodifiedon)).format("YYYYMMDDHHmm") < curTime)) {
          if (prescription.__completed != true) {
            this.appService.FilteredPrescription.push(prescription);
          } else if (moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date(prescription.__completedOn)).format("YYYYMMDDHHmm") > curTime) {
            this.appService.FilteredPrescription.push(prescription);
          }
        }
      }
    } else if (this.Showtherapies == "stoped") {
      // var lasttreeday = moment();
      // lasttreeday = moment().subtract(2, "days");
      // lasttreeday.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });
      for (let prescription of this.appService.Prescription) {
        let enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(prescription).prescriptionenddate);
        if (!enddate.isValid()) {
          enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
        }
        if (prescription.__completed == true) {
          this.appService.FilteredPrescription.push(prescription);
        } else if (prescription.prescriptionstatus_id != "5750c99f-75ec-4b33-b10c-782a000cc360" && prescription.prescriptionstatus_id != "fe406230-be68-4ad6-a979-ef15c42365cf" && prescription.prescriptionstatus_id != "fd8833de-213b-4570-8cc7-67babfa31393" && prescription.prescriptionstatus_id != "63e946cd-b4a4-4f60-9c18-a384c49486ea") {
          this.appService.FilteredPrescription.push(prescription);
        }
      }
    } else if (this.Showtherapies == "ALL") {
      for (let prescription of this.appService.Prescription) {
        this.appService.FilteredPrescription.push(prescription);
      }
    } else if (this.Showtherapies == "Choose date") {
      let selectedDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.Choosenfilterdate);
      selectedDate.set({
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
      });
      this.appService.changechoosenFilterDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate);
      for (let prescription of this.appService.Prescription) {
        let enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(prescription).prescriptionenddate);
        let preStart = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(prescription).prescriptionstartdate);
        if (prescription.prescriptionstatus_id == "f1e191f1-3985-4d2f-b96b-0b1b48fa7714" || prescription.prescriptionstatus_id == "5d78c6a6-2962-4dcd-8fd0-9824ef09135f")
          // if prestion is stop
          {
            if (moment__WEBPACK_IMPORTED_MODULE_0___default()(prescription.lastmodifiedon, "YYYY-MM-DD").isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate)))
              // and stop date is selected or greate
              {
                enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(selectedDate);
              } else {
              enddate = moment__WEBPACK_IMPORTED_MODULE_0___default()(prescription.lastmodifiedon);
            }
          }
        if (!enddate.isValid()) {
          // if enddate is null and not spot so end date is selected
          enddate = selectedDate;
        }
        if (moment__WEBPACK_IMPORTED_MODULE_0___default()(preStart, "YYYY-MM-DD").isSameOrBefore(selectedDate, 'day')) {
          this.appService.FilteredPrescription.push(prescription);
        }
      }
    }
    /// Rought filter
    if (this.FilterRoutesby != "All routes") {
      this.appService.FilteredPrescription = this.appService.FilteredPrescription.filter(x => x.__routes.length != 0);
      this.appService.FilteredPrescription = this.appService.FilteredPrescription.filter(x => x.__routes.find(d => d.isdefault == true).route == this.FilterRoutesby);
    }
    this.sortPrescription(this.Sorttherapie);
    this.cd.detectChanges();
    this.showdrugChart = true;
  }
  sortPrescription(sortby) {
    this.showdrugChart = false;
    this.Sorttherapie = sortby;
    if (this.Sorttherapie == "DESCRIPTION-ASC") {
      this.appService.FilteredPrescription.sort((a, b) => a.__medications.find(x => x.isprimary).name > b.__medications.find(x => x.isprimary).name ? 1 : b.__medications.find(x => x.isprimary).name > a.__medications.find(x => x.isprimary).name ? -1 : 0);
    } else if (this.Sorttherapie == "DESCRIPTION-DESC") {
      this.appService.FilteredPrescription.sort((b, a) => a.__medications.find(x => x.isprimary).name > b.__medications.find(x => x.isprimary).name ? 1 : b.__medications.find(x => x.isprimary).name > a.__medications.find(x => x.isprimary).name ? -1 : 0);
    } else if (this.Sorttherapie == "CREATED TIME-ASC") {
      this.appService.FilteredPrescription.sort((a, b) => moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(a).prescriptionstartdate) > moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(b).prescriptionstartdate) ? 1 : moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(b).prescriptionstartdate) > moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(a).prescriptionstartdate) ? -1 : 0);
    } else if (this.Sorttherapie == "CREATED TIME-DESC") {
      this.appService.FilteredPrescription.sort((b, a) => new Date(this.appService.GetCurrentPosology(a).prescriptionstartdate) > new Date(this.appService.GetCurrentPosology(b).prescriptionstartdate) ? 1 : new Date(this.appService.GetCurrentPosology(b).prescriptionstartdate) > new Date(this.appService.GetCurrentPosology(a).prescriptionstartdate) ? -1 : 0);
    }
    this.cd.detectChanges();
    this.showdrugChart = true;
    this.appService.drugRouteOption = this.FilterRoutesby;
    this.appService.drugSortOrder = this.Sorttherapie;
    this.subjects.therapyOverview.next(undefined);
  }
  changechoosendate(daynumber) {
    if (this.appService.Choosenfilterdate != null) {
      this.isCalledOnce = false;
      this.appService.Choosenfilterdate = new Date(Date.UTC(this.appService.Choosenfilterdate.getFullYear(), this.appService.Choosenfilterdate.getMonth(), this.appService.Choosenfilterdate.getDate() + daynumber));
      this.chooseDateclick(true);
    }
  }
  ChoosenfilterdateChange(value) {
    //  this.appService.Choosenfilterdate = moment(value,"DD/MM/YYYY");
    if (this.isCalledOnce && value != null) {
      this.isCalledOnce = true;
      !this.appService.chartScrolled && this.chooseDateclick(true);
      this.appService.chartScrolled = false;
    }
  }
  // Begin Therpay overview code
  setNoOfDaysTherapy(number) {
    this.appService.therapyCurrentDate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
    this.appService.therapyNoOfDays = number;
    this.subjects.therapyOverview.next(undefined);
  }
  prevDaysTherapy() {
    if (this.appService.therapyNoOfDays == 3) {
      this.appService.therapyCurrentDate.add(-3, "days");
    } else {
      this.appService.therapyCurrentDate.add(-5, "days");
    }
    this.subjects.therapyOverview.next(undefined);
  }
  nextDaysTherapy() {
    if (this.appService.therapyNoOfDays == 3) {
      this.appService.therapyCurrentDate.add(3, "days");
    } else {
      this.appService.therapyCurrentDate.add(5, "days");
    }
    this.subjects.therapyOverview.next(undefined);
  }
  // End Therapy Overview
  onDatePickerClose(event) {
    this.isCalledOnce = true;
  }
  onDatePickerOpen(event) {
    this.isCalledOnce = true;
  }
  makeId(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
  CheckBannerWarnings() {
    if (!this.appService.bannerWarningStatus) {
      this.subjects.showBannerWarnings.next(undefined);
      return false;
    }
    // else
    //   if (!this.appService.isWeightCapturedForToday) {
    //     this.openRecordWeightModal('D');
    // } 
    // else if (!this.appService.isHeightCaptured) {
    //   this.openRecordHeightModal('D');
    // }
    else {
      if (this.appService.refWeightValue && this.appService.refHeightValue) {
        this.appService.bodySurfaceArea = +(Math.sqrt(+this.appService.refWeightValue * +this.appService.refHeightValue) / 60).toFixed(2);
      }
    }
    return true;
  }
  destroyRecordsTemplate() {
    this.isLoading = false;
    this.medicationAdministrationEmptyTemplate = false;
    this.startDate = '';
    this.endDate = '';
    this.numberOfEmptyTemplates = null;
    this.printing = false;
  }
  updateDates(event) {
    console.log(event);
    this.datePicker = false;
  }
  openActivePrintingTemplate() {
    this.isLoading = true;
    this.dr.getHeightWeight(() => {
      setTimeout(() => {
        this.medicationAdministrationEmptyTemplate = 'active';
      }, 100);
    });
  }
  openCurrentPrintingTemplate() {
    this.isLoading = true;
    this.dr.getHeightWeight(() => {
      setTimeout(() => {
        this.medicationAdministrationEmptyTemplate = 'current';
      }, 100);
    });
  }
  getPrescriptionNumber() {
    const config = {
      backdrop: true,
      ignoreBackdropClick: true,
      class: 'modal-dialog-centered modal-sm'
    };
    this.bsModalRef = this.modalService.show(_components_template_number_template_number_component__WEBPACK_IMPORTED_MODULE_2__.TemplateNumberComponent, config);
    this.bsModalRef.content = {
      saveDone: templateNumber => {
        if (templateNumber) {
          this.isLoading = true;
          this.numberOfEmptyTemplates = templateNumber;
          this.dr.getHeightWeight(() => {
            setTimeout(() => {
              this.medicationAdministrationEmptyTemplate = 'empty';
            }, 100);
          });
        }
      },
      cancel: () => {
        this.printing = false;
      }
    };
  }
  openActive() {
    const config = {
      backdrop: true,
      ignoreBackdropClick: true,
      class: 'modal-dialog-centered modal-sm',
      initialState: {
        errorMessage: "",
        marType: "active"
      }
    };
    this.bsModalRef = this.modalService.show(_components_template_number_template_number_component__WEBPACK_IMPORTED_MODULE_2__.TemplateNumberComponent, config);
    this.bsModalRef.content = {
      saveDone: templateNumber => {
        if (templateNumber) {
          this.numberOfEmptyTemplates = templateNumber;
          this.medicationAdministrationEmptyTemplate = 'active';
        }
      },
      cancel: () => {
        this.printing = false;
      }
    };
  }
  TriggerWarningUpdateCheck(cb = null) {
    if (this.appService.warningService && this.appService.warningServiceIPContext.loader != true) {
      this.dr.TriggerWarningUpdateOnChanges(() => {
        if (this.appService.warningServiceIPContext.existingWarningsStatus == false) {
          this.subjects.showWarnings.next(undefined);
        }
        if (cb) cb();
      });
    }
  }
  BannerWarningsLoaded() {
    // if (this.appService.bannerWarningStatus == false) {
    //   this.subjects.showBannerWarnings.next(undefined);
    // }
  }
  static #_ = this.ɵfac = function AppComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || AppComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdirectiveInject"](_services_subjects_service__WEBPACK_IMPORTED_MODULE_3__.SubjectsService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdirectiveInject"](_services_app_service__WEBPACK_IMPORTED_MODULE_4__.AppService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdirectiveInject"](_services_apirequest_service__WEBPACK_IMPORTED_MODULE_5__.ApirequestService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdirectiveInject"](ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__.BsModalService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_9__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdirectiveInject"](_services_datarequest__WEBPACK_IMPORTED_MODULE_6__.DataRequest));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdefineComponent"]({
    type: AppComponent,
    selectors: [["app-root"]],
    viewQuery: function AppComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵviewQuery"](_c1, 5);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵloadQuery"]()) && (ctx.open_refreshmessage = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵloadQuery"]()) && (ctx.close_pform = _t.first);
      }
    },
    inputs: {
      datacontract: "datacontract"
    },
    outputs: {
      frameworkAction: "frameworkAction"
    },
    decls: 5,
    vars: 4,
    consts: [[4, "ngIf"], ["id", "pause", "class", "d-flex align-items-center justify-content-center", 4, "ngIf"], ["class", "pdfUseOnly", 3, "activeRecordedDays", "emptyTemplates", "sdate", "edate", "marType", "destroyTemplate", 4, "ngIf"], ["role", "alert", 1, "alert", "alert-warning"], ["id", "pause", 1, "d-flex", "align-items-center", "justify-content-center"], ["id", "spinner"], [3, "groupFilterType", 4, "ngIf"], [3, "groupFilterType"], [1, "pdfUseOnly", 3, "destroyTemplate", "activeRecordedDays", "emptyTemplates", "sdate", "edate", "marType"]],
    template: function AppComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵtemplate"](0, AppComponent_div_0_Template, 3, 2, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementStart"](1, "div");
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵtemplate"](2, AppComponent_div_2_Template, 2, 0, "div", 1)(3, AppComponent_div_3_Template, 2, 1, "div", 0)(4, AppComponent_app_demo_admission_record_4_Template, 1, 5, "app-demo-admission-record", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("ngIf", ctx.browserVersionError);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("ngIf", ctx.isLoading);
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("ngIf", ctx.appService.isAppDataReady === true && ctx.currentmodule === "app-drug-chart");
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵproperty"]("ngIf", ctx.medicationAdministrationEmptyTemplate);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.NgIf, _components_drug_chart_drug_chart_component__WEBPACK_IMPORTED_MODULE_7__.DrugChartComponent, _components_demo_admission_record_demo_admission_record_component__WEBPACK_IMPORTED_MODULE_8__.DemoAdmissionRecordComponent],
    styles: [".Delay_of_confirmation[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Delay_of_confirmation.svg\");\n}\n\n.Medication_administration_record[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Medication_administration_record.svg\");\n    background-position: center;\n}\n\n.Medication_reconciliation[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Medication_reconciliation.svg\");\n    background-position: center;\n}\n\n.empa-thepay-overview[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Therapy_overview.svg\");\n    background-position: center;\n}\n\n.Pharmacy_Reviewed_Medrec_Done[_ngcontent-%COMP%]{\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/review/Pharmacy_Reviewed_Medrec_Done.svg\");\n}\n.Pharmacy_To_Review_Medrec_Done[_ngcontent-%COMP%]\n{\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/review/Pharmacy_To_Review_Medrec_Done.svg\"); \n}\n.Pharmacy_Technician_Reviewed_Medrec_Done[_ngcontent-%COMP%]{\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/review/Pharmacy_Technician_Reviewed_Medrec_Done.svg\"); \n\n}\n.Pharmacist_Reviewed_Medrec_Done[_ngcontent-%COMP%]\n{\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/review/Pharmacist_Reviewed_Medrec_Done.svg\");  \n}\n\n.Pharmacy_Technician_Reviewed[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/review/Pharmacy_Technician_Reviewed.svg\");\n}\n\n.Pharmacy_To_Review[_ngcontent-%COMP%]{\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/review/Pharmacy_To_Review.svg\");\n}\n\n.Long_delay_of_confirmation[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Long delay of confirmation.svg\");\n}\n\n.Show_all_warnings[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    margin-left: 10px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Show all warnings.svg\");\n}\n\n\n.Non-formulary_medication[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Non-formulary_medication.svg\");\n}\n\n.Prescribe_medication[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Prescribe_medication.svg\");\n    background-position: center;\n}\n\n.Rx_Prescribe_medication[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(/assets/images/epma/op/rx_prescription.svg);\n    background-position: center;\n}\n\n.Print_medication_record[_ngcontent-%COMP%] {\n  width: 320px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-image: url(\"/assets/images/epma/Print_Medication_administration_record.svg\");\n}\n\n.Reference_weight[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Reference_weight.svg\");\n    background-position: center;\n}\n\n.Reference_height[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Reference_height.svg\");\n    background-position: center;\n}\n\n.Print_Medication_administration_record[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Print_Medication_administration_record.svg\");\n}\n\n.Menu[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/therapy/Menu.svg\");\n    background-position: center;\n}\n\n.Sort_Icon[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/menu/Sort_Icon.svg\");\n}\n\n.Routes_Icon[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/menu/Routes_Icon.svg\");\n}\n\n.Group_Icon[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/menu/Group_Icon.svg\");\n}\n\n.epma-date-control[_ngcontent-%COMP%] {\n    line-height: 1.5rem;\n    color: #5c6873;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid #e4e7ea;\n    border-radius: 0.25rem;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    padding-left: 5px;\n    margin-right: 5px;\n    outline: 0;\n}\n\n.Therapy_overview[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/Therapy_overview.svg\");\n    background-position: center;\n}\n\n#Efilterbuttons[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:focus {\n    outline: none;\n    box-shadow: none;\n}\n\n\n.header-fixed[_ngcontent-%COMP%] {\n  position: fixed;\n  width: 100%;\n  background: white;\n  z-index: 10;\n}\n\n.margin-data[_ngcontent-%COMP%]{\n  margin-top: 50px;\n}\n\n.pdfUseOnly[_ngcontent-%COMP%] {\n  visibility: hidden;\n  font-size: 15px;\n}\n\n.button-dropdown[_ngcontent-%COMP%] {\n  background-color: white;\n  border:0;\n  width: 25px;\n}\n\n.dropdown-options[_ngcontent-%COMP%] {\n  padding-left: 25px;\n}\n\n.options-width[_ngcontent-%COMP%] {\n  min-width: 300px;\n}\n\n#spinner[_ngcontent-%COMP%] {\n\tanimation: _ngcontent-%COMP%_frames 1s infinite linear;\n\tbackground: transparent;\n\tborder: 0.50vw solid #FFF;\n\tborder-radius: 100%;\n\tborder-top-color: black;\n\twidth: 5vw;\n\theight: 5vw;\n\topacity: .6;\n\tpadding: 0;\n\tposition: absolute;\n\tz-index: 999;\n}\n@keyframes _ngcontent-%COMP%_frames {\n  0% {\n\ttransform: rotate(0deg);\n  }\n  100% {\n\ttransform: rotate(359deg);\n  }\n}\n\n#pause[_ngcontent-%COMP%] {\n\tdisplay: block;\n\tbackground:\n\t\trgba(0, 0, 0, 0.66)\n\t\tno-repeat\n\t\t0 0;\n\twidth: 100%;\n\theight: 100%;\n\tposition: fixed;\n\tbottom: 0;\n\tleft: 0;\n\tz-index: 1000;\n}\n\n.epma-way-period[_ngcontent-%COMP%] {\n    width: 20px;\n    height: 20px;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-image: url(/assets/images/epma/Patient_Leave.svg);\n    cursor: pointer;\n    margin-top: -6px;\n}\n\n.menuselected[_ngcontent-%COMP%] {\n    background-color:#d9d9d9 ;\n}\n\n.dropdown-item-print[_ngcontent-%COMP%] {\n    position: relative;\n    padding: 0px 0px 0px 25px;\n    border-bottom: 1px solid #c8ced3;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"]
  });
}

/***/ }),

/***/ 635:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppModule: () => (/* binding */ AppModule)
/* harmony export */ });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser */ 436);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.component */ 92);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ 6443);
/* harmony import */ var _components_components_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/components.module */ 5553);
/* harmony import */ var _angular_elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/elements */ 5764);
/* harmony import */ var ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-bootstrap/datepicker */ 8379);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ 4456);
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-toastr */ 4285);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/platform-browser/animations */ 3835);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 7580);













class AppModule {
  constructor(injector) {
    this.injector = injector;
  }
  ngDoBootstrap() {
    const el = (0,_angular_elements__WEBPACK_IMPORTED_MODULE_2__.createCustomElement)(_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent, {
      injector: this.injector
    });
    customElements.define('app-epma', el);
  }
  static #_ = this.ɵfac = function AppModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || AppModule)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injector));
  };
  static #_2 = this.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
    type: AppModule,
    bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent]
  });
  static #_3 = this.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
    providers: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DatePipe, (0,_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.provideHttpClient)((0,_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.withInterceptorsFromDi)())],
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__.BrowserModule, _components_components_module__WEBPACK_IMPORTED_MODULE_1__.ComponentsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.FormsModule, ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_8__.BsDatepickerModule.forRoot(), _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__.BrowserAnimationsModule, ngx_toastr__WEBPACK_IMPORTED_MODULE_10__.ToastrModule.forRoot({
      timeOut: 10000,
      preventDuplicates: true
    })]
  });
}
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsetNgModuleScope"](AppModule, {
    declarations: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent],
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__.BrowserModule, _components_components_module__WEBPACK_IMPORTED_MODULE_1__.ComponentsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.FormsModule, ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_8__.BsDatepickerModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__.BrowserAnimationsModule, ngx_toastr__WEBPACK_IMPORTED_MODULE_10__.ToastrModule]
  });
})();

/***/ }),

/***/ 5553:
/*!*************************************************!*\
  !*** ./src/app/components/components.module.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ComponentsModule: () => (/* binding */ ComponentsModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser/animations */ 3835);
/* harmony import */ var _drug_chart_drug_chart_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drug-chart/drug-chart.component */ 4193);
/* harmony import */ var ngx_bootstrap_popover__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-bootstrap/popover */ 4393);
/* harmony import */ var ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-bootstrap/datepicker */ 8379);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/forms */ 4456);
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ngx-bootstrap/modal */ 2457);
/* harmony import */ var ngx_bootstrap_dropdown__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-bootstrap/dropdown */ 4195);
/* harmony import */ var _directives_number_to_words_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../directives/number-to-words.pipe */ 2324);
/* harmony import */ var _print_discharge_print_discharge_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./print-discharge/print-discharge.component */ 1909);
/* harmony import */ var _template_number_template_number_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template-number/template-number.component */ 9865);
/* harmony import */ var _demo_admission_record_demo_admission_record_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./demo-admission-record/demo-admission-record.component */ 929);
/* harmony import */ var _prescription_infusion_print_template_prescription_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./prescription-infusion-print-template/prescription-infusion-print-template.component */ 5705);
/* harmony import */ var _prescription_non_infusion_print_template_prescription_non_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./prescription-non-infusion-print-template/prescription-non-infusion-print-template.component */ 5005);
/* harmony import */ var ngx_bootstrap_tabs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ngx-bootstrap/tabs */ 5119);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 7580);





















class ComponentsModule {
  static #_ = this.ɵfac = function ComponentsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || ComponentsModule)();
  };
  static #_2 = this.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
    type: ComponentsModule
  });
  static #_3 = this.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
    imports: [ngx_bootstrap_popover__WEBPACK_IMPORTED_MODULE_8__.PopoverModule.forRoot(), ngx_bootstrap_dropdown__WEBPACK_IMPORTED_MODULE_9__.BsDropdownModule.forRoot(), _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__.BrowserAnimationsModule, ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_11__.BsDatepickerModule.forRoot(), _angular_common__WEBPACK_IMPORTED_MODULE_12__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_13__.FormsModule, ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__.ModalModule.forRoot(), _angular_forms__WEBPACK_IMPORTED_MODULE_13__.ReactiveFormsModule, ngx_bootstrap_tabs__WEBPACK_IMPORTED_MODULE_15__.TabsModule.forRoot()]
  });
}
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](ComponentsModule, {
    declarations: [_drug_chart_drug_chart_component__WEBPACK_IMPORTED_MODULE_0__.DrugChartComponent, _directives_number_to_words_pipe__WEBPACK_IMPORTED_MODULE_1__.NumberToWordsPipe, _print_discharge_print_discharge_component__WEBPACK_IMPORTED_MODULE_2__.PrintDischargeComponent, _template_number_template_number_component__WEBPACK_IMPORTED_MODULE_3__.TemplateNumberComponent, _demo_admission_record_demo_admission_record_component__WEBPACK_IMPORTED_MODULE_4__.DemoAdmissionRecordComponent, _prescription_infusion_print_template_prescription_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_5__.PrescriptionInfusionPrintTemplateComponent, _prescription_non_infusion_print_template_prescription_non_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_6__.PrescriptionNonInfusionPrintTemplateComponent],
    imports: [ngx_bootstrap_popover__WEBPACK_IMPORTED_MODULE_8__.PopoverModule, ngx_bootstrap_dropdown__WEBPACK_IMPORTED_MODULE_9__.BsDropdownModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__.BrowserAnimationsModule, ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_11__.BsDatepickerModule, _angular_common__WEBPACK_IMPORTED_MODULE_12__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_13__.FormsModule, ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__.ModalModule, _angular_forms__WEBPACK_IMPORTED_MODULE_13__.ReactiveFormsModule, ngx_bootstrap_tabs__WEBPACK_IMPORTED_MODULE_15__.TabsModule],
    exports: [_drug_chart_drug_chart_component__WEBPACK_IMPORTED_MODULE_0__.DrugChartComponent, _print_discharge_print_discharge_component__WEBPACK_IMPORTED_MODULE_2__.PrintDischargeComponent, _demo_admission_record_demo_admission_record_component__WEBPACK_IMPORTED_MODULE_4__.DemoAdmissionRecordComponent]
  });
})();

/***/ }),

/***/ 929:
/*!*************************************************************************************!*\
  !*** ./src/app/components/demo-admission-record/demo-admission-record.component.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DemoAdmissionRecordComponent: () => (/* binding */ DemoAdmissionRecordComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/enum */ 6134);
/* harmony import */ var _drug_chart_timer_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../drug-chart/timer-helper */ 5255);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/app.service */ 529);
/* harmony import */ var src_app_services_helper_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/helper.service */ 4102);
/* harmony import */ var src_app_services_datarequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/datarequest */ 8698);
/* harmony import */ var src_app_services_apirequest_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/apirequest.service */ 5351);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _print_discharge_print_discharge_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../print-discharge/print-discharge.component */ 1909);
/* harmony import */ var _prescription_infusion_print_template_prescription_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../prescription-infusion-print-template/prescription-infusion-print-template.component */ 5705);
/* harmony import */ var _prescription_non_infusion_print_template_prescription_non_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../prescription-non-infusion-print-template/prescription-non-infusion-print-template.component */ 5005);













const _c0 = ["activeHeaderHeight"];
const _c1 = ["presParentNode"];
const _c2 = ["activeTemplate"];
const _c3 = ["secondActivePart"];
const _c4 = ["presDescription"];
const _c5 = ["pageHeader"];
const _c6 = ["pageFooter"];
const _c7 = ["pageFooter2"];
const _c8 = ["headerSecondPart"];
const _c9 = () => [842, 595];
const _c10 = a0 => ({
  "margin": a0
});
function DemoAdmissionRecordComponent_ng_template_0_span_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Height : " + ctx_r1.appService.refHeightValue + " " + "cms", " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "table", 6)(1, "tr", 7)(2, "td", 8)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](5, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](6, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](8, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](9, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](11, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](12, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](13);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](14, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](15, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](16);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](17, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](18, DemoAdmissionRecordComponent_ng_template_0_span_18_Template, 2, 1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](19, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](20, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](21);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](22, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](23, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](25, "td", 10)(26, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](27, "Department");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](28, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](29, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](30);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](31, "td", 11)(32, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](33, "Room/Bed");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](34, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](35);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](36, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](37);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](38, "tr", 12)(39, "td", 13)(40, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](41, "Admission Date ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](42, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](43);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](44, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](45, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](46);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](47, "td", 14)(48, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](49, "Consultant ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](50, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](51);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](52, "td", 11)(53, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](54, "Known Allergies ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](55, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](56);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate2"](" Name : \u00A0", " " + (ctx_r1.patientDetails.fullname == null ? null : ctx_r1.patientDetails.fullname.split(",")[0]), "\u00A0,\u00A0", ctx_r1.patientDetails.fullname == null ? null : ctx_r1.patientDetails.fullname.split(",")[1], " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "DOB : " + ctx_r1.patientDetails.dob, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Age : " + ctx_r1.patientDetails.age, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.patientDetails.gender == "Male" ? "Gender: M" : "Gender: F", " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Weight : " + ctx_r1.appService.refWeightValue + " " + "kg", " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.appService.refHeightValue);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Hospital Number : " + ctx_r1.patientDetails.hospitalnumber, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "NHS Number : " + ctx_r1.patientDetails.nhsnumber, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ctx_r1.encounterDetails.assignedpatientlocationpointofcare);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", (ctx_r1.encounterDetails.assignedpatientlocationroom || ctx_r1.encounterDetails.assignedpatientlocationbay) + " / ", "");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.encounterDetails.assignedpatientlocationbed, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.encounterDetails.admitdate == null ? null : ctx_r1.encounterDetails.admitdate.split("-").reverse().join("-"), "");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("Hospitalisation Day ", " " + ctx_r1.encounterDetails.dayspassed, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.encounterDetails.consultingdoctortext, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.patientDetails.allergies, " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainer"](0);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "MEDICATIONS \u00A0 PRESCRIBED \u00A0\u00A0 FOR \u00A0 3 \u00A0DAYS");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 19)(1, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "MEDICATION ADMINISTRATION RECORD");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_app_prescription_infusion_print_template_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "app-prescription-infusion-print-template", 25);
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("prescription", pres_r3)("fromPrinting", true);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_app_prescription_non_infusion_print_template_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "app-prescription-non-infusion-print-template", 25);
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("prescription", pres_r3)("fromPrinting", true);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1, " PRN ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1, " Prescriber to confirm ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    let tmp_12_0;
    let tmp_13_0;
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Treatment End Date: " + ((tmp_12_0 = ctx_r1.appService.GetCurrentPosology(pres_r3).prescriptionenddate) == null ? null : tmp_12_0.split("T")[0]), " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Treatment End Time: " + ((tmp_13_0 = ctx_r1.appService.GetCurrentPosology(pres_r3).prescriptionenddate) == null ? null : tmp_13_0.split("T")[1]), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "tr", 12)(2, "td", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_app_prescription_infusion_print_template_3_Template, 1, 2, "app-prescription-infusion-print-template", 24)(4, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_app_prescription_non_infusion_print_template_4_Template, 1, 2, "app-prescription-non-infusion-print-template", 24)(5, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_div_5_Template, 2, 0, "div", 9)(6, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_div_6_Template, 2, 0, "div", 9)(7, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_div_7_Template, 5, 2, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active" && pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).infusiontypeid);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active" && pres_r3 && !ctx_r1.appService.GetCurrentPosology(pres_r3).infusiontypeid);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).prn);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).doctorsorder);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && (pres_r3.infusiontype_id === "ci" || pres_r3.infusiontype_id === "pca") && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency !== "variable" && ctx_r1.appService.GetCurrentPosology(pres_r3).prescriptionenddate);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "tr", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](2, "td", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_span_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipe"](2, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipeBind2"](2, 1, ctx_r1.dates[0], "dd/MM/yyyy"));
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_span_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipe"](2, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipeBind2"](2, 1, ctx_r1.dates[1], "dd/MM/yyyy"));
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_span_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipe"](2, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipeBind2"](2, 1, ctx_r1.dates[2], "dd/MM/yyyy"));
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_19_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "td", 28)(2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Time and Dose/Rate");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "td", 29)(5, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6, "Given");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](7, "td", 29)(8, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](9, "Checked");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "tr", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](2, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_19_ng_container_2_Template, 10, 0, "ng-container", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngStyle", ctx_r1.setHeightWidthForEmptyTemplate());
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r1.repeatArray);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_1_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("x", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4]), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_1_td_1_Template, 2, 1, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("x", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4]), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_3_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("protocol", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4]), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_3_td_1_Template, 2, 1, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_4_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("x", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4], "dose"), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_4_td_1_Template, 2, 1, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("x", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4], "dose"), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_6_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("protocol", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4], "dose"), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_6_td_1_Template, 2, 1, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_7_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("x", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4], "administered"), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_7_td_1_Template, 2, 1, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("x", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4], "administered"), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_9_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "td", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dj_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).index;
    const di_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", ctx_r1.returnTimeDose("protocol", di_r5, dj_r4, k_r7, pres_r3, ctx_r1.dates[dj_r4], "administered"), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_9_td_1_Template, 2, 1, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_10_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "td", 33);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_10_td_1_Template, 1, 0, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "td", 33);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_12_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "td", 33);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_12_td_1_Template, 1, 0, "td", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 9)(2, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_2_Template, 2, 1, "td", 32)(3, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_3_Template, 2, 1, "ng-container", 9)(4, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_4_Template, 2, 1, "ng-container", 9)(5, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_5_Template, 2, 1, "td", 32)(6, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_6_Template, 2, 1, "ng-container", 9)(7, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_7_Template, 2, 1, "ng-container", 9)(8, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_8_Template, 2, 1, "td", 32)(9, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_9_Template, 2, 1, "ng-container", 9)(10, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_10_Template, 2, 1, "ng-container", 9)(11, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_td_11_Template, 1, 0, "td", 32)(12, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_ng_container_12_Template, 2, 1, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const pres_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && pres_r3.infusiontype_id !== "ci" && pres_r3.infusiontype_id !== "pca" && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency !== "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && (pres_r3.infusiontype_id === "ci" || pres_r3.infusiontype_id === "pca"));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency === "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency !== "protocol" && pres_r3.infusiontype_id !== "ci" && pres_r3.infusiontype_id !== "pca");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && (pres_r3.infusiontype_id === "ci" || pres_r3.infusiontype_id === "pca"));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency === "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency !== "protocol" && pres_r3.infusiontype_id !== "ci" && pres_r3.infusiontype_id !== "pca");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && (pres_r3.infusiontype_id === "ci" || pres_r3.infusiontype_id === "pca"));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency === "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency !== "protocol" && pres_r3.infusiontype_id !== "ci" && pres_r3.infusiontype_id !== "pca");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && (pres_r3.infusiontype_id === "ci" || pres_r3.infusiontype_id === "pca"));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", pres_r3 && ctx_r1.appService.GetCurrentPosology(pres_r3).frequency === "protocol");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "tr", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_ng_container_1_Template, 13, 12, "ng-container", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r1.repeatArray);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_tr_1_Template, 2, 1, "tr", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    const pres_r3 = ctx_r5.$implicit;
    const k_r7 = ctx_r5.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r1.arrayForTemplate(pres_r3, k_r7));
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_21_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0, 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "td", 28)(2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Time/Dose");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "td", 29)(5, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6, "Given");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](7, "td", 29)(8, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](9, "Checked");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "tr", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](2, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_21_ng_container_2_Template, 10, 0, "ng-container", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "tr", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](4, "td")(5, "td")(6, "td")(7, "td")(8, "td")(9, "td")(10, "td")(11, "td")(12, "td")(13, "td")(14, "td")(15, "td");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](16, "tr", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](17, "td")(18, "td")(19, "td")(20, "td")(21, "td")(22, "td")(23, "td")(24, "td")(25, "td")(26, "td")(27, "td")(28, "td");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](29, "tr", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](30, "td")(31, "td")(32, "td")(33, "td")(34, "td")(35, "td")(36, "td")(37, "td")(38, "td")(39, "td")(40, "td")(41, "td");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](42, "tr", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](43, "td")(44, "td")(45, "td")(46, "td")(47, "td")(48, "td")(49, "td")(50, "td")(51, "td")(52, "td")(53, "td")(54, "td");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](55, "tr", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](56, "td")(57, "td")(58, "td")(59, "td")(60, "td")(61, "td")(62, "td")(63, "td")(64, "td")(65, "td")(66, "td")(67, "td");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](68, "tr", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](69, "td")(70, "td")(71, "td")(72, "td")(73, "td")(74, "td")(75, "td")(76, "td")(77, "td")(78, "td")(79, "td")(80, "td");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r1.repeatArray);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "table", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](2, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_2_Template, 8, 5, "ng-container", 9)(3, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_3_Template, 3, 0, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "tr", 12)(5, "td", 22)(6, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](7, "Date");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](8, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](9, "td", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](10, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_span_10_Template, 3, 4, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](11, "td", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](12, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](13, "td", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](14, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_span_14_Template, 3, 4, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](15, "td", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](16, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](17, "td", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](18, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_span_18_Template, 3, 4, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](19, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_19_Template, 3, 2, "ng-container", 9)(20, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_20_Template, 2, 1, "ng-container", 9)(21, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_ng_container_21_Template, 81, 1, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpureFunction1"](9, _c10, ctx_r1.getMargin()));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "empty");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "empty");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_2_div_4_div_1_Template, 22, 11, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r1.prescription);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_5_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "div");
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_5_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainer"](0);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div", null, 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, DemoAdmissionRecordComponent_ng_template_2_div_5_div_3_Template, 1, 0, "div", 9)(4, DemoAdmissionRecordComponent_ng_template_2_div_5_ng_container_4_Template, 1, 0, "ng-container", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const activeHeader_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵreference"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "report" || ctx_r1.marType === "current" || ctx_r1.prescription.length == 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngTemplateOutlet", activeHeader_r8);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_6_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainer"](0);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](2, DemoAdmissionRecordComponent_ng_template_2_div_6_ng_container_2_Template, 1, 0, "ng-container", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    const activeSecondPart_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵreference"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngTemplateOutlet", activeSecondPart_r9);
  }
}
function DemoAdmissionRecordComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](0, DemoAdmissionRecordComponent_ng_template_2_ng_container_0_Template, 1, 0, "ng-container", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](2, DemoAdmissionRecordComponent_ng_template_2_div_2_Template, 3, 0, "div", 16)(3, DemoAdmissionRecordComponent_ng_template_2_div_3_Template, 3, 0, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](4, DemoAdmissionRecordComponent_ng_template_2_div_4_Template, 2, 1, "div", 9)(5, DemoAdmissionRecordComponent_ng_template_2_div_5_Template, 5, 2, "div", 9)(6, DemoAdmissionRecordComponent_ng_template_2_div_6_Template, 3, 1, "div", 9);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    const descriptionTemplate_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵreference"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngTemplateOutlet", descriptionTemplate_r10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "empty");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active" || ctx_r1.marType === "empty");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active" || ctx_r1.marType === "current" || ctx_r1.marType === "report");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active" || ctx_r1.marType === "current" || ctx_r1.marType === "report");
  }
}
function DemoAdmissionRecordComponent_ng_template_4_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "RECORDED \u00A0\u00A0ADMINISTRATIONS FOR \u00A0PAST \u00A05 DAYS ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
}
function DemoAdmissionRecordComponent_ng_template_4_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 39)(1, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("RECORDED\u00A0\u00A0ADMINISTRATIONS\u00A0\u00A0FOR \u00A0PERIOD \u00A0", (ctx_r1.sdate == null ? null : ctx_r1.sdate.split("-").reverse().join("-")) + " to " + (ctx_r1.edate == null ? null : ctx_r1.edate.split("-").reverse().join("-")), " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_4_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("MEDICATION ADMINISTRATION RECORD \u00A0\u00A0 ", ctx_r1.todaysDate, " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_4_div_1_Template, 3, 0, "div", 16)(2, DemoAdmissionRecordComponent_ng_template_4_div_2_Template, 3, 1, "div", 38)(3, DemoAdmissionRecordComponent_ng_template_4_div_3_Template, 3, 1, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "report");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "current");
  }
}
function DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_app_prescription_infusion_print_template_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "app-prescription-infusion-print-template", 46);
  }
  if (rf & 2) {
    const data_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("fromPrinting", true)("prescription", ctx_r1.prescriptionMapping[data_r11.key]);
  }
}
function DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_app_prescription_non_infusion_print_template_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](0, "app-prescription-non-infusion-print-template", 47);
  }
  if (rf & 2) {
    const data_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("prescription", ctx_r1.prescriptionMapping[data_r11.key])("fromPrinting", true);
  }
}
function DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 12)(1, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const data_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"]("Status: " + ctx_r1.getStatus(ctx_r1.prescriptionMappingForTemplate[data_r11.key].status));
  }
}
function DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_tr_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "tr", 31)(1, "td", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "td", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](5, "td", 48);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const infoObj_r12 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", infoObj_r12.stat, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", infoObj_r12.date, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", infoObj_r12.time, " ");
  }
}
function DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "table", 40)(2, "tr", 12)(3, "td", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](4, DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_app_prescription_infusion_print_template_4_Template, 1, 2, "app-prescription-infusion-print-template", 42)(5, DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_app_prescription_non_infusion_print_template_5_Template, 1, 2, "app-prescription-non-infusion-print-template", 43)(6, DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_div_6_Template, 3, 1, "div", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](7, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](8, "tr", 12)(9, "td", 45)(10, "span")(11, "b");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](12, "Status");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](13, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](14, "td", 45)(15, "span")(16, "b");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](17, "Date");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](18, "td", 45)(19, "span")(20, "b");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](21, "Time and Dose / Rate");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](22, DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_tr_22_Template, 7, 3, "tr", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const data_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpureFunction1"](5, _c10, ctx_r1.getMargin()));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescriptionMapping[data_r11.key]).infusiontypeid);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", !ctx_r1.appService.GetCurrentPosology(ctx_r1.prescriptionMapping[data_r11.key]).infusiontypeid);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.getStatus(ctx_r1.prescriptionMappingForTemplate[data_r11.key].status));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](16);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", data_r11["prescription_information"]);
  }
}
function DemoAdmissionRecordComponent_ng_template_6_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](1, DemoAdmissionRecordComponent_ng_template_6_div_0_div_1_Template, 23, 7, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r1.marType === "active" || ctx_r1.prescription.length == 0 || ctx_r1.marType === "report" || ctx_r1.marType === "current");
  }
}
function DemoAdmissionRecordComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](0, DemoAdmissionRecordComponent_ng_template_6_div_0_Template, 2, 1, "div", 20);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r1.partTwoPrescriptions);
  }
}
class DemoAdmissionRecordComponent {
  constructor(timeerHelper, appService, hs, renderer, dr, apiRequest) {
    this.timeerHelper = timeerHelper;
    this.appService = appService;
    this.hs = hs;
    this.renderer = renderer;
    this.dr = dr;
    this.apiRequest = apiRequest;
    this.marType = 'empty';
    this.activeRecordedDays = 5;
    this.destroyTemplate = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    this.repeatArray = [1, 2, 3];
    this.repeatArray2 = [];
    this.dates = [];
    this.pres1 = [1, 2, 3];
    this.daysOfWeek = {
      "0": "Sunday",
      "1": "Monday",
      "2": "Tuesday",
      "3": "Wednesday",
      "4": "Thursday",
      "5": "Friday",
      "6": "Saturday"
    };
    this.transferDoses = {};
    this.presIds = [];
    this.prescriptionHistory = [];
    this.prescriptionMapping = {};
    this.prescriptionMappingForTemplate = {};
    this.objectKeys = Object.keys;
    this.updateHeights = [];
    this.prescriptionProperFlow = {};
    this.patientDetails = {
      fullname: '',
      born: '',
      hospitalnumber: '',
      nhsnumber: '',
      allergies: '',
      dob: '',
      age: '',
      gender: ''
    };
    this.partTwoPrescriptions = [];
    this.encounterDetails = {
      attendingdoctortext: '',
      assignedpatientlocationroom: '',
      assignedpatientlocationbay: '',
      assignedpatientlocationbed: '',
      admitdatetime: '',
      admitdate: '',
      dayspassed: 0,
      assignedpatientlocationpointofcare: '',
      consultingdoctortext: ''
    };
    this.partTwoHeights = [];
    this.rateEventsdata = [];
    this.headerSection = 0;
  }
  ngOnInit() {
    ///////
    const dateTo = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(3, 'd');
    dateTo.set({
      'hour': 23,
      'minute': 59,
      'second': 59
    });
    const startDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(-1, 'd');
    startDate.set({
      'hour': 23,
      'minute': 59,
      'second': 59
    });
    this.timeerHelper.createEvents(startDate, dateTo, true);
    this.appService.reportData = this.appService.reportData.filter(function (element) {
      return element !== undefined;
    });
    var todayDate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
    todayDate.set({
      'hour': 0,
      'minute': 0,
      'second': 0
    });
    this.rateEventsdata = this.appService.reportData.filter(e => {
      return !e.dose_id.includes("dur") && !e.dose_id.includes("pause") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent") && moment__WEBPACK_IMPORTED_MODULE_0___default()(e.eventStart).isBetween(moment__WEBPACK_IMPORTED_MODULE_0___default()(todayDate), dateTo);
    });
    //////
    this.prescription = [];
    // this.appService.prescriptionEvent
    this.appService.reportData = [];
    this.appService.Prescription.forEach(pres => {
      pres.comments = pres.comments ? pres.comments?.split(' ').join(' ') : null;
    });
    this.partTwoHeights = [];
    this.medicationAdministration = this.appService.Medicationadministration.slice();
    this.medicationAdministration.forEach(ma => {
      ma['checked'] = false;
    });
    this.todaysDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().format('DD-MM-YYYY');
    // console.log('pres history', this.appService.prescriptionHistory);
    // console.log('encounter', this.appService.encounterDetails);
    // console.log('height, weight', this.appService.refHeightValue, this.appService.refWeightValue);
    this.patientDetails = this.appService.patientDetails;
    const splitAge = this.patientDetails.born?.split(' ');
    this.patientDetails.dob = splitAge[0] + ' ' + splitAge[1] + ' ' + splitAge[2];
    this.patientDetails.age = splitAge[3];
    this.encounterDetails = this.appService.encounterDetails;
    if (this.encounterDetails.assignedpatientlocationbay) {
      this.encounterDetails.assignedpatientlocationbay = (this.encounterDetails.assignedpatientlocationbay ?? "").replace(new RegExp('-', 'g'), ' - ');
    } else {
      this.encounterDetails.assignedpatientlocationbay = "";
    }
    if (this.encounterDetails.assignedpatientlocationbed) {
      this.encounterDetails.assignedpatientlocationbed = (this.encounterDetails.assignedpatientlocationbed ?? "").replace(new RegExp('-', 'g'), ' - ');
    } else {
      this.encounterDetails.assignedpatientlocationbed = "";
    }
    this.encounterDetails.admitdate = this.appService.encounterDetails.admitdatetime?.split('T')[0];
    this.encounterDetails.dayspassed = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.encounterDetails['admitdate']).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()(), 'days');
    this.metaprescriptionstatus = this.appService.MetaPrescriptionstatus;
    this.appService.FilteredPrescription.forEach(pres => {
      this.prescriptionMapping[pres.prescription_id] = pres;
    });
    // console.log('this.prescriptionMapping',this.prescriptionMapping);
    this.prescription = [];
    // this.hs.getDosesPrescriptions(this.prescription);
    this.dates.push(new Date());
    for (let i = 1; i <= 3; i++) {
      this.dates.push(new Date(this.dates[i - 1].getTime() + 86400000));
    }
    if (this.marType === 'empty') {
      this.prescription = [];
      for (let i = 0; i < this.emptyTemplates; i++) {
        this.prescription.push(null);
      }
    } else if (this.marType === 'active') {
      const dateFrom = moment__WEBPACK_IMPORTED_MODULE_0___default()().subtract(this.activeRecordedDays || 5, 'd');
      this.timeerHelper.createEvents(dateFrom, moment__WEBPACK_IMPORTED_MODULE_0___default()(), true);
      this.appService.reportData = this.appService.reportData.filter(function (element) {
        return element !== undefined;
      });
      const pastEvents = this.appService.reportData.filter(e => {
        return !e.dose_id.includes("dur") && !e.dose_id.includes("pause") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent") && moment__WEBPACK_IMPORTED_MODULE_0___default()(e.eventStart).isBefore() && moment__WEBPACK_IMPORTED_MODULE_0___default()(e.eventStart).isAfter(dateFrom) && !e.content.includes("Administer_PRN");
      });
      // const pastEvents = this.appService.events.filter(obj => {
      //   return moment(obj.eventStart).isBefore() && moment(obj.eventStart).isAfter(dateFrom);
      // });
      // console.log("past events", pastEvents);
      const checkPresId = {};
      const activeStartDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(-1, 'd');
      activeStartDate.set({
        'hour': 23,
        'minute': 59,
        'second': 59
      });
      const dateToForFuture = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(3, 'd');
      this.timeerHelper.createEvents(activeStartDate, dateToForFuture, true);
      const futureEvents = this.appService.reportData.filter(obj => {
        const endDate = this.appService.GetCurrentPosology(this.prescriptionMapping[obj.prescription_id]).prescriptionenddate;
        let endDateCheck = true;
        // // for test
        // if (!obj.isinfusion) {
        //   return false;
        // }
        if (endDate) {
          endDateCheck = moment__WEBPACK_IMPORTED_MODULE_0___default()().isBefore(endDate);
        }
        if (checkPresId[obj.prescription_id]) {
          return false;
        } else if ((!obj.eventEnd || moment__WEBPACK_IMPORTED_MODULE_0___default()(obj.eventEnd).isAfter(moment__WEBPACK_IMPORTED_MODULE_0___default()())) && endDateCheck) {
          checkPresId[obj.prescription_id] = 1;
          return true;
        }
      });
      this.appService.FilteredPrescription.forEach(obj => {
        this.prescription.push(this.prescriptionMapping[obj.prescription_id]);
      });
      // console.log('prescription 1',this.prescription);
      this.prescription = this.prescription.filter(x => x.prescriptionstatus_id == "fe406230-be68-4ad6-a979-ef15c42365cf" || x.prescriptionstatus_id == "fd8833de-213b-4570-8cc7-67babfa31393" || x.prescriptionstatus_id == "63e946cd-b4a4-4f60-9c18-a384c49486ea");
      // console.log('prescription 2',this.prescription);
      this.hs.getDosesPrescriptions(this.prescription);
      if (this.prescription.length > 0) {
        this.protocolGetDay();
      }
      // console.log("pres dictionary", this.hs.prescriptionDictionary);
      this.distributeEvents(pastEvents);
    } else if (this.marType === 'report') {
      const reportStartDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.sdate).subtract(1, 'd');
      reportStartDate.set({
        'hour': 23,
        'minute': 59,
        'second': 59
      });
      const reportEndDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.edate);
      reportEndDate.set({
        'hour': 23,
        'minute': 59,
        'second': 59
      });
      this.timeerHelper.createEvents(reportStartDate, reportEndDate, true);
      this.appService.reportData = this.appService.reportData.filter(function (element) {
        return element !== undefined;
      });
      const rangeEvents = this.appService.reportData.filter(e => {
        return !e.dose_id.includes("dur") && !e.dose_id.includes("pause") && !e.dose_id.includes("flowrate") && !e.content.includes("Administer_PRN") && !e.dose_id.includes("infusionevent") && moment__WEBPACK_IMPORTED_MODULE_0___default()(e.eventStart).isSameOrAfter(this.sdate, 'day') && moment__WEBPACK_IMPORTED_MODULE_0___default()(e.eventStart).isSameOrBefore(this.edate, 'day');
      });
      // const rangeEvents = this.appService.reportData.filter(obj => {
      //   return moment(obj.eventStart).isSame(this.sdate, 'day') || moment(obj.eventStart).isSame(this.edate, 'day')
      //     || (moment(obj.eventStart).isAfter(this.sdate, 'day') && moment(obj.eventStart).isBefore(this.edate, 'day'))
      // });
      this.distributeEvents(rangeEvents);
    } else {
      var todayDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(-1, 'd');
      this.timeerHelper.createEvents(todayDate, moment__WEBPACK_IMPORTED_MODULE_0___default()(), true);
      this.appService.reportData = this.appService.reportData.filter(function (element) {
        return element !== undefined;
      });
      const todayEvents = this.appService.reportData.filter(e => {
        return !e.dose_id.includes("dur") && !e.dose_id.includes("pause") && !e.dose_id.includes("flowrate") && !e.content.includes('Administer_PRN') && moment__WEBPACK_IMPORTED_MODULE_0___default()().isSame(e.eventStart, 'day');
      });
      // const todayEvents = this.appService.events.filter(e => {
      //   return !e.dose_id.includes("dur") && !e.dose_id.includes("pause") && !e.dose_id.includes("flowrate") 
      //   && moment().isSame(e.eventStart, 'day')
      // });
      // const todayEvents = this.appService.events.filter(obj => {
      //   return moment().isSame(obj.eventStart, 'day');
      // });
      this.distributeEvents(todayEvents);
    }
  }
  getPrescriptionStatus(pres) {
    var status = this.metaprescriptionstatus.find(x => x.prescriptionstatus_id == pres.prescriptionstatus_id);
    if (status) return this.metaprescriptionstatus.find(x => x.prescriptionstatus_id == pres.prescriptionstatus_id).status;else return "active";
  }
  ngAfterViewInit() {
    this.updateHeights.forEach(h => {
      // const filteredDivHeight = this.divs.filter((el, ind) => ind === h[0])[0].nativeElement.offsetHeight;
      // const filterPresHeight = this.presDescriptionDivs.filter((el, ind) => ind === h[0])[0].nativeElement.offsetHeight;
      // let extraRowsHeight;
      // let presDivHeight;
      // const filteredDivHeight = this.divs.filter((el, ind) => ind === h[0])[0].nativeElement.offsetHeight;
      let extraRowsHeight;
      let presDivHeight;
      if (h[1] > 5) {
        extraRowsHeight = h[1] * 15;
        presDivHeight = (h[1] + 6) * 15;
      } else {
        extraRowsHeight = h[1] * 30;
        presDivHeight = (h[1] + 6) * 30;
      }
      // const extraHeightAdded = (filteredDivHeight + extraRowsHeight);
      // this.renderer.setStyle(this.divs.filter((el, i) => i === h[0])[0].nativeElement, "height", extraHeightAdded + 'px');
      // this.renderer.setStyle(this.presDescriptionDivs.filter((el, i) => i === h[0])[0].nativeElement, "height", presDivHeight + 30 + 'px');
    });
    let occupied = 800;
    let pageNumber = 0;
    if (this.marType === 'active' || this.marType === 'empty') {
      this.divs.forEach((div, index) => {
        let filteredDiv;
        if (index > 0) {
          filteredDiv = this.divs.filter((el, i) => i === index - 1)[0].nativeElement;
        }
        // console.log('Div' + pageNumber + ' ' + filteredDiv);
        // console.log('Div' + pageNumber + ' ' + div.nativeElement.offsetHeight);
        if (filteredDiv && (occupied - div.nativeElement.offsetHeight < 0 || index > 0 && filteredDiv.offsetHeight > 260)) {
          const height = filteredDiv.offsetHeight + occupied;
          // this.renderer.setStyle(filteredDiv, "height", height + 'px');
          const pageHeaderDiv = this.pageHeaders.filter((el, ind1) => ind1 === index)[0].nativeElement;
          // this.renderer.setStyle(pageHeaderDiv, 'visibility', 'visible');
          const pageFooterDiv = this.pageFooter.filter((el, ind1) => ind1 === index - 1)[0].nativeElement;
          const span = this.renderer.createElement('span');
          const text = this.renderer.createText(`Page ${pageNumber + 1}`);
          this.renderer.appendChild(span, text);
          this.renderer.setAttribute(span, 'id', `partOnePage${pageNumber + 1}`);
          this.renderer.appendChild(pageFooterDiv, span);
          // this.renderer.setStyle(pageFooterDiv, 'visibility', 'hidden');
          const xHeight = !pageNumber ? height - 280 : height - 100;
          // this.renderer.setStyle(pageFooterDiv, 'margin-top', xHeight + 'px');
          occupied = 800;
          pageNumber += 1;
        }
        // this.renderer.setStyle(div.nativeElement, "margin-top", "10px");
        occupied -= 10;
        occupied -= div.nativeElement.offsetHeight;
        if (index === this.divs.length - 1) {
          const filteredDiv = this.divs.filter((el, i) => i === index)[0].nativeElement;
          const height = filteredDiv.offsetHeight + occupied;
          // this.renderer.setStyle(filteredDiv, "height", height + 'px');
        }
      });
      {
        let lastIndex = this.divs.length - 1;
        if (this.pageFooter.filter((el, ind1) => ind1 === lastIndex).length > 0) {
          const pageFooterDiv = this.pageFooter.filter((el, ind1) => ind1 === lastIndex)[0].nativeElement;
          const span = this.renderer.createElement('span');
          const text = this.renderer.createText(`Page ${pageNumber + 1}`);
          this.renderer.appendChild(span, text);
          this.renderer.setAttribute(span, 'id', `partOnePage${pageNumber + 1}`);
          this.renderer.appendChild(pageFooterDiv, span);
        }
        // this.renderer.setStyle(pageFooterDiv, 'visibility', 'hidden');
        let xHeight = 210;
        if (occupied > 200) {
          xHeight = 480;
        }
        // this.renderer.setStyle(pageFooterDiv, 'margin-top', xHeight + 'px');
        occupied = 595;
        pageNumber += 1;
      }
      let currTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(moment__WEBPACK_IMPORTED_MODULE_0___default()()).format('HH:mm');
      for (let l = 0; l < pageNumber; l++) {
        const el = document.getElementById(`partOnePage${l + 1}`);
        // el.textContent = `Page ${l + 1} of ${pageNumber}   Time: ${currTime}`;
      }
      if (this.headerDiv && occupied - this.headerDiv.nativeElement.offsetHeight < 0) {
        const filteredDiv = this.divs.filter((el, i) => i === this.divs.length - 1)[0].nativeElement.offsetHeight;
        const height = filteredDiv + occupied;
        // this.renderer.setStyle(this.divs.filter((el, i) => i === this.divs.length - 1)[0].nativeElement, "height", height + 'px');
        occupied = 595;
      }
    }
    if (this.marType !== 'empty') {
      this.renderer.setStyle(this.headerDiv.nativeElement, "margin-top", "10px");
      occupied -= 10;
      occupied -= this.headerDiv.nativeElement.offsetHeight;
      pageNumber = 0;
      // let pageHeight = 595;      
      // this.divs.forEach((div, index) => {
      //   if (index > 0 && (pageHeight - div.nativeElement.offsetHeight < 60 || (pageHeight < 200))) {
      //     const filteredDiv = this.divs.filter((el, i) => i === index - 1)[0].nativeElement.offsetHeight;
      //     const height = filteredDiv + pageHeight;
      //     this.renderer.setStyle(this.divs.filter((el, i) => i === index - 1)[0].nativeElement, "height", height + 'px');
      //     const pageHeaderDiv = this.headerSecondPart.filter((el, ind1) => ind1 === index)[0].nativeElement;
      //     this.renderer.setStyle(pageHeaderDiv, 'display', 'block');
      //     const pageFooterDiv = this.pageFooter2.filter((el, ind1) => ind1 === index - 1)[0].nativeElement;
      //     const span = this.renderer.createElement('span');
      //     const text = this.renderer.createText(`Page ${pageNumber + 1}`);
      //     this.renderer.appendChild(span, text);
      //     this.renderer.setAttribute(span, 'id', `partTwoPage${pageNumber + 1}`);
      //     this.renderer.appendChild(pageFooterDiv, span);
      //     this.renderer.setStyle(pageFooterDiv, 'visibility', 'visible');
      //     let xHeight = (height - 200);
      //     if (xHeight > 80) {
      //       xHeight = 45;
      //     }
      //     if (this.marType === 'report' || this.marType === 'current') {
      //       this.renderer.setStyle(pageFooterDiv, 'margin-top', xHeight + pageHeight - 100 + 'px');
      //     } else {
      //       this.renderer.setStyle(pageFooterDiv, 'margin-top', xHeight + pageHeight - 60 + 'px');
      //     }
      //     pageHeight = 595;
      //     pageNumber += 1;
      //   }
      //   this.renderer.setStyle(div.nativeElement, "margin-top", "10px");
      //   pageHeight -= 10;
      //   pageHeight -= div.nativeElement.offsetHeight;
      // });
      this.divs2.forEach((div, index) => {
        if (index > 0 && (occupied - div.nativeElement.offsetHeight < 60 || occupied < 200)) {
          const filteredDiv = this.divs2.filter((el, i) => i === index - 1)[0].nativeElement.offsetHeight;
          const height = filteredDiv + occupied;
          // console.log('filteredDiv',filteredDiv)
          // console.log('height',height)
          // this.renderer.setStyle(this.divs2.filter((el, i) => i === index - 1)[0].nativeElement, "height", (height - 100) + 'px');
          const pageHeaderDiv = this.headerSecondPart.filter((el, ind1) => ind1 === index)[0].nativeElement;
          this.renderer.setStyle(pageHeaderDiv, 'display', 'block');
          const pageFooterDiv = this.pageFooter2.filter((el, ind1) => ind1 === index - 1)[0].nativeElement;
          const span = this.renderer.createElement('span');
          const text = this.renderer.createText(`Page ${pageNumber + 1}`);
          this.renderer.appendChild(span, text);
          this.renderer.setAttribute(span, 'id', `partTwoPage${pageNumber + 1}`);
          this.renderer.appendChild(pageFooterDiv, span);
          this.renderer.setStyle(pageFooterDiv, 'visibility', 'hidden');
          let xHeight = height - 200;
          if (xHeight > 80) {
            xHeight = 45;
          }
          if (this.marType === 'report' || this.marType === 'current') {
            // this.renderer.setStyle(pageFooterDiv, 'margin-top', xHeight + occupied - 100 + 'px');
          } else {
            // this.renderer.setStyle(pageFooterDiv, 'margin-top', xHeight + occupied - 60 + 'px');
          }
          occupied = 555;
          pageNumber += 1;
        }
        this.renderer.setStyle(div.nativeElement, "margin-top", "10px");
        occupied -= 10;
        occupied -= div.nativeElement.offsetHeight;
      });
      {
        let lastIndex = this.divs2.length - 1;
        if (this.divs2.filter((el, i) => i === lastIndex).length > 0) {
          const filteredDiv = this.divs2.filter((el, i) => i === lastIndex)[0].nativeElement.offsetHeight;
          const height = filteredDiv + occupied;
          let xHeight = height - 300;
        }
        if (this.pageFooter2.filter((el, ind1) => ind1 === lastIndex).length > 0) {
          const pageFooterDiv = this.pageFooter2.filter((el, ind1) => ind1 === lastIndex)[0].nativeElement;
          const span = this.renderer.createElement('span');
          const text = this.renderer.createText(`Page ${pageNumber + 1}`);
          this.renderer.appendChild(span, text);
          this.renderer.setStyle(span, 'color', 'white');
          this.renderer.setAttribute(span, 'id', `partTwoPage${pageNumber + 1}`);
          this.renderer.appendChild(pageFooterDiv, span);
          this.renderer.setStyle(pageFooterDiv, 'visibility', 'visible');
          this.renderer.setStyle(pageFooterDiv, 'margin-top', 0 + 'px');
        }
        occupied = 565;
        pageNumber += 1;
      }
      // let currTime = moment(moment()).format('HH:mm');
      // for (let l = 0; l < pageNumber; l++) {
      //   const el = document.getElementById(`partTwoPage${l + 1}`);
      //   el.textContent = `Page ${l + 1} of ${pageNumber}  Time: ${currTime}`;
      // }
    }
  }
  distributeEvents(events) {
    this.prescriptionMappingForTemplate = {};
    events = events.filter(x => !x.dose_id.includes("infusionevent"));
    events.forEach(obj => {
      const status = this.getPrescriptionStatus(this.prescriptionMapping[obj.prescription_id]);
      this.prescriptionMappingForTemplate[obj.prescription_id] ? '' : this.prescriptionMappingForTemplate[obj.prescription_id] = {
        status
      };
      this.prescriptionMappingForTemplate[obj.prescription_id]['name'] = this.prescriptionMapping[obj.prescription_id].__medications[0].name;
      this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'] ? '' : this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'] = [];
      const updatedObj = this.checkMedicationAdministered(obj);
      let administration = this.medicationAdministration.find(x => x.logicalid == updatedObj.dose_id);
      if (administration && !administration.isenterinerror) {
        let administrationStatus = administration.adminstrationstatus;
        if (administrationStatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.AdministrationStatus.selfadminister) {
          if (this.prescriptionMapping[obj.prescription_id].infusiontype_id == "rate") {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              sort: updatedObj.sort,
              stat: 'STARTED'
            });
          } else {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              stat: 'SELF ' + ' - ' + 'ADMINISTERED'
            });
          }
        } else if (administrationStatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.AdministrationStatus.notgiven) {
          if (this.prescriptionMapping[obj.prescription_id].infusiontype_id == "rate") {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              sort: updatedObj.sort,
              stat: 'STARTED'
            });
          } else {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              sort: updatedObj.sort,
              stat: 'NOT GIVEN'
            });
          }
        } else if (administrationStatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.AdministrationStatus.defer) {
          if (this.prescriptionMapping[obj.prescription_id].infusiontype_id == "rate") {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              sort: updatedObj.sort,
              stat: 'STARTED'
            });
          } else {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              sort: updatedObj.sort,
              stat: 'DEFERRED'
            });
          }
        } else {
          if (this.prescriptionMapping[obj.prescription_id].infusiontype_id == "rate") {
            if (updatedObj.content.includes('BolusAdministrationCompleted')) {
              this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                date: updatedObj.date,
                time: updatedObj.time,
                sort: updatedObj.sort,
                stat: 'GIVEN'
              });
            } else {
              this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                date: updatedObj.date,
                time: updatedObj.time,
                sort: updatedObj.sort,
                stat: 'STARTED'
              });
            }
          } else {
            this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
              date: updatedObj.date,
              time: updatedObj.time,
              sort: updatedObj.sort,
              stat: 'GIVEN'
            });
          }
        }
      } else {
        if (updatedObj.content.includes('InfusionCompleted')) {
          this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
            date: updatedObj.date,
            time: updatedObj.time,
            stat: 'COMPLETED'
          });
        } else {
          if (moment__WEBPACK_IMPORTED_MODULE_0___default()() > updatedObj.eventStart) {
            if (updatedObj.doctorsorder || updatedObj.titration) {
              if (updatedObj.content.includes('Administration_requires_doctors_confirmation_Late')) {
                let ptcTime = updatedObj.time.split('-');
                this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                  date: updatedObj.date,
                  time: ptcTime[0],
                  stat: 'PTC'
                });
              } else if (updatedObj.content.includes('Late_Administration')) {
                this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                  date: updatedObj.date,
                  time: updatedObj.time,
                  stat: 'MISSED'
                });
              }
            } else {
              if (this.prescriptionMapping[obj.prescription_id].infusiontype_id == "rate" && updatedObj.dose_id.includes("end_")) {
                let originalDoseStartTime = this.appService.Prescription.find(x => x.prescription_id == updatedObj.prescription_id).__posology.find(y => y.posology_id == updatedObj.posology_id).__dose.find(z => z.dose_id == updatedObj.dose_id.split("_")[2]).dosestartdatetime;
                let originalDoseEndTime = this.appService.Prescription.find(x => x.prescription_id == updatedObj.prescription_id).__posology.find(y => y.posology_id == updatedObj.posology_id).__dose.find(z => z.dose_id == updatedObj.dose_id.split("_")[2]).doseenddatatime;
                var a = moment__WEBPACK_IMPORTED_MODULE_0___default()(originalDoseEndTime); //now
                var b = moment__WEBPACK_IMPORTED_MODULE_0___default()(originalDoseStartTime);
                var convertToMinites = a.diff(b, 'minutes');
                let startDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(updatedObj.eventStart).subtract(convertToMinites, "minutes");
                let starsubstring = 'start_' + moment__WEBPACK_IMPORTED_MODULE_0___default()(startDate).format('YYYYMMDDHHmm') + "_" + updatedObj.dose_id.split("_")[2].toString();
                // let startevent=events.filter(x=>x.dose_id.includes(updatedObj.dose_id.split("_")[2]) && x.dose_id.includes(starsubstring))
                // if(startevent){
                //   startevent=this.appService.events.filter(x=>x.dose_id.includes(updatedObj.dose_id.split("_")[2]) && x.dose_id.includes(starsubstring))
                // }
                // let startevent=events.filter(x=>x.dose_id.includes(updatedObj.dose_id.split("_")[2]) && x.dose_id.includes(starsubstring))
                let startadministred = this.medicationAdministration.find(x => x.logicalid == starsubstring);
                if (startadministred) {
                  // if(startadministred.adminstrationstatus != 'given') {
                  //   this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, stat: startadministred.adminstrationstatus.toUpperCase() })
                  // }
                  // else {
                  this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                    date: updatedObj.date,
                    time: updatedObj.time,
                    stat: 'OVERDUE'
                  });
                  // }
                } else {
                  this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                    date: updatedObj.date,
                    time: updatedObj.time,
                    stat: 'MISSED'
                  });
                }
              } else {
                if (obj.prn) {
                  if (administration && administration.isenterinerror && this.marType == 'current') {
                    this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                      date: '',
                      time: '',
                      stat: ''
                    });
                  } else if (administration && administration.isenterinerror && this.marType != 'current') {
                    // this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: '', time: '', stat: '' })
                  }
                } else {
                  if (administration && !administration.isenterinerror) {
                    this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                      date: updatedObj.date,
                      time: updatedObj.time,
                      stat: 'MISSED'
                    });
                  } else {
                    this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                      date: updatedObj.date,
                      time: updatedObj.time,
                      stat: 'MISSED'
                    });
                  }
                }
              }
            }
          } else {
            if (updatedObj.doctorsorder || updatedObj.titration) {
              if (updatedObj.content.includes('Administration_requires_doctors_confirmation_Planned') || updatedObj.content.includes('Administration_requires_doctors_confirmation_Due')) {
                let ptcTime = updatedObj.time.split('-');
                this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                  date: updatedObj.date,
                  time: ptcTime[0],
                  stat: 'PTC'
                });
              }
            } else {
              this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({
                date: updatedObj.date,
                time: updatedObj.time,
                stat: 'PLANNED'
              });
            }
          }
        }
      }
      // if (updatedObj.content.includes("Administration_Completed") || updatedObj.given) {
      //   let administrationStatus = this.appService.Medicationadministration.find(x => x.logicalid == updatedObj.dose_id).adminstrationstatus;
      //   if(administrationStatus == 'self-administer')
      //     this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, stat: 'SELF ' + ' - ' + 'ADMINISTERED' });
      //   else
      //     this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, sort: updatedObj.sort, stat: 'GIVEN' });
      // } else if (updatedObj.content.includes("Administration_Defered")) {
      //   this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, stat: 'DEFERRED' });
      // } else if (updatedObj.content.includes("Planned_Administration")) {
      //   this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, stat: 'PLANNED' });
      // } else if (updatedObj.content.includes("Late_Administration")) {
      //   this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, stat: 'NOT GIVEN' });
      // } else {
      //   this.prescriptionMappingForTemplate[obj.prescription_id]['prescription_information'].push({ date: updatedObj.date, time: updatedObj.time, stat: 'PLANNED' })
      // }
    });
    for (let key in this.prescriptionMappingForTemplate) {
      this.prescriptionMappingForTemplate[key]['prescription_information'].sort(function (a, b) {
        const bDate = b.date?.split('-').reverse().join('-');
        const aDate = a.date?.split('-').reverse().join('-');
        return bDate.localeCompare(aDate) || b.time.localeCompare(a.time);
      });
      // if (this.prescriptionMappingForTemplate[key]['prescription_information'].length > 16) {
      //   const noOfArrays = Math.ceil(this.prescriptionMappingForTemplate[key]['prescription_information'].length / 16);
      //   for (let i = 0; i < noOfArrays; i++) {
      //     this.partTwoPrescriptions.push({
      //       ...this.prescriptionMappingForTemplate[key],
      //       'prescription_information': this.prescriptionMappingForTemplate[key]['prescription_information'].slice(i * 16, (i + 1) * 16), key
      //     });
      //   }
      // } else {
      this.partTwoPrescriptions.push({
        ...this.prescriptionMappingForTemplate[key],
        key
      });
      // }
    }
    // console.log(this.prescription);
    console.log('------', this.partTwoPrescriptions);
    // this.partTwoPrescriptions.sort((a, b) => (a.prescription_information.length > b.prescription_information.length) ? 1 : ((b.prescription_information.length > a.prescription_information.length ? -1 : 0)));
    this.partTwoPrescriptions.forEach(presTwo => {
      const requiredHistory = this.appService.prescriptionHistory.filter(presHistory => presHistory.prescription_id === presTwo.key);
      requiredHistory.sort((a, b) => b.lastmodifiedon.localeCompare(a.lastmodifiedon));
      // console.log('requiredHistory', requiredHistory);
      const suspendTimes = [];
      requiredHistory.forEach((reqHistory, index) => {
        let startDate, stopDate;
        if (reqHistory.history_status === 'suspended') {
          startDate = reqHistory.lastmodifiedon;
          if (requiredHistory[index + 1]) {
            stopDate = requiredHistory[index + 1].lastmodifiedon;
          }
          suspendTimes.push({
            startDate,
            stopDate
          });
        }
      });
      if (suspendTimes.length) {
        // console.log('length', suspendTimes);
      }
      presTwo['prescription_information'].forEach((dose, newIndex) => {
        let doseDate = dose.date?.split('-').reverse().join('-') + 'T' + dose.time?.split(' ')[0];
        let count = 0;
        let firstIndexChange = 0;
        let suspendTimeToShow;
        suspendTimes.forEach(sTime => {
          let check1 = moment__WEBPACK_IMPORTED_MODULE_0___default()(doseDate).isAfter(sTime.startDate);
          let check2 = moment__WEBPACK_IMPORTED_MODULE_0___default()(doseDate).isBefore(sTime.stopDate);
          if (check1 && check2) {
            count = 1;
            if (!firstIndexChange) {
              firstIndexChange = newIndex;
              suspendTimeToShow = sTime.startDate;
            }
          }
        });
        if (count) {
          const [date, time] = suspendTimeToShow?.split('T');
          if (newIndex > 0 && presTwo['prescription_information'][newIndex - 1] && presTwo['prescription_information'][newIndex - 1].stat !== 'SUSPENDED') {
            presTwo['prescription_information'][newIndex] = {
              date: date?.split('-').reverse().join('-'),
              time: time.slice(0, 5),
              stat: 'SUSPENDED'
            };
          } else {
            presTwo['prescription_information'][newIndex] = null;
          }
        }
      });
      if (requiredHistory.length && requiredHistory[requiredHistory.length - 1].history_status === 'stopped') {
        const [date, time] = requiredHistory[requiredHistory.length - 1].lastmodifiedon?.split('T');
        presTwo['prescription_information'].push({
          date: date?.split('-').reverse().join('-'),
          time: time.slice(0, 5),
          stat: 'STOPPED'
        });
      }
      presTwo['prescription_information'] = presTwo['prescription_information'].filter(pres => pres != null);
    });
    this.partTwoPrescriptions.forEach(data => {
      let pres = this.prescriptionMapping[data.key];
      let increaseInHeight = 0;
      let nameCharacters = 0;
      let commentChars = 0;
      // pres.__medications.forEach(meds => {
      //   nameCharacters += (meds.name ? meds.name.length : 0) + (meds.__ingredients.length ? meds.__ingredients[0].name.length : 0) + 2;
      // });
      // commentChars += pres.comments ? pres.comments.length : 0;
      // nameCharacters -= 100;
      // commentChars -= 100;
      // if (nameCharacters > 0) {
      //   increaseInHeight += Math.ceil(nameCharacters / 50) * 25;
      // }
      // if (commentChars > 0) {
      //   increaseInHeight += Math.ceil(commentChars / 50) * 25;
      // }
      this.partTwoHeights.push(240 + increaseInHeight + 'px');
    });
  }
  returnUpdatedHeight(data) {}
  checkMedicationAdministered(obj) {
    // console.log('hs pres', this.hs.prescriptionDictionary);
    const doseId = obj.dose_id?.split('_')[1];
    // const ma = this.appService.Medicationadministration.filter(ma => {
    //   let date = obj.eventStart.format('DD-MM-YYYY');
    //   let time = obj.eventStart.format('HH:mm');
    //   if (!ma.planneddatetime) {
    //     return false;
    //   }
    //   let [maDate, maTime] = ma.planneddatetime?.split('T');
    //   maDate = maDate?.split('-').reverse().join('-');
    //   maTime = maTime.slice(0, 5);
    //   return doseId === ma.dose_id && date === maDate;
    // });
    const ma = this.medicationAdministration.filter(ma => ma.logicalid == doseId);
    const newObj = {
      ...obj
    };
    let dose;
    if (ma.length) {
      // let dose;
      if (ma[0].administreddosesize) {
        dose = ma[0].administreddosesize + ' ' + ma[0].administreddoseunit;
      } else if (ma[0].administeredstrengthdenominator) {
        dose = ma[0].administeredstrengthdenominator + ' ' + ma[0].administeredstrengthdenominatorunits;
      }
      const [date, time] = ma[0].administrationstartime?.split('T');
      newObj.date = date?.split('-').reverse().join("-");
      newObj.time = time.slice(0, 5) + ' - ' + dose;
      newObj.sort = newObj.date + newObj.time;
      newObj.given = true;
    } else {
      newObj.date = obj.eventStart.format('DD-MM-YYYY');
      dose = this.getDose(obj);
      newObj.time = obj.eventStart.format('HH:mm') + (dose != undefined || dose != null || dose != ' ' ? ' - ' : '') + dose;
    }
    return newObj;
  }
  getDose(obj) {
    const posology = this.appService.Prescription.find(pres => pres.prescription_id == obj.prescription_id).__posology.find(poso => poso.posology_id == obj.posology_id);
    // const posology = this.appService.GetCurrentPosology(this.appService.Prescription.filter(pres => pres.prescription_id === obj.prescription_id)[0]);
    let dose;
    dose = posology.__dose.filter(dose => dose.dose_id === obj.dose_id?.split('_')[obj.dose_id.split('_').length - 1])[0];
    let admininsteredDose = this.medicationAdministration.find(x => x.logicalid == obj.dose_id);
    if (admininsteredDose) {
      if (obj.isinfusion) {
        if (admininsteredDose.administredinfusionrate != 0 && admininsteredDose.administredinfusionrate != null) {
          return admininsteredDose.administredinfusionrate + ' ' + (posology.infusiondoserateunits == undefined || posology.infusiondoserateunits == null ? 'ml/h' : posology.infusionrateunits);
        } else if (admininsteredDose.administeredstrengthneumerator) {
          return admininsteredDose.administeredstrengthneumerator + ' ' + admininsteredDose.administeredstrengthneumeratorunits + '/' + admininsteredDose.administeredstrengthdenominator + ' ' + admininsteredDose.administeredstrengthdenominatorunits;
        } else {
          return admininsteredDose.administreddosesize + ' ' + admininsteredDose.administreddoseunit + '/' + 'hr';
        }
      } else {
        if (admininsteredDose.administreddosesize) {
          return admininsteredDose.administreddosesize + ' ' + admininsteredDose.administreddoseunit;
        } else if (admininsteredDose.administeredstrengthneumerator) {
          return admininsteredDose.administeredstrengthneumerator + admininsteredDose.administeredstrengthneumeratorunits + '/' + admininsteredDose.administeredstrengthdenominator + admininsteredDose.administeredstrengthdenominatorunits;
        } else if (admininsteredDose.administereddescriptivedose) {
          return admininsteredDose.administereddescriptivedose;
        }
      }
    }
    if (!obj.isinfusion && dose) {
      let doseUnit;
      if (dose.doseunit === 'capsule') {
        doseUnit = 'caps';
      } else if (dose.doseunit === 'microgram') {
        doseUnit = 'mcg';
      } else if (dose.doseunit === 'suppository') {
        doseUnit = 'supp';
      } else {
        doseUnit = dose.doseunit;
      }
      if (dose.descriptivedose) {
        return dose.descriptivedose;
      } else if (posology.dosetype == 'strength') {
        return dose.strengthneumerator + ' ' + dose.strengthneumeratorunit + ' / ' + dose.strengthdenominator + ' ' + dose.strengthdenominatorunit;
      } else if (posology.titration) {
        let groupTitrationData = this.appService.DoseEvents.find(x => x.posology_id == obj.posology_id && x.grouptitration == true);
        let titrationData = this.appService.DoseEvents.filter(x => x.logicalid == obj.dose_id && x.eventtype == 'titration');
        if (titrationData.length > 0) {
          return titrationData[0].titrateddosesize + ' ' + titrationData[0].titrateddoseunit;
        }
        if (groupTitrationData) {
          return groupTitrationData.titrateddosesize + ' ' + groupTitrationData.titrateddoseunit;
        }
      } else {
        return dose.dosesize + ' ' + doseUnit;
      }
    } else if ((posology.infusiontypeid === 'ci' || posology.infusiontypeid === src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.InfusionType.pca) && posology) {
      let infusiondose = this.medicationAdministration.find(x => x.logicalid == obj.dose_id);
      if (infusiondose) {
        return infusiondose.administredinfusionrate !== null ? infusiondose.administredinfusionrate : infusiondose.administreddosesize !== null ? infusiondose.administreddosesize : '' + ' ' + posology.infusionrateunits;
      } else {
        return posology.infusionrate + ' ' + posology.infusionrateunits;
      }
    } else if (posology.infusiontypeid === 'bolus' && dose) {
      if (posology.dosetype == 'strength') {
        return dose.strengthneumerator + ' ' + dose.strengthneumeratorunit + ' / ' + dose.strengthdenominator + ' ' + dose.strengthdenominatorunit;
      } else {
        return dose.dosesize + ' ' + dose.doseunit + ' / ' + 'hr';
      }
    } else if (posology.infusiontypeid === 'rate' && dose) {
      return dose.infusionrate + ' ' + (posology.infusionrateunits == undefined || posology.infusionrateunits == null ? 'ml' : posology.infusionrateunits);
    } else {
      return ' ';
    }
  }
  ngOnDestroy() {}
  getStatus(value) {
    if (value === 'active') {
      return 'Active';
    } else if (value === 'suspended') {
      return 'Suspended';
    } else if (value === 'stopped' || value === 'cancelled') {
      return 'Stopped';
    } else {
      return 'Active';
    }
  }
  arrayForTemplate(pres, index) {
    if (pres) {
      let extraInfoRows = 0;
      // let nameCharacters = 0;
      // let commentChars = 0;
      // pres.__medications.forEach(meds => {
      //   nameCharacters += (meds.name ? meds.name.length : 0) + (meds.__ingredients.length ? meds.__ingredients[0].name.length : 0) + 2;
      // });
      // commentChars += pres.comments ? pres.comments.length : 0;
      // nameCharacters -= 110;
      // commentChars -= 110;
      // if (nameCharacters > 0) {
      //   extraInfoRows += Math.ceil(nameCharacters / 55);
      // }
      // if (commentChars > 0) {
      //   extraInfoRows += Math.ceil(commentChars / 55);
      // }
      // if (extraInfoRows > 10) {
      //   extraInfoRows = 10;
      // }
      let protocolCount;
      if (pres.infusiontype_id == "rate") {
        //the previous code here is move to oninit
        const rateRowsLength = this.rateEventsdata.filter(e => {
          return pres.prescription_id == e.prescription_id;
        });
        protocolCount = Math.floor(rateRowsLength.length / this.repeatArray.length);
      } else {
        protocolCount = this.hs.prescriptionDictionary[pres.prescription_id][0].frequency == 'protocol' ? this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount : this.hs.prescriptionDictionary[pres.prescription_id].length;
      }
      if (!protocolCount) {
        protocolCount = 6;
      }
      const templateArray = Array(protocolCount != undefined ? protocolCount : 1).fill(4);
      if (templateArray.length > 6) {
        const extraRows = 0;
        let extraTransferRows = this.checkTodayTransfer(pres);
        if (extraTransferRows < 0) {
          extraTransferRows = 0;
        }
        for (let k = 0; k < extraTransferRows; k++) {
          templateArray.push(4);
        }
        for (let k = 0; k < extraInfoRows; k++) {
          templateArray.push(4);
        }
        let count = 0;
        this.updateHeights.forEach(upHeight => {
          if (upHeight[0] === index) {
            count = 1;
          }
        });
        let finalRows = 0;
        if (extraTransferRows + extraRows + extraInfoRows >= 6) {
          finalRows = 22;
          for (let k = 0; k < 22 - extraTransferRows + extraRows + extraInfoRows; k++) {
            templateArray.push(4);
          }
        }
        if (!count) {
          this.updateHeights.push([index, finalRows ? finalRows : extraRows + extraTransferRows + extraInfoRows]);
        } else {
          this.updateHeights.push([index, extraInfoRows]);
        }
        return templateArray;
      } else {
        let finalRows = 0;
        let extraTransferRows = this.checkTodayTransfer(pres);
        if (protocolCount - extraTransferRows < 0) {
          for (let k = 0; k < extraTransferRows - protocolCount; k++) {
            templateArray.push(4);
          }
          if (extraTransferRows + extraInfoRows - protocolCount >= 6) {
            finalRows = 22;
            for (let k = 0; k < 22 - extraTransferRows + extraInfoRows - protocolCount; k++) {
              templateArray.push(4);
            }
          }
          this.updateHeights.push([index, finalRows ? finalRows : extraTransferRows + extraInfoRows - protocolCount]);
        } else {
          if (extraInfoRows >= 6) {
            finalRows = 22;
            // finalRows = 6;
          }
          this.updateHeights.push([index, finalRows ? finalRows : extraInfoRows]);
        }
        // if (!extraInfoRows) {
        let tempArray = [];
        for (let k = 0; k < protocolCount; k++) {
          tempArray.push(4);
        }
        return tempArray;
        // return this.repeatArray2;
        // } else {
        //   let newArr = []
        //   extraInfoRows = finalRows ? finalRows : extraInfoRows;
        //   for (let k = 0; k < 6; k++) {
        //     newArr.push(4);
        //   }
        //   return newArr;
        // }
      }
    } else {
      return this.repeatArray2;
    }
  }
  pdfDownloaded() {
    this.destroyTemplate.emit('true');
  }
  shortenUnitName(unit) {
    if (unit === 'microgram') {
      return 'mcg';
    } else if (unit === 'suppository') {
      return 'supp';
    } else {
      return unit;
    }
  }
  protocolGetDay() {
    for (let key in this.hs.prescriptionDictionary) {
      if (this.hs.prescriptionDictionary[key][0].frequency === 'protocol') {
        const protocolPres = this.prescriptionMapping[key];
        const daysPassedSinceStartingProtocol = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(protocolPres).prescriptionstartdate);
        const currentDate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
        const diffDays = currentDate.diff(daysPassedSinceStartingProtocol, 'days');
        this.getProtocolRemaining(diffDays, protocolPres);
      }
    }
  }
  getProtocolRemaining(diffDays, pres) {
    const protocolCount = this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount;
    let remainingDoses;
    let prespos = this.appService.GetCurrentPosology(pres);
    if (prespos.__dose[diffDays * protocolCount]) {
      remainingDoses = prespos.__dose.slice(diffDays * protocolCount);
      // this.adjustForFourDays(remainingDoses, protocolCount);
      if (prespos.repeatlastday && remainingDoses.length / protocolCount < 3) {
        const toAddPrescription = 3 - remainingDoses.length / protocolCount;
        const lastDayDose = prespos.__dose.slice(-1 * protocolCount);
        remainingDoses = this.addLastDay(remainingDoses, toAddPrescription, lastDayDose);
      } else if (prespos.repeatprotocoltimes && remainingDoses.length / protocolCount < 3) {
        remainingDoses = remainingDoses.concat(prespos.__dose.slice());
      }
    } else if (prespos.repeatlastday) {
      remainingDoses = prespos.__dose.slice(-1 * protocolCount);
      const toAddPrescription = 3 - remainingDoses.length / protocolCount;
      if (toAddPrescription > 0) {
        remainingDoses = this.addLastDay(remainingDoses, toAddPrescription, remainingDoses);
      }
    } else if (prespos.repeatprotocoltimes) {
      const x = diffDays % this.hs.prescriptionDictionary[pres.prescription_id][0].protocolDays;
      remainingDoses = prespos.__dose.slice(Math.floor(x * protocolCount));
      remainingDoses = remainingDoses.concat(prespos.__dose.slice());
    }
    this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"] = remainingDoses;
  }
  addLastDay(remainingDoses, toAddPrescription, lastDayDose) {
    for (let i = 0; i < toAddPrescription; i++) {
      remainingDoses = remainingDoses.concat(lastDayDose);
    }
    return remainingDoses;
  }
  returnTimeFromObject(date) {
    return date?.split('T')[1].slice(0, 5);
  }
  returnProtocolDose(i, j, pres, currDate = new Date()) {
    let month = currDate.getMonth() + 1;
    let addDay = currDate.getDate();
    if (addDay < 10) {
      addDay = '0' + addDay;
    }
    if (month < 10) {
      month = '0' + month;
    }
    const date = currDate.getFullYear() + '-' + month + '-' + addDay;
    const protocolCount = this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount - 1;
    if (protocolCount >= i) {
      let checkTransfer;
      if (this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"] && this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i]) {
        checkTransfer = this.checkTransfer(pres, this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dose_id, currDate, this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosestartdatetime?.split('T')[1].slice(0, 5));
      }
      let administeredEvents = [];
      if (this.hs.prescriptionDictionary[pres.prescription_id][i]) {
        administeredEvents = this.medicationAdministration.filter(ma => {
          return ma.dose_id === this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
        });
      }
      if (administeredEvents.length && administeredEvents[0].administrationstartime?.split('T')[0] === date) {
        if (administeredEvents[0].administreddosesize) {
          return administeredEvents[0].administreddosesize + ' ' + administeredEvents[0].administreddoseunit;
        } else if (administeredEvents[0].administredinfusionrate) {
          return administeredEvents[0].administredinfusionrate + ' ' + administeredEvents[0].administeredstrengthdenominatorunits;
        } else if (administeredEvents[0].administeredstrengthdenominator) {
          return administeredEvents[0].administeredstrengthdenominator + ' ' + administeredEvents[0].administeredstrengthdenominatorunits;
        }
        ;
      }
      if (checkTransfer) {
        if (this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosesize == null) {
          return '';
        }
        return this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosesize + ' ' + this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][i + j].doseunit;
      }
      return '';
    }
    return '';
  }
  createMultiArray(i) {
    const array = new Array(i);
    for (let j = 0; j < array.length; j++) {
      array[j] = new Array(i);
    }
    return array;
  }
  returnProtocolAdministartionStatus(pres, i, j, currDate) {
    let month = currDate.getMonth() + 1;
    let addDay = currDate.getDate();
    if (addDay < 10) {
      addDay = '0' + addDay;
    }
    if (month < 10) {
      month = '0' + month;
    }
    const date = currDate.getFullYear() + '-' + month + '-' + addDay;
    const protocolCount = this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount - 1;
    if (protocolCount >= i) {
      let checkTransfer;
      if (this.hs.prescriptionDictionary[pres.prescription_id] && this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"] && this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i]) {
        checkTransfer = this.checkTransfer(pres, this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dose_id, currDate, this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosestartdatetime?.split('T')[1].slice(0, 5));
      }
      let administeredEvents = [];
      if (this.hs.prescriptionDictionary[pres.prescription_id][i]) {
        administeredEvents = this.medicationAdministration.filter(ma => {
          return ma.dose_id === this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
        });
      }
      let administrationstatus;
      administeredEvents.forEach((administeredEvent, ind) => {
        if (administeredEvents[ind].administrationstartime.split('T')[0] === date) {
          administrationstatus = [administeredEvents[ind].adminstrationstatus];
        }
      });
      if (administrationstatus) {
        if (this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosesize == null) {
          return null;
        }
        return administrationstatus;
      }
      return '';
    }
    return '';
  }
  returnProtocolTime(pres, i, j, currDate) {
    let month = currDate.getMonth() + 1;
    if (month < 10) {
      month = '0' + month;
    }
    let addDay = currDate.getDate();
    if (addDay < 10) {
      addDay = '0' + addDay;
    }
    const date = currDate.getFullYear() + '-' + month + '-' + addDay;
    const protocolCount = this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount - 1;
    if (protocolCount >= i) {
      let checkTransfer;
      if (this.hs.prescriptionDictionary[pres.prescription_id] && this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"] && this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i]) {
        checkTransfer = this.checkTransfer(pres, this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dose_id, currDate, this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosestartdatetime?.split('T')[1].slice(0, 5));
      }
      let administeredEvents = [];
      if (this.hs.prescriptionDictionary[pres.prescription_id][i]) {
        administeredEvents = this.medicationAdministration.filter(ma => {
          return ma.dose_id === this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
        });
      }
      if (administeredEvents.length && administeredEvents[0].administrationstartime?.split('T')[0] === date) {
        return administeredEvents[0].administrationstartime?.split('T')[1].slice(0, 5);
      }
      if (checkTransfer === true) {
        return this.hs.prescriptionDictionary[pres.prescription_id][0]["remainingDoses"][(protocolCount + 1) * j + i].dosestartdatetime?.split('T')[1].slice(0, 5);
      } else if (checkTransfer) {
        // how to get dose?
        return checkTransfer.slice(0, 5);
      }
      return '';
    }
    return '';
  }
  checkTransfer(pres, doseId, currDate, currTime) {
    let month = currDate.getMonth() + 1;
    if (month < 10) {
      month = '0' + month;
    }
    let addDay = currDate.getDate();
    if (addDay < 10) {
      addDay = '0' + addDay;
    }
    const date = currDate.getFullYear() + '-' + month + '-' + addDay;
    const doseEvent = this.appService.DoseEvents.filter(doseEvent => {
      let [startDate, startTime] = doseEvent.startdatetime?.split('T');
      startTime = startTime.slice(0, 5);
      // if(pres.infusiontype_id == 'rate') {
      //   this.medicationAdministration.find(x => x.logicalid == doseEvent.logicalid)
      // }
      // else {
      return doseEvent.dose_id === doseId && startDate === date && startTime === currTime;
      // }
    });
    if (!doseEvent[0]) {
      return true;
    } else if (doseEvent[0].eventtype === 'Transfer') {
      const [doseDate, doseTime] = doseEvent[0].dosedatetime?.split('T');
      if (date === doseDate) {
        return doseTime;
      } else {
        return false;
      }
    } else if (doseEvent[0].eventtype === 'doconfirm') {
      const [doseDate, doseTime] = doseEvent[0].dosedatetime?.split('T');
      if (date === doseDate) {
        return doseTime;
      } else {
        return false;
      }
    } else if (doseEvent[0].eventtype === 'titration') {
      const [doseDate, doseTime] = doseEvent[0].titrateduntildatetime?.split('T');
      if (date === doseDate) {
        return doseTime;
      } else {
        return false;
      }
    } else if (doseEvent[0].eventtype === 'Undo') {
      const [doseDate, doseTime] = doseEvent[0].dosedatetime?.split('T');
      if (date === doseDate) {
        return doseTime;
      } else {
        return false;
      }
    } else if (doseEvent[0].eventtype === 'AdminTransfer' && pres.infusiontype_id == 'rate') {
      const [doseDate, doseTime] = doseEvent[0].startdatetime?.split('T');
      // if (date === doseDate) {
      //   return doseTime;
      // } else {
      //   return false;
      // }
      if (date === doseDate) {
        if (pres.infusiontype_id == 'rate') {
          // let originalDoseStartTime = this.appService.Prescription.find(x => x.prescription_id == pres.prescription_id).__posology.find(y => y.posology_id == this.appService.GetCurrentPosology(pres).posology_id).__dose.find(z => z.dose_id == doseEvent[0].dose_id).dosestartdatetime;
          // let originalDoseEndTime = this.appService.Prescription.find(x => x.prescription_id == pres.prescription_id).__posology.find(y => y.posology_id == this.appService.GetCurrentPosology(pres).posology_id).__dose.find(z => z.dose_id == doseEvent[0].dose_id).doseenddatatime;
          // var a = moment(originalDoseEndTime);//now
          // var b = moment(originalDoseStartTime);
          // var convertToMinites = a.diff(b, 'minutes');
          let splitLogicalId = doseEvent[0].logicalid.split('_');
          let date = moment__WEBPACK_IMPORTED_MODULE_0___default()();
          date.set({
            'year': splitLogicalId[1].substring(0, 4),
            'month': splitLogicalId[1].substring(4, 6) - 1,
            'date': splitLogicalId[1].substring(6, 8),
            'hour': splitLogicalId[1].substring(8, 10),
            'minute': splitLogicalId[1].substring(10, 12),
            'second': 0
          });
          // let startDate = moment(date).subtract(convertToMinites, "minutes");
          let starsubstring = 'end_' + moment__WEBPACK_IMPORTED_MODULE_0___default()(date).format('YYYYMMDDHHmm') + "_" + doseEvent[0].dose_id;
          // let starsubstring='start' + dateFilteredData[i].logicalId.substring(3,12);// append start to _20221228 only date to get start dose 
          // let startevent=dateFilteredData.filter(x=>x.logicalId.includes(dateFilteredData[i].logicalId.split("_")[2]) && x.logicalId.includes(starsubstring))
          // let startadministred = this.medicationAdministration.find(x => x.logicalid == starsubstring)
          // if(startadministred) {
          //   return false;
          // }
          // else {
          //   return doseTime;
          // }
          let checkDose = this.medicationAdministration.find(x => x.logicalid == doseEvent[0].logicalid);
          let checkDoseInfusionEvents = this.appService.InfusionEvents.find(x => x.logicalid == starsubstring);
          if (checkDose || checkDoseInfusionEvents && checkDoseInfusionEvents.eventtype != 'endinfusion') {
            return false;
          } else {
            return true;
          }
        } else {
          return doseTime;
        }
      } else {
        return false;
      }
    }
  }
  sortArray(arr, rows, cols) {
    for (let n = 0; n < rows; n++) {
      for (let m = 0; m < cols; m++) {
        let k = n;
        while ((arr[k][m] === undefined || arr[k][m] == '' || arr[k][m].time === undefined || arr[k][m].time == '') && k < rows) {
          k += 1;
        }
        if (k !== n) {
          arr[n][m] = {
            ...arr[k][m]
          };
          arr[k][m] = undefined;
        }
      }
    }
  }
  returnTimeDose(frequency, i, j, k, pres, currDate, type = 'time') {
    // console.log('frequency',frequency);
    if (!this.prescriptionProperFlow[pres.prescription_id]) {
      this.prescriptionProperFlow[pres.prescription_id] = this.createMultiArray(30);
      let rows = this.arrayForTemplate(pres, k).length;
      let cols = this.repeatArray.length;
      let count = 0;
      for (let n = 0; n < rows; n++) {
        for (let m = 0; m < cols; m++) {
          let time;
          let dose;
          let administered = false;
          let administrationstatus;
          let flag = false;
          let isPRN = this.appService.GetCurrentPosology(pres).prn;
          if (frequency === 'protocol' || frequency === 'variable') {
            time = this.returnProtocolTime(pres, n, m, this.dates[m]);
            dose = this.returnProtocolDose(n, m, pres, this.dates[m]);
            administrationstatus = this.returnProtocolAdministartionStatus(pres, n, m, this.dates[m]);
            flag = true;
          } else {
            time = this.returnXTime(n, pres, this.dates[m]);
            dose = this.returnXTime(n, pres, this.dates[m], 'dose');
            administrationstatus = this.returnXTime(n, pres, this.dates[m], 'administrationstatus');
            flag = true;
          }
          if (n >= this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount - 1 && frequency !== 'protocol' && !time) {
            let dataObj = this.returnTransferTime(n, pres, m);
            time = dataObj.time;
            dose = dataObj.dose;
            administrationstatus = dataObj.administrationstatus;
            flag = false;
          } else if (n >= this.hs.prescriptionDictionary[pres.prescription_id][0].protocolCount && frequency === 'protocol' && !time) {
            let dataObj = this.returnTransferTime(n, pres, m);
            time = dataObj.time;
            dose = dataObj.dose;
            administrationstatus = dataObj.administrationstatus;
            flag = false;
          }
          // if (!time) {
          //   let dataObj = this.returnTransferTime(n, pres, m);
          //   time = dataObj.time;
          //   dose = dataObj.dose;
          // }
          if (flag) {
            if (time instanceof Object) {
              dose = time[2];
              administrationstatus = time[1];
              time = time[0];
              administered = true;
            }
            if (administrationstatus instanceof Object) {
              administrationstatus = administrationstatus[0];
              administered = true;
            }
          }
          if (isPRN == true && administered == false) {
            time = '';
            dose = '';
          }
          this.prescriptionProperFlow[pres.prescription_id][n][m] = {
            time,
            dose,
            administered,
            isPRN,
            administrationstatus
          };
        }
        // this.sortRow(n,cols, pres);
      }
      if (!count) {
        this.presIds.push(pres.prescription_id);
      }
      // this.prescriptionProperFlow[pres.prescription_id].sort(function (a, b) {
      //   if (!a[0]) {
      //     return 1
      //   } else if(!b[0]) {
      //     return -1
      //   }
      //   if (a[0].time === b[0].time) {
      //     return 0;
      //   }
      //   else {
      //     return (a[0].time < b[0].time) ? -1 : 1;
      //   }
      // });
      this.sortArray(this.prescriptionProperFlow[pres.prescription_id], rows, cols);
    }
    if (type === 'time' && this.prescriptionProperFlow[pres.prescription_id][i] && this.prescriptionProperFlow[pres.prescription_id][i][j]) {
      return this.prescriptionProperFlow[pres.prescription_id][i][j].time;
    } else if (type === 'dose' && this.prescriptionProperFlow[pres.prescription_id][i] && this.prescriptionProperFlow[pres.prescription_id][i][j]) {
      return this.prescriptionProperFlow[pres.prescription_id][i][j].dose;
    } else if (this.prescriptionProperFlow[pres.prescription_id][i] && this.prescriptionProperFlow[pres.prescription_id][i][j]) {
      if (!this.prescriptionProperFlow[pres.prescription_id][i][j].administered) {
        const checkTime = moment__WEBPACK_IMPORTED_MODULE_0___default()().format("HH:mm");
        const checkTime2 = this.prescriptionProperFlow[pres.prescription_id][i][j].time;
        if (checkTime2 < checkTime && currDate === this.dates[0]) {
          // return 'N.A';
          if (this.prescriptionProperFlow[pres.prescription_id][i][j].administrationstatus == null) {
            return '';
          } else if (this.prescriptionProperFlow[pres.prescription_id][i][j].administrationstatus) {
            return this.prescriptionProperFlow[pres.prescription_id][i][j].administrationstatus;
          }
          if (pres.infusiontype_id == "rate") {
            let dateFilteredData = this.hs.prescriptionDictionary[pres.prescription_id].filter(x => x.date == moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD'));
            if (dateFilteredData.length > 0 && dateFilteredData[i] && dateFilteredData[i].logicalId != undefined && dateFilteredData[i].logicalId.includes('end')) {
              let originalDoseStartTime = this.appService.Prescription.find(x => x.prescription_id == pres.prescription_id).__posology.find(y => y.posology_id == this.appService.GetCurrentPosology(pres).posology_id).__dose.find(z => z.dose_id == dateFilteredData[i].doseId).dosestartdatetime;
              let originalDoseEndTime = this.appService.Prescription.find(x => x.prescription_id == pres.prescription_id).__posology.find(y => y.posology_id == this.appService.GetCurrentPosology(pres).posology_id).__dose.find(z => z.dose_id == dateFilteredData[i].doseId).doseenddatatime;
              var a = moment__WEBPACK_IMPORTED_MODULE_0___default()(originalDoseEndTime); //now
              var b = moment__WEBPACK_IMPORTED_MODULE_0___default()(originalDoseStartTime);
              var convertToMinites = a.diff(b, 'minutes');
              let splitLogicalId = dateFilteredData[i].logicalId.split('_');
              let date = moment__WEBPACK_IMPORTED_MODULE_0___default()();
              date.set({
                'year': splitLogicalId[1].substring(0, 4),
                'month': splitLogicalId[1].substring(4, 6) - 1,
                'date': splitLogicalId[1].substring(6, 8),
                'hour': splitLogicalId[1].substring(8, 10),
                'minute': splitLogicalId[1].substring(10, 12),
                'second': 0
              });
              let startDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(date).subtract(convertToMinites, "minutes");
              let starsubstring = 'start_' + moment__WEBPACK_IMPORTED_MODULE_0___default()(startDate).format('YYYYMMDDHHmm') + "_" + dateFilteredData[i].doseId;
              // let starsubstring='start' + dateFilteredData[i].logicalId.substring(3,12);// append start to _20221228 only date to get start dose 
              // let startevent=dateFilteredData.filter(x=>x.logicalId.includes(dateFilteredData[i].logicalId.split("_")[2]) && x.logicalId.includes(starsubstring))
              let startadministred = this.medicationAdministration.find(x => x.logicalid == starsubstring);
              if (startadministred) {
                if (dateFilteredData[i].content.includes('InfusionCompleteoverdue')) {
                  return 'overdue';
                }
                return 'completed';
              } else {
                return 'Missed';
              }
            } else {
              return 'Missed';
            }
          } else {
            if (this.hs.prescriptionDictionary[pres.prescription_id][i].doctorsorder || this.hs.prescriptionDictionary[pres.prescription_id][i].titration) {
              return this.prescriptionProperFlow[pres.prescription_id][i][j].administrationstatus;
            }
            return 'Missed';
          }
        }
      } else {
        // return 'A';
        if (pres.infusiontype_id == "rate" && this.prescriptionProperFlow[pres.prescription_id][i][j].administrationstatus == 'given') {
          return 'started';
        }
        return this.prescriptionProperFlow[pres.prescription_id][i][j].administrationstatus;
      }
    }
  }
  returnXTime(i, pres, currDate, type = 'time') {
    let checkDate;
    let month = currDate.getMonth() + 1;
    if (month < 10) {
      month = '0' + month;
    }
    let addDay = currDate.getDate();
    if (addDay < 10) {
      addDay = '0' + addDay;
    }
    const date = currDate.getFullYear() + '-' + month + '-' + addDay;
    let currentpos = this.appService.GetCurrentPosology(pres);
    checkDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate.getFullYear() + '-' + (currDate.getMonth() + 1) + '-' + currDate.getDate()).isBefore(this.appService.GetCurrentPosology(pres).prescriptionenddate);
    if (!currentpos.prescriptionenddate) {
      checkDate = true;
    }
    const daysOfWeek = JSON.parse(currentpos.daysofweek);
    if (daysOfWeek.length) {
      const daysNumber = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).day();
      if (!daysOfWeek.includes(this.daysOfWeek[daysNumber.toString()])) {
        checkDate = false;
      }
    }
    if (currentpos.dosingdaysfrequency == 'days' || currentpos.dosingdaysfrequency == 'weeks' || currentpos.dosingdaysfrequency == 'months') {
      let time = this.hs.prescriptionDictionary[pres.prescription_id][i].time.split(':');
      let finalLogicalID = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD') + time[0] + time[1] + "_" + this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
      if (pres.infusiontype_id == "rate") {
        finalLogicalID = this.hs.prescriptionDictionary[pres.prescription_id][i].logicalId;
      }
      let weekData = this.appService.reportData.filter(x => x.dose_id == finalLogicalID);
      if (weekData.length) {
        checkDate = true;
      } else {
        checkDate = false;
      }
    }
    if (pres.isinfusion && (pres.infusiontype_id === 'ci' || pres.infusiontype_id === src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.InfusionType.pca)) {
      if (this.hs.prescriptionDictionary[pres.prescription_id][i]) {
        checkDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate.getFullYear() + '-' + (currDate.getMonth() + 1) + '-' + currDate.getDate()).isSame(this.hs.prescriptionDictionary[pres.prescription_id][i].ciDate);
      } else {
        checkDate = false;
      }
    }
    let checkTransfer;
    let administeredEvents = [];
    if (this.hs.prescriptionDictionary[pres.prescription_id][i]) {
      administeredEvents = this.medicationAdministration.filter(ma => {
        const logicalDateArrray = ma.logicalid?.split('_');
        let logicalDate;
        if (logicalDateArrray.length == 2) {
          logicalDate = logicalDateArrray[0];
        } else if (logicalDateArrray.length == 3) {
          logicalDate = logicalDateArrray[1];
        }
        const originalDate = logicalDate.slice(0, 4) + '-' + logicalDate.slice(4, 6) + '-' + logicalDate.slice(6, 8);
        if (!ma.planneddatetime) {
          return false;
        }
        if (currentpos.infusiontypeid === "ci") {
          return ma.prescription_id == pres.prescription_id;
        } else if (currentpos.prn) {
          return ma.prescription_id == pres.prescription_id && ma.planneddatetime.split('T')[0] == date && ma.checked == false;
        } else {
          return ma.dose_id === this.hs.prescriptionDictionary[pres.prescription_id][i].doseId && ma.planneddatetime.split('T')[0] == originalDate;
        }
      });
    }
    let time;
    let dose;
    let administrationstatus;
    if (currentpos.infusiontypeid === "ci" && administeredEvents.length > 0) {
      if (administeredEvents.length > 0) {
        if (currentpos.prescription_id == administeredEvents[0].prescription_id) {
          if (!administeredEvents[0].checked && administeredEvents[0].administrationstartime.split('T')[0] === date) {
            if (type === 'time') {
              time = administeredEvents[0].administrationstartime.split('T')[1].slice(0, 5);
              administrationstatus = administeredEvents[0].adminstrationstatus;
              dose = administeredEvents[0].administredinfusionrate + ' ' + currentpos.infusionrateunits;
            }
          }
        }
      }
    } else if (currentpos.prn && administeredEvents.length > 0) {
      administeredEvents.reverse();
      if (administeredEvents.length > 0) {
        if (administeredEvents[0].administrationstartime.split('T')[0] === date) {
          if (type === 'time' && !administeredEvents[0].isenterinerror) {
            time = administeredEvents[0].administrationstartime.split('T')[1].slice(0, 5);
            administrationstatus = administeredEvents[0].adminstrationstatus;
            dose = administeredEvents[0].administreddosesize + ' ' + administeredEvents[0].administreddoseunit;
            // this.medicationAdministration = this.medicationAdministration.filter(x=> x.prescription_id == administeredEvents[0].prescription_id && x.administrationstartime != administeredEvents[0].administrationstartime);
          }
          if (type === 'time') {
            this.medicationAdministration.forEach((element, index) => {
              if (element.prescription_id == administeredEvents[0].prescription_id && element.administrationstartime == administeredEvents[0].administrationstartime) {
                this.medicationAdministration[index].checked = true;
              }
            });
          }
        } else {
          if (type === 'time') {
            this.medicationAdministration.forEach((element, index) => {
              if (element.prescription_id == administeredEvents[0].prescription_id && element.administrationstartime == administeredEvents[0].administrationstartime) {
                this.medicationAdministration[index].checked = true;
              }
            });
          }
        }
      }
    } else {
      administeredEvents.forEach((administeredEvent, ind) => {
        if (currentpos.prescription_id == administeredEvents[ind].prescription_id) {
          if (!administeredEvents[ind].checked && administeredEvents[ind].administrationstartime.split('T')[0] === date) {
            if (type === 'time') {
              time = [administeredEvents[ind].administrationstartime.split('T')[1].slice(0, 5)];
              administrationstatus = [administeredEvents[ind].adminstrationstatus];
              if (administeredEvents[ind].administreddosesize) {
                if (currentpos.infusiontypeid == "rate") {
                  dose = [administeredEvents[ind].administredinfusionrate + ' ' + currentpos.infusionrateunits];
                } else {
                  dose = [administeredEvents[ind].administreddosesize + ' ' + administeredEvents[ind].administreddoseunit];
                }
              } else if (currentpos.doctorsorder && currentpos.dosetype == 'strength') {
                dose = [administeredEvents[ind].administeredstrengthdenominator + ' ' + administeredEvents[ind].administeredstrengthdenominatorunits];
              } else if (administeredEvents[ind].administredinfusionrate != "0") {
                dose = [(administeredEvents[ind].administredinfusionrate != null ? administeredEvents[ind].administredinfusionrate : '') + ' ' + (administeredEvents[ind].administeredstrengthdenominatorunits != null ? administeredEvents[ind].administeredstrengthdenominatorunits : '')];
              } else if (administeredEvents[ind].administeredstrengthdenominator) {
                dose = [administeredEvents[ind].administeredstrengthdenominator + ' ' + administeredEvents[ind].administeredstrengthdenominatorunits];
              }
              ;
            } else if (type === 'dose') {
              if (administeredEvents[0].administreddosesize) {
                if (currentpos.infusiontypeid == "rate") {
                  dose = [administeredEvents[0].administredinfusionrate + ' ' + currentpos.infusionrateunits];
                } else {
                  dose = administeredEvents[0].administreddosesize + ' ' + administeredEvents[0].administreddoseunit;
                }
              } else if (currentpos.doctorsorder && currentpos.dosetype == 'strength') {
                dose = administeredEvents[0].administeredstrengthdenominator + ' ' + administeredEvents[0].administeredstrengthdenominatorunits;
              } else if (administeredEvents[0].administredinfusionrate != "0") {
                dose = (administeredEvents[0].administredinfusionrate != null ? administeredEvents[0].administredinfusionrate : '') + ' ' + (administeredEvents[0].administeredstrengthdenominatorunits != null ? administeredEvents[0].administeredstrengthdenominatorunits : '');
              } else if (administeredEvents[0].administeredstrengthdenominator) {
                dose = administeredEvents[0].administeredstrengthdenominator + ' ' + administeredEvents[0].administeredstrengthdenominatorunits;
              }
              ;
              administeredEvents[ind].checked = true;
            } else {
              administrationstatus = administeredEvents[ind].adminstrationstatus;
            }
          } else if (administeredEvents.length && administeredEvents[0].administrationstartime?.split('T')[0] !== date && administeredEvents[0].planneddatetime?.split('T')[0] === date) {
            time = 'changed';
          }
        }
      });
    }
    if (time === 'changed') {
      return '';
    } else if (time && type === 'time') {
      // return time
      return [time, administrationstatus, dose];
    } else if (time && type === 'dose') {
      return dose;
    } else if (time && type === 'administrationstatus') {
      return administrationstatus;
    } else {
      if (this.hs.prescriptionDictionary[pres.prescription_id][i]) {
        checkTransfer = this.checkTransfer(pres, this.hs.prescriptionDictionary[pres.prescription_id][i].doseId, currDate, this.hs.prescriptionDictionary[pres.prescription_id][i].time);
      }
      const doseCheck = this.checkShowDose(pres, date);
      if (!doseCheck) {
        return '';
      }
      if (checkTransfer === true && checkDate) {
        let status = this.medicationAdministration.filter(x => x.logicalid == this.hs.prescriptionDictionary[pres.prescription_id][i].logicalId);
        if (pres.infusiontype_id === 'bolus') {
          if (type === 'time') {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].time;
          } else if (type === 'dose') {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].bolusDose;
          }
          return status.length > 0 ? status[0].adminstrationstatus : '';
        } else if (pres.infusiontype_id === 'rate' && !checkTransfer) {
          if (type === 'time') {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].time;
          } else if (type === 'dose') {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].rateDose;
          }
          return status.length > 0 ? status[0].adminstrationstatus : '';
        } else if (pres.infusiontype_id === 'ci' || pres.infusiontype_id === src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.InfusionType.pca) {
          if (type === 'time') {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].time;
          } else if (type === 'dose') {
            return status.length > 0 ? status[0].administredinfusionrate + ' ' + pres.__posology[i].infusionrateunits : this.hs.prescriptionDictionary[pres.prescription_id][i].ciDose;
          }
          return status.length > 0 ? status[0].adminstrationstatus : '';
        }
        if (this.hs.prescriptionDictionary[pres.prescription_id][i].dose) {
          if (type === 'time') {
            if (pres.infusiontype_id == "rate") {
              let dateFilteredData = this.hs.prescriptionDictionary[pres.prescription_id].filter(x => x.date == moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD'));
              if (dateFilteredData.length > 0 && dateFilteredData[i] != undefined) {
                return dateFilteredData[i].time;
              }
            } else {
              return this.hs.prescriptionDictionary[pres.prescription_id][i].time;
            }
          } else if (type === 'dose') {
            if (pres.infusiontype_id == "rate") {
              let dateFilteredData = this.hs.prescriptionDictionary[pres.prescription_id].filter(x => x.date == moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD'));
              if (dateFilteredData.length > 0 && dateFilteredData[i] != undefined) {
                if (dateFilteredData[i].logicalId.includes('end')) {
                  return '';
                } else {
                  return dateFilteredData[i].dose;
                }
              }
            } else {
              if (this.hs.prescriptionDictionary[pres.prescription_id][i].doctorsorder || this.hs.prescriptionDictionary[pres.prescription_id][i].titration) {
                let changeDateFormat = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD');
                let changeTimeFormat = this.hs.prescriptionDictionary[pres.prescription_id][i].time.split(':');
                let finalTitrationLogicalID = changeDateFormat + changeTimeFormat[0] + changeTimeFormat[1] + "_" + this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
                let doctorConfirmData = this.appService.DoseEvents.filter(x => x.logicalid == this.hs.prescriptionDictionary[pres.prescription_id][i].logicalId && x.eventtype == 'doconfirm');
                let titrationData = this.appService.DoseEvents.filter(x => x.logicalid == finalTitrationLogicalID && x.eventtype == 'titration');
                if (doctorConfirmData.length > 0 || titrationData.length > 0) {
                  return 'PTC';
                } else {
                  if (doctorConfirmData.length > 0 || titrationData.length > 0) {
                    if (titrationData[0].eventtype == 'titration') {
                      return titrationData[0].titrateddosesize + ' ' + titrationData[0].titrateddoseunit;
                    } else {
                      return this.hs.prescriptionDictionary[pres.prescription_id][i].dose + ' ' + this.shortenUnitName(this.hs.prescriptionDictionary[pres.prescription_id][i].doseunit);
                    }
                  } else {
                    let groupTitrationData = this.appService.DoseEvents.find(x => x.posology_id == this.hs.prescriptionDictionary[pres.prescription_id][i].posologyId && x.grouptitration == true);
                    if (groupTitrationData) {
                      let date = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYY-MM-DD') + ' ' + this.hs.prescriptionDictionary[pres.prescription_id][i].time;
                      // let currentTime = moment().format('HH:mm');
                      if (moment__WEBPACK_IMPORTED_MODULE_0___default()(date).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_0___default()(groupTitrationData.titrateduntildatetime))) {
                        return groupTitrationData.titrateddosesize + ' ' + groupTitrationData.titrateddoseunit;
                      }
                    }
                    return 'PTC';
                  }
                }
              } else {
                return this.hs.prescriptionDictionary[pres.prescription_id][i].dose + ' ' + this.shortenUnitName(this.hs.prescriptionDictionary[pres.prescription_id][i].doseunit);
              }
            }
          } else if (type === 'administrationstatus') {
            if (pres.infusiontype_id == "rate") {
              let dateFilteredData = this.hs.prescriptionDictionary[pres.prescription_id].filter(x => x.date == moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD'));
              if (dateFilteredData.length > 0 && dateFilteredData[i] != undefined) {
                if (dateFilteredData[i].content.includes('InfusionCompleteddone')) {
                  return 'completed';
                } else {
                  return dateFilteredData[i].administrationStatus;
                }
              }
            } else {
              if (pres.__posology[0].doctorsorder == false && pres.__posology[0].titration == false) {
                return status.length > 0 ? status[0].adminstrationstatus : '';
              } else {
                if (this.hs.prescriptionDictionary[pres.prescription_id][i].doctorsorder || this.hs.prescriptionDictionary[pres.prescription_id][i].titration) {
                  let currentDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().format('YYYY-MM-DD');
                  let currentTime = moment__WEBPACK_IMPORTED_MODULE_0___default()().format('HH:mm');
                  let finalCurrentDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYY-MM-DD') + ' ' + currentTime;
                  let finalTitrationDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.hs.prescriptionDictionary[pres.prescription_id][i].ciDate).format('YYYY-MM-DD') + ' ' + this.hs.prescriptionDictionary[pres.prescription_id][i].time;
                  if (moment__WEBPACK_IMPORTED_MODULE_0___default()(finalTitrationDate).isSameOrBefore(finalCurrentDate)) {
                    let groupTitrationData = this.appService.DoseEvents.find(x => x.posology_id == this.hs.prescriptionDictionary[pres.prescription_id][i].posologyId && x.grouptitration == true);
                    let changeDateFormat = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD');
                    let changeTimeFormat = this.hs.prescriptionDictionary[pres.prescription_id][i].time.split(':');
                    let finalTitrationLogicalID = changeDateFormat + changeTimeFormat[0] + changeTimeFormat[1] + "_" + this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
                    let doctorConfirmData = this.appService.DoseEvents.filter(x => x.logicalid == this.hs.prescriptionDictionary[pres.prescription_id][i].logicalId && x.eventtype == 'doconfirm');
                    let titrationData = this.appService.DoseEvents.filter(x => x.logicalid == finalTitrationLogicalID && x.eventtype == 'titration');
                    if (titrationData.length > 0 || doctorConfirmData.length > 0) {
                      return 'Missed';
                    }
                    if (groupTitrationData) {
                      return 'Missed';
                    }
                  }
                  // else {
                  //   return 'false'
                  // }
                }
              }
            }
          }
        } else if (this.hs.prescriptionDictionary[pres.prescription_id][i].descriptiveDose) {
          if (type === 'time') {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].time;
          } else if (type === 'dose') {
            return '';
            // return this.hs.prescriptionDictionary[pres.prescription_id][i].dose + ' ' + this.shortenUnitName(this.hs.prescriptionDictionary[pres.prescription_id][i].doseunit);
          }
          return status.length > 0 ? status[0].adminstrationstatus : '';
        }
      } else if (checkTransfer && checkDate) {
        // how to get dose?
        if (type === 'time') {
          return checkTransfer.slice(0, 5);
        } else if (type === 'dose') {
          if (this.hs.prescriptionDictionary[pres.prescription_id][i].bolusDose && !this.hs.prescriptionDictionary[pres.prescription_id][i].bolusDose.includes('null')) {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].bolusDose;
          } else if (this.hs.prescriptionDictionary[pres.prescription_id][i].rateDose && !this.hs.prescriptionDictionary[pres.prescription_id][i].rateDose.includes('null')) {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].rateDose;
          } else if (this.hs.prescriptionDictionary[pres.prescription_id][i].ciDose && !this.hs.prescriptionDictionary[pres.prescription_id][i].ciDose.includes('null')) {
            return this.hs.prescriptionDictionary[pres.prescription_id][i].ciDose;
          } else {
            if (this.hs.prescriptionDictionary[pres.prescription_id][i].titration) {
              let groupTitrationData = this.appService.DoseEvents.find(x => x.posology_id == this.hs.prescriptionDictionary[pres.prescription_id][i].posologyId && x.grouptitration == true);
              let changeDateFormat = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYYMMDD');
              let changeTimeFormat = this.hs.prescriptionDictionary[pres.prescription_id][i].time.split(':');
              let finalTitrationLogicalID = changeDateFormat + changeTimeFormat[0] + changeTimeFormat[1] + "_" + this.hs.prescriptionDictionary[pres.prescription_id][i].doseId;
              let titrationData = this.appService.DoseEvents.filter(x => x.logicalid == finalTitrationLogicalID && x.eventtype == 'titration');
              if (titrationData.length > 0) {
                return titrationData[0].titrateddosesize + ' ' + titrationData[0].titrateddoseunit;
              }
              if (groupTitrationData) {
                let date = moment__WEBPACK_IMPORTED_MODULE_0___default()(currDate).format('YYYY-MM-DD') + ' ' + this.hs.prescriptionDictionary[pres.prescription_id][i].time;
                if (moment__WEBPACK_IMPORTED_MODULE_0___default()(date).isSameOrBefore(groupTitrationData.titrateduntildatetime)) {
                  return groupTitrationData.titrateddosesize + ' ' + groupTitrationData.titrateddoseunit;
                }
              }
            } else {
              return this.hs.prescriptionDictionary[pres.prescription_id][i].dose + ' ' + this.shortenUnitName(this.hs.prescriptionDictionary[pres.prescription_id][i].doseunit);
            }
          }
        } else {
          if (this.hs.prescriptionDictionary[pres.prescription_id][i].doctorsorder || this.hs.prescriptionDictionary[pres.prescription_id][i].titration) {
            let currentDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().format('YYYY-MM-DD');
            let currentTime = moment__WEBPACK_IMPORTED_MODULE_0___default()().format('HH:mm');
            // let [startDate, startTime] = todayDate?.split('T');
            // startTime = startTime.slice(0, 5);
            if (currentDate > this.hs.prescriptionDictionary[pres.prescription_id][i].ciDate || currentTime > this.hs.prescriptionDictionary[pres.prescription_id][i].time) {
              return 'Missed';
            }
            // else {
            //   return 'false'
            // }
          } else {
            let status = this.medicationAdministration.filter(x => x.logicalid == this.hs.prescriptionDictionary[pres.prescription_id][i].logicalId);
            return status.length > 0 ? status[0].adminstrationstatus : '';
          }
        }
      }
    }
  }
  checkShowDose(pres, date) {
    if (moment__WEBPACK_IMPORTED_MODULE_0___default()(this.appService.GetCurrentPosology(pres).prescriptionstartdate?.split('T')[0]).isAfter(date)) {
      return false;
    }
    // else if (this.appService.GetCurrentPosology(pres).dosingdaysfrequency == 'days' || this.appService.GetCurrentPosology(pres).dosingdaysfrequency == 'weeks' || this.appService.GetCurrentPosology(pres).dosingdaysfrequency == 'months') {
    //   if(!moment(this.appService.GetCurrentPosology(pres).prescriptionstartdate?.split('T')[0]).isSame(date)) {
    //     return false;
    //   }
    //   else {
    //     return true;
    //   }
    // }
    // else {
    return true;
    // }
  }
  checkTodayTransfer(pres) {
    const doseEvents = this.appService.DoseEvents.filter(doseEvent => {
      return doseEvent.posology_id === this.appService.GetCurrentPosology(pres).posology_id;
    });
    // check how many are different dates
    const rowsAddition = {};
    doseEvents.forEach(doseEvent => {
      if (!doseEvent.dosedatetime) {
        return;
      }
      if (doseEvent.dosedatetime?.split('T')[0] !== doseEvent.startdatetime?.split('T')[0]) {
        const date = doseEvent.dosedatetime?.split('T')[0];
        if (!rowsAddition[date]) {
          rowsAddition[date] = 1;
        } else {
          rowsAddition[date] += 1;
        }
      }
    });
    let maxRows = -1;
    for (let row in rowsAddition) {
      if (rowsAddition[row] > maxRows) {
        maxRows = rowsAddition[row];
      }
    }
    return maxRows;
  }
  returnTransferTime(i, pres, j) {
    let time;
    let dose;
    let month = this.dates[j].getMonth() + 1;
    if (month < 10) {
      month = '0' + month;
    }
    let prespos = this.appService.GetCurrentPosology(pres);
    const date = this.dates[j].getFullYear() + '-' + month + '-' + this.dates[j].getDate();
    if (!this.transferDoses[pres.prescription_id]) {
      this.transferDoses[pres.prescription_id] = {};
    }
    if (!this.transferDoses[pres.prescription_id][date]) {
      this.transferDoses[pres.prescription_id][date] = {
        count: 0,
        events: [],
        added: false,
        maEvents: [],
        maCount: 0
      };
    }
    if (!this.transferDoses[pres.prescription_id][date].added) {
      const doseEvents = this.appService.DoseEvents.filter(doseEvent => {
        if (!doseEvent.dosedatetime) {
          return false;
        }
        return doseEvent.posology_id === prespos.posology_id && doseEvent.dosedatetime?.split('T')[0] === date;
      });
      const MAevents = this.medicationAdministration.filter(ma => {
        return ma.posology_id === prespos.posology_id;
      });
      // if (doseEvents.length) {
      //   doseEvents.sort((a, b) => a._sequenceid - b._sequenceid);
      // }
      if (doseEvents.length) {
        doseEvents.sort((a, b) => {
          return a.startdatetime.localeCompare(b.startdatetime);
        });
      }
      this.transferDoses[pres.prescription_id][date].events = doseEvents;
      this.transferDoses[pres.prescription_id][date].maEvents = MAevents;
      this.transferDoses[pres.prescription_id][date].added = true;
      this.transferDoses[pres.prescription_id][date].events.forEach(ev => {
        const doseDate = ev.dosedatetime?.split('T')[0];
        const startDate = ev.startdatetime?.split('T')[0];
        if (doseDate === startDate) {
          this.transferDoses[pres.prescription_id][date].count += 1;
        }
      });
    }
    if (this.transferDoses[pres.prescription_id][date].events[Math.floor(this.transferDoses[pres.prescription_id][date].count)]) {
      time = this.transferDoses[pres.prescription_id][date].events[Math.floor(this.transferDoses[pres.prescription_id][date].count)].dosedatetime?.split('T')[1].slice(0, 5);
      let doseId = this.transferDoses[pres.prescription_id][date].events[Math.floor(this.transferDoses[pres.prescription_id][date].count)].dose_id;
      let doseToSend = prespos.__dose.filter(dose => {
        return dose.dose_id === doseId;
      });
      const type = pres.infusiontype_id;
      if (type === 'rate') {
        dose = dose.infusionrate + ' ' + dose.strengthdenominatorunit + 'hrs ' + ' / ' + dose.infusionduration + ' ' + 'hrs';
      } else if (type === 'bolus') {
        dose = dose.strengthdenominator + ' ' + dose.strengthdenominatorunit;
      } else if (type === 'ci' || type == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.InfusionType.pca) {
        dose = prespos.__dose[0].infusionrate + ' ' + prespos.__dose[0].strengthdenominatorunit;
      } else if (doseToSend.length) {
        dose = doseToSend[0].dosesize + ' ' + doseToSend[0].doseunit;
      }
      const filterEvents = this.transferDoses[pres.prescription_id][date].maEvents.filter(ma => {
        const logicalDate = ma.logicalid?.split('_')[0].slice(0, 8);
        const originalDate = logicalDate.slice(0, 4) + '-' + logicalDate.slice(4, 6) + '-' + logicalDate.slice(6, 8);
        if (!ma.planneddatetime) {
          return false;
        }
        return ma.dose_id === doseId && ma.planneddatetime?.split('T')[0] !== originalDate;
      });
      if (filterEvents.length) {
        filterEvents.forEach((filterEvent, ind) => {
          if (filterEvents[ind].administrationstartime?.split('T')[0] === date && !filterEvents[ind].checked) {
            time = [filterEvents[ind].administrationstartime?.split('T')[1].slice(0, 5)];
            if (filterEvents[ind].administreddosesize) {
              dose = filterEvents[ind].administreddosesize + ' ' + filterEvents[ind].administreddoseunit;
            } else if (filterEvents[ind].administredinfusionrate) {
              dose = filterEvents[ind].administredinfusionrate + ' ' + filterEvents[ind].administeredstrengthdenominatorunits;
            } else if (filterEvents[ind].administeredstrengthdenominator) {
              dose = filterEvents[ind].administeredstrengthdenominator + ' ' + filterEvents[ind].administeredstrengthdenominatorunits;
            }
            ;
          } else {
            time = '';
            dose = '';
          }
        });
      }
      this.transferDoses[pres.prescription_id][date].count += 1;
    }
    let administrationstatus;
    if (this.transferDoses[pres.prescription_id][date].maEvents.length && (!time || !dose)) {
      const filterEvents = this.transferDoses[pres.prescription_id][date].maEvents.filter(ma => {
        administrationstatus = ma.adminstrationstatus;
        const logicalDate = ma.logicalid?.split('_')[0].slice(0, 8);
        const originalDate = logicalDate.slice(0, 4) + '-' + logicalDate.slice(4, 6) + '-' + logicalDate.slice(6, 8);
        if (!ma.planneddatetime) {
          return false;
        }
        return ma.planneddatetime?.split('T')[0] !== originalDate && ma.planneddatetime?.split('T')[0] === date;
      });
      if (filterEvents[this.transferDoses[pres.prescription_id][date].maCount]) {
        let macount = this.transferDoses[pres.prescription_id][date].maCount;
        time = [filterEvents[macount].administrationstartime?.split('T')[1].slice(0, 5)];
        if (filterEvents[macount].administreddosesize) {
          dose = filterEvents[macount].administreddosesize + ' ' + filterEvents[macount].administreddoseunit;
        } else if (filterEvents[macount].administredinfusionrate) {
          dose = filterEvents[macount].administredinfusionrate + ' ' + pres.__posology[0].infusionrateunits;
        } else if (filterEvents[macount].administeredstrengthdenominator) {
          dose = filterEvents[macount].administeredstrengthdenominator + ' ' + filterEvents[macount].administeredstrengthdenominatorunits;
        }
        ;
        this.transferDoses[pres.prescription_id][date].maCount += 1;
      }
    }
    if (!dose) {
      time = '';
    }
    return {
      time,
      dose,
      administrationstatus
    };
  }
  getMargin() {
    return this.marType === 'empty' ? '10px 10px 50px 10px' : '10px 10px 20px 10px';
  }
  setHeightWidthForEmptyTemplate() {
    return this.marType === 'empty' ? {
      height: '300px',
      margin: '10px 10px 200px 10px',
      width: '70px'
    } : '';
  }
  static #_ = this.ɵfac = function DemoAdmissionRecordComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || DemoAdmissionRecordComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_drug_chart_timer_helper__WEBPACK_IMPORTED_MODULE_2__.TimeerHelper), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_3__.AppService), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_helper_service__WEBPACK_IMPORTED_MODULE_4__.HelperService), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_datarequest__WEBPACK_IMPORTED_MODULE_5__.DataRequest), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_apirequest_service__WEBPACK_IMPORTED_MODULE_6__.ApirequestService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineComponent"]({
    type: DemoAdmissionRecordComponent,
    selectors: [["app-demo-admission-record"]],
    viewQuery: function DemoAdmissionRecordComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c1, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c2, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c3, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c5, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c6, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c7, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c8, 5);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.headerDiv = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.parentNode = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.divs = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.divs2 = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.presDescriptionDivs = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.pageHeaders = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.pageFooter = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.pageFooter2 = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.headerSecondPart = _t);
      }
    },
    inputs: {
      marType: "marType",
      sdate: "sdate",
      edate: "edate",
      emptyTemplates: "emptyTemplates",
      activeRecordedDays: "activeRecordedDays"
    },
    outputs: {
      destroyTemplate: "destroyTemplate"
    },
    decls: 9,
    vars: 7,
    consts: [["descriptionTemplate", ""], ["recordChart", ""], ["activeHeader", ""], ["activeSecondPart", ""], ["activeHeaderHeight", ""], [3, "destroyComponent", "customTemplate", "view", "title", "dimensions", "saveTitle", "printType"], [2, "width", "100%", "margin-left", "10px"], [2, "height", "50px", "font-size", "10px"], ["rowspan", "2", 2, "width", "40px", "word-break", "break-word"], [4, "ngIf"], ["colspan", "2", 2, "width", "50px"], [2, "width", "35px"], [2, "font-size", "10px"], [2, "width", "30px"], [2, "width", "20px"], [4, "ngTemplateOutlet"], ["style", "margin-left: 200px;margin-top: 50px;", 4, "ngIf"], ["style", "margin-left: 200px;margin-top: 38px;", 4, "ngIf"], [2, "margin-left", "200px", "margin-top", "50px"], [2, "margin-left", "200px", "margin-top", "38px"], [4, "ngFor", "ngForOf"], ["data-pdfmake", "{'headerRows':3}", 3, "ngStyle"], ["colspan", "2", 2, "width", "55px", "text-align", "center"], ["colspan", "12"], ["style", "font-size: 9px; word-break: break-all;", "componenttype", "timeline", 3, "prescription", "fromPrinting", 4, "ngIf"], ["componenttype", "timeline", 2, "font-size", "9px", "word-break", "break-all", 3, "prescription", "fromPrinting"], [2, "font-size", "10px", "height", "100px"], [2, "font-size", "8px", 3, "ngStyle"], ["colspan", "2", 2, "text-align", "center"], [2, "text-align", "center"], ["style", "font-size: 9px;", 4, "ngFor", "ngForOf"], [2, "font-size", "9px"], ["style", "height: 20px; width:50px;", 4, "ngIf"], [2, "height", "20px", "width", "50px"], [2, "font-size", "8px"], ["style", "font-size: 12px;", 4, "ngFor", "ngForOf"], [2, "height", "20px", "width", "35px"], [2, "font-size", "12px"], ["style", "margin-left: 180px;margin-top: 50px;", 4, "ngIf"], [2, "margin-left", "180px", "margin-top", "50px"], ["data-pdfmake", "{'headerRows':2}", 3, "ngStyle"], ["colspan", "3"], ["style", "font-size: 9px;", "componenttype", "timeline", 3, "fromPrinting", "prescription", 4, "ngIf"], ["style", "font-size: 9px;", "componenttype", "timeline", 3, "prescription", "fromPrinting", 4, "ngIf"], ["style", "font-size: 10px;", 4, "ngIf"], [2, "height", "20px", "width", "235px", "text-align", "center"], ["componenttype", "timeline", 2, "font-size", "9px", 3, "fromPrinting", "prescription"], ["componenttype", "timeline", 2, "font-size", "9px", 3, "prescription", "fromPrinting"], [2, "height", "20px", "width", "235px", "word-wrap", "break-all"]],
    template: function DemoAdmissionRecordComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵgetCurrentView"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](0, DemoAdmissionRecordComponent_ng_template_0_Template, 57, 16, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplateRefExtractor"])(2, DemoAdmissionRecordComponent_ng_template_2_Template, 7, 6, "ng-template", null, 1, _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplateRefExtractor"])(4, DemoAdmissionRecordComponent_ng_template_4_Template, 4, 3, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplateRefExtractor"])(6, DemoAdmissionRecordComponent_ng_template_6_Template, 1, 1, "ng-template", null, 3, _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](8, "app-print-discharge", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵlistener"]("destroyComponent", function DemoAdmissionRecordComponent_Template_app_print_discharge_destroyComponent_8_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵresetView"](ctx.pdfDownloaded());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        const recordChart_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵreference"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](8);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("customTemplate", recordChart_r13)("view", "l")("title", "Medication Administration Record")("dimensions", _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpureFunction0"](6, _c9))("saveTitle", "MAR")("printType", ctx.marType);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_11__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_11__.NgTemplateOutlet, _angular_common__WEBPACK_IMPORTED_MODULE_11__.NgStyle, _print_discharge_print_discharge_component__WEBPACK_IMPORTED_MODULE_7__.PrintDischargeComponent, _prescription_infusion_print_template_prescription_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_8__.PrescriptionInfusionPrintTemplateComponent, _prescription_non_infusion_print_template_prescription_non_infusion_print_template_component__WEBPACK_IMPORTED_MODULE_9__.PrescriptionNonInfusionPrintTemplateComponent, _angular_common__WEBPACK_IMPORTED_MODULE_11__.DatePipe],
    styles: ["[class*=\"col\"][_ngcontent-%COMP%] {\n  border: 1px solid black;\n  \n\n  border-collapse: collapse;\n  height: 30px;\n}\n\n.updated-row-height[_ngcontent-%COMP%]   [class*=\"col\"][_ngcontent-%COMP%] {\n  height: 15px;\n}\n\n.update[_ngcontent-%COMP%]   [class*=\"col\"][_ngcontent-%COMP%] {\n  height: 15px;\n}\n\n.add-border[_ngcontent-%COMP%] {\n  border: 1px solid black;\n}\n\n.row-height[_ngcontent-%COMP%] {\n  height: 30px;\n}\n\n.updated-row-height[_ngcontent-%COMP%] {\n  height: 15px;\n}\n\n.remove-double-border-right[_ngcontent-%COMP%] {\n  border-right: 0;\n}\n\n.col-height-1[_ngcontent-%COMP%] {\n  height: 210px;\n}\n\n.col-height-1-updated[_ngcontent-%COMP%]   [class*=\"col\"][_ngcontent-%COMP%] {\n  height: 105px;\n}\n\n.remove-double-border-left[_ngcontent-%COMP%] {\n  border-left: 0;\n}\n\n.remove-double-border-bottom[_ngcontent-%COMP%] {\n  border-bottom: 0;\n}\n.remove-double-border-top[_ngcontent-%COMP%] {\n  border-top: 0;\n}\n\n.remove-border[_ngcontent-%COMP%] {\n  border:0;\n}\n\n.add-right-border[_ngcontent-%COMP%] {\n  border-right: 1px solid black;\n}\n\n.add-bottom-border[_ngcontent-%COMP%] {\n  border-bottom: 1px solid black;\n}\n\n.text-align[_ngcontent-%COMP%] {\n  text-align: center;\n}\n\n.barcode-align[_ngcontent-%COMP%] {\n  text-align: left;\n  vertical-align: text-top;\n}\n\n.table-height[_ngcontent-%COMP%]  {\n  min-height: 525px;\n}\n\n.table-height-2[_ngcontent-%COMP%]  {\n  min-height: 525px;\n}\n\n.table-height-3[_ngcontent-%COMP%] {\n  min-height: 465px;\n}\n\n.table-height-4[_ngcontent-%COMP%] {\n  min-height:325px;\n}\n\n.table-height-5[_ngcontent-%COMP%] {\n  min-height:475px;\n}\n\n\n\n\n\n\n.header-margin[_ngcontent-%COMP%] {\n  margin-bottom: 30px;\n  margin-top: 30px;\n}\n\n.update-margin[_ngcontent-%COMP%] {\n  margin-left: 0px;\n  width: 104%;\n}\n\n.header-col-height[_ngcontent-%COMP%] {\n  height: 125px;\n}\n\n\n\n\n\n\n.font-color[_ngcontent-%COMP%] {\n  color: lightgray;\n}\n\n.change-font-size[_ngcontent-%COMP%] {\n  font-size: 8px;\n}\n\n\n\n\n\n\n.header-margin-3[_ngcontent-%COMP%] {\n  margin-top: 20px;\n}\n\n.active-second-part[_ngcontent-%COMP%] {\n  \n\n  min-height: 240px;\n}\n\n.height-1[_ngcontent-%COMP%] {\n  \n\n}\n\n\n\n\n\n\n.visibility[_ngcontent-%COMP%] {\n  visibility: hidden;\n}\n\n.padding-medication[_ngcontent-%COMP%] {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.overflow[_ngcontent-%COMP%] {\n  overflow-y: hidden;\n}\n\n.overflow-data[_ngcontent-%COMP%] {\n  overflow: hidden;\n}\n\n.extend-width[_ngcontent-%COMP%] {\n  width: 97.7%;\n}\n\n.pdfUseOnly[_ngcontent-%COMP%] {\n  visibility: hidden;\n  font-size: 15px;\n}\n\n.col-width[_ngcontent-%COMP%] {\n  width: 200px;\n}\n\n.margin-left-total[_ngcontent-%COMP%] {\n  margin-left: 15px;\n}\n\n.checked-padding[_ngcontent-%COMP%] {\n  padding-left: 3px;\n}\n\n.given-padding[_ngcontent-%COMP%] {\n  padding-left: 3px;\n}\n\n.col-advanced[_ngcontent-%COMP%] {\n  height: 69px;\n}\n\n.padding-administration[_ngcontent-%COMP%] {\n  padding-left: 3px;\n}\n\n.min-width-date[_ngcontent-%COMP%] {\n  min-width: 12%;\n  padding-left: 4px;\n}\n\n.max-width-dose-time[_ngcontent-%COMP%] {\n  max-width: 12%;\n  padding-left: 4px;\n}\n\n\n.max-width-date-col[_ngcontent-%COMP%] {\n  max-width: 12%;\n}\n\n.row-width-extended[_ngcontent-%COMP%] {\n  width: 219%;\n}\n\n.date-time-padding[_ngcontent-%COMP%] {\n  padding-left: 4px;\n}\n\n\n.dose-padding[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 0px;\n}\n\n.each-page-header[_ngcontent-%COMP%] {\n  height: 30px;\n\n}\n\n.header-visibility[_ngcontent-%COMP%] {\n  visibility: hidden;\n}\n\n\n.header-visibility-2[_ngcontent-%COMP%] {\n  display: none;\n  margin-top: 10px;\n}\n\n.each-page-footer[_ngcontent-%COMP%] {\n  height: 10px;\n  margin-left: -70px;\n}\n\n.each-page-footer-2[_ngcontent-%COMP%] {\n  margin-left: 300px;\n}\n\n.x-height[_ngcontent-%COMP%] {\n  height: 150px;\n}\n\n.col-extend[_ngcontent-%COMP%] {\n  height: 35px;\n}\n\n.patient-description[_ngcontent-%COMP%] {\n  margin-left: 10px;\n}\n\n.checkmark[_ngcontent-%COMP%] {\n\n    width: 5px;\n    height: 5px;\n    background-repeat: no-repeat;\n   background-image: url(\"/assets/images/epma/checkmark.png\");\n\n}\n\n.empa-template-dose-text[_ngcontent-%COMP%]  {\n  font-size: 1.1em;\n  line-height: 14px;\n  color: #646464;\n  white-space: normal;\n}\n\n\n.given-checked[_ngcontent-%COMP%] {\n  margin-left: -5px;\n}\n\n.modified-height[_ngcontent-%COMP%] {\n  height: 15px;\n}\n\n.empa-template-induction-label[_ngcontent-%COMP%] {\n  color: #7891D8;\n  font-weight: bold;\n}\n\n\n\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kZW1vLWFkbWlzc2lvbi1yZWNvcmQvZGVtby1hZG1pc3Npb24tcmVjb3JkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx1QkFBdUI7RUFDdkIsaUNBQWlDO0VBQ2pDLHlCQUF5QjtFQUN6QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsUUFBUTtBQUNWOztBQUVBO0VBQ0UsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTs7R0FFRzs7QUFFSDtFQUNFLG1CQUFtQjtFQUNuQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztBQUNiOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBOztHQUVHOztBQUVIO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjtBQUNBOzs7R0FHRzs7QUFFSDtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7O0dBRUc7O0FBRUg7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsY0FBYztFQUNkLGlCQUFpQjtBQUNuQjs7O0FBR0E7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25COzs7QUFHQTtFQUNFLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxZQUFZOztBQUVkOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOzs7QUFHQTtFQUNFLGFBQWE7RUFDYixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBOztJQUVJLFVBQVU7SUFDVixXQUFXO0lBQ1gsNEJBQTRCO0dBQzdCLDBEQUEwRDs7QUFFN0Q7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxtQkFBbUI7QUFDckI7OztBQUdBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsY0FBYztFQUNkLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIltjbGFzcyo9XCJjb2xcIl0ge1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgLyogYm9yZGVyLWxlZnQ6MXB4IHNvbGlkIGJsYWNrOyAqL1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBoZWlnaHQ6IDMwcHg7XG59XG5cbi51cGRhdGVkLXJvdy1oZWlnaHQgW2NsYXNzKj1cImNvbFwiXSB7XG4gIGhlaWdodDogMTVweDtcbn1cblxuLnVwZGF0ZSBbY2xhc3MqPVwiY29sXCJdIHtcbiAgaGVpZ2h0OiAxNXB4O1xufVxuXG4uYWRkLWJvcmRlciB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xufVxuXG4ucm93LWhlaWdodCB7XG4gIGhlaWdodDogMzBweDtcbn1cblxuLnVwZGF0ZWQtcm93LWhlaWdodCB7XG4gIGhlaWdodDogMTVweDtcbn1cblxuLnJlbW92ZS1kb3VibGUtYm9yZGVyLXJpZ2h0IHtcbiAgYm9yZGVyLXJpZ2h0OiAwO1xufVxuXG4uY29sLWhlaWdodC0xIHtcbiAgaGVpZ2h0OiAyMTBweDtcbn1cblxuLmNvbC1oZWlnaHQtMS11cGRhdGVkIFtjbGFzcyo9XCJjb2xcIl0ge1xuICBoZWlnaHQ6IDEwNXB4O1xufVxuXG4ucmVtb3ZlLWRvdWJsZS1ib3JkZXItbGVmdCB7XG4gIGJvcmRlci1sZWZ0OiAwO1xufVxuXG4ucmVtb3ZlLWRvdWJsZS1ib3JkZXItYm90dG9tIHtcbiAgYm9yZGVyLWJvdHRvbTogMDtcbn1cbi5yZW1vdmUtZG91YmxlLWJvcmRlci10b3Age1xuICBib3JkZXItdG9wOiAwO1xufVxuXG4ucmVtb3ZlLWJvcmRlciB7XG4gIGJvcmRlcjowO1xufVxuXG4uYWRkLXJpZ2h0LWJvcmRlciB7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xufVxuXG4uYWRkLWJvdHRvbS1ib3JkZXIge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XG59XG5cbi50ZXh0LWFsaWduIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uYmFyY29kZS1hbGlnbiB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIHZlcnRpY2FsLWFsaWduOiB0ZXh0LXRvcDtcbn1cblxuLnRhYmxlLWhlaWdodCAge1xuICBtaW4taGVpZ2h0OiA1MjVweDtcbn1cblxuLnRhYmxlLWhlaWdodC0yICB7XG4gIG1pbi1oZWlnaHQ6IDUyNXB4O1xufVxuXG4udGFibGUtaGVpZ2h0LTMge1xuICBtaW4taGVpZ2h0OiA0NjVweDtcbn1cblxuLnRhYmxlLWhlaWdodC00IHtcbiAgbWluLWhlaWdodDozMjVweDtcbn1cblxuLnRhYmxlLWhlaWdodC01IHtcbiAgbWluLWhlaWdodDo0NzVweDtcbn1cblxuLyogLmhlYWRlci1oZWlnaHQge1xuICBoZWlnaHQ6IDIwMHB4O1xufSAqL1xuXG4uaGVhZGVyLW1hcmdpbiB7XG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG59XG5cbi51cGRhdGUtbWFyZ2luIHtcbiAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgd2lkdGg6IDEwNCU7XG59XG5cbi5oZWFkZXItY29sLWhlaWdodCB7XG4gIGhlaWdodDogMTI1cHg7XG59XG5cbi8qIC5iYXJjb2RlLW1hcmdpbiB7XG4gIG1hcmdpbi10b3A6IDY4cHg7XG59ICovXG5cbi5mb250LWNvbG9yIHtcbiAgY29sb3I6IGxpZ2h0Z3JheTtcbn1cblxuLmNoYW5nZS1mb250LXNpemUge1xuICBmb250LXNpemU6IDhweDtcbn1cbi8qIFxuLmhlYWRlci1tYXJnaW4tMiB7XG4gIG1hcmdpbi10b3A6IDMwMHB4O1xufSAqL1xuXG4uaGVhZGVyLW1hcmdpbi0zIHtcbiAgbWFyZ2luLXRvcDogMjBweDtcbn1cblxuLmFjdGl2ZS1zZWNvbmQtcGFydCB7XG4gIC8qIGhlaWdodDogYXV0bzsgKi9cbiAgbWluLWhlaWdodDogMjQwcHg7XG59XG5cbi5oZWlnaHQtMSB7XG4gIC8qIGhlaWdodDogNzAlOyAqL1xufVxuXG4vKiAuaGVpZ2h0LTIge1xuICBoZWlnaHQ6IDMwJTtcbn0gKi9cblxuLnZpc2liaWxpdHkge1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi5wYWRkaW5nLW1lZGljYXRpb24ge1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG59XG5cbi5vdmVyZmxvdyB7XG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcbn1cblxuLm92ZXJmbG93LWRhdGEge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uZXh0ZW5kLXdpZHRoIHtcbiAgd2lkdGg6IDk3LjclO1xufVxuXG4ucGRmVXNlT25seSB7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgZm9udC1zaXplOiAxNXB4O1xufVxuXG4uY29sLXdpZHRoIHtcbiAgd2lkdGg6IDIwMHB4O1xufVxuXG4ubWFyZ2luLWxlZnQtdG90YWwge1xuICBtYXJnaW4tbGVmdDogMTVweDtcbn1cblxuLmNoZWNrZWQtcGFkZGluZyB7XG4gIHBhZGRpbmctbGVmdDogM3B4O1xufVxuXG4uZ2l2ZW4tcGFkZGluZyB7XG4gIHBhZGRpbmctbGVmdDogM3B4O1xufVxuXG4uY29sLWFkdmFuY2VkIHtcbiAgaGVpZ2h0OiA2OXB4O1xufVxuXG4ucGFkZGluZy1hZG1pbmlzdHJhdGlvbiB7XG4gIHBhZGRpbmctbGVmdDogM3B4O1xufVxuXG4ubWluLXdpZHRoLWRhdGUge1xuICBtaW4td2lkdGg6IDEyJTtcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XG59XG5cbi5tYXgtd2lkdGgtZG9zZS10aW1lIHtcbiAgbWF4LXdpZHRoOiAxMiU7XG4gIHBhZGRpbmctbGVmdDogNHB4O1xufVxuXG5cbi5tYXgtd2lkdGgtZGF0ZS1jb2wge1xuICBtYXgtd2lkdGg6IDEyJTtcbn1cblxuLnJvdy13aWR0aC1leHRlbmRlZCB7XG4gIHdpZHRoOiAyMTklO1xufVxuXG4uZGF0ZS10aW1lLXBhZGRpbmcge1xuICBwYWRkaW5nLWxlZnQ6IDRweDtcbn1cblxuXG4uZG9zZS1wYWRkaW5nIHtcbiAgcGFkZGluZy1sZWZ0OiAycHg7XG4gIHBhZGRpbmctcmlnaHQ6IDBweDtcbn1cblxuLmVhY2gtcGFnZS1oZWFkZXIge1xuICBoZWlnaHQ6IDMwcHg7XG5cbn1cblxuLmhlYWRlci12aXNpYmlsaXR5IHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG5cbi5oZWFkZXItdmlzaWJpbGl0eS0yIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgbWFyZ2luLXRvcDogMTBweDtcbn1cblxuLmVhY2gtcGFnZS1mb290ZXIge1xuICBoZWlnaHQ6IDEwcHg7XG4gIG1hcmdpbi1sZWZ0OiAtNzBweDtcbn1cblxuLmVhY2gtcGFnZS1mb290ZXItMiB7XG4gIG1hcmdpbi1sZWZ0OiAzMDBweDtcbn1cblxuLngtaGVpZ2h0IHtcbiAgaGVpZ2h0OiAxNTBweDtcbn1cblxuLmNvbC1leHRlbmQge1xuICBoZWlnaHQ6IDM1cHg7XG59XG5cbi5wYXRpZW50LWRlc2NyaXB0aW9uIHtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG59XG5cbi5jaGVja21hcmsge1xuXG4gICAgd2lkdGg6IDVweDtcbiAgICBoZWlnaHQ6IDVweDtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2Fzc2V0cy9pbWFnZXMvZXBtYS9jaGVja21hcmsucG5nXCIpO1xuXG59XG5cbi5lbXBhLXRlbXBsYXRlLWRvc2UtdGV4dCAge1xuICBmb250LXNpemU6IDEuMWVtO1xuICBsaW5lLWhlaWdodDogMTRweDtcbiAgY29sb3I6ICM2NDY0NjQ7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG59XG5cblxuLmdpdmVuLWNoZWNrZWQge1xuICBtYXJnaW4tbGVmdDogLTVweDtcbn1cblxuLm1vZGlmaWVkLWhlaWdodCB7XG4gIGhlaWdodDogMTVweDtcbn1cblxuLmVtcGEtdGVtcGxhdGUtaW5kdWN0aW9uLWxhYmVsIHtcbiAgY29sb3I6ICM3ODkxRDg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 4193:
/*!***************************************************************!*\
  !*** ./src/app/components/drug-chart/drug-chart.component.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrugChartComponent: () => (/* binding */ DrugChartComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 2510);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 9452);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 1873);
/* harmony import */ var src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/models/filter.model */ 3060);
/* harmony import */ var src_app_services_datarequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/datarequest */ 8698);
/* harmony import */ var src_app_services_subjects_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/subjects.service */ 3939);
/* harmony import */ var _services_timeline_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/timeline-service.service */ 4651);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/app.service */ 529);
/* harmony import */ var src_app_services_apirequest_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/apirequest.service */ 5351);









const _c0 = ["timecomponentid"];
class DrugChartComponent {
  onResize(event) {
    this.screenHeight = window.innerHeight;
    this.screenWidth = window.innerWidth;
  }
  clickout(event) {
    if (this.isitemclickedboolean) {
      this.isitemclickedboolean = false;
    } else {
      this.showContextMenu = false;
    }
  }
  constructor(dr, subjects, timelineService, appService, apiRequest) {
    this.dr = dr;
    this.subjects = subjects;
    this.timelineService = timelineService;
    this.appService = appService;
    this.apiRequest = apiRequest;
    this.screenHeight = window.innerHeight;
    this.screenWidth = window.innerWidth;
    this.isZoomCssApplied = false;
    this.isitemclickedboolean = false;
    this.showAdministrationForm = false;
    this.showEditpopup = false;
    this.showContextMenu = false;
    this.contextmenuX = 0;
    this.contextmenuY = 0;
    this.contextdistype = "none";
    this.editpopuptypetype = "";
    this.doctorConformationModel = false;
    this.errorgeneratingevents = false;
    this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription();
    this.emitPrintIcon = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
    this.timelineService.Reset();
    this.timeerHelper = null;
    for (var timelinearray of this.appService.TimelineArray) {
      timelinearray.timeline.destroy();
      timelinearray.group = null;
      timelinearray.items = null;
      timelinearray.options = null;
      timelinearray.PRNArray = null;
    }
    this.appService.TimelineArray = null;
    this.timediv.destroy();
  }
  ngOnInit() {
    const patientDetails$ = this.apiRequest.getRequest(this.appService.baseURI + `/GetBaseViewListByAttribute/patientbanner_mainbanner?synapseattributename=person_id&attributevalue=${this.appService.personId}`);
    const encounterDetails$ = this.apiRequest.getRequest(this.appService.baseURI + `/GetObject?synapsenamespace=core&synapseentityname=encounter&id=${this.appService.encounter.encounter_id}`);
    let prescriptionHistory$ = this.appService.Prescription.length ? this.apiRequest.postRequest(this.appService.baseURI + '/GetBaseViewListByPost/epma_reviewhistory', this.CreateSessionFilter()) : (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(null);
    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.forkJoin)([patientDetails$, encounterDetails$, prescriptionHistory$]).subscribe(responseList => {
      this.appService.patientDetails = JSON.parse(responseList[0])[0];
      this.appService.encounterDetails = JSON.parse(responseList[1]);
      this.appService.disabledatechange = false;
      if (this.appService.Prescription.length) {
        for (let prescription of responseList[2]) {
          prescription.__posology = JSON.parse(prescription.__posology);
          prescription.__routes = JSON.parse(prescription.__routes);
          prescription.__medications = JSON.parse(prescription.__medications);
          this.appService.prescriptionHistory.push(prescription);
        }
        this.appService.prescriptionHistory.forEach(presHistory => {
          presHistory.history_status = this.getPrescriptionStatus(presHistory);
        });
      }
      //click print here 
    });
  }
  CreateSessionFilter() {
    let condition = '';
    const pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__.filterParams();
    const pres_ids = [];
    this.appService.Prescription.forEach(pres => {
      pres_ids.push(pres.prescription_id);
    });
    for (var i = 0; i < pres_ids.length; i++) {
      condition += "or prescription_id = @prescription_id" + i + " ";
      pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__.filterparam("prescription_id" + i, pres_ids[i]));
    }
    condition = condition.replace(/^\or+|\or+$/g, '');
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__.filter(condition));
    const select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__.selectstatement('SELECT *');
    const orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_0__.orderbystatement('ORDER BY 2');
    const body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  getPrescriptionStatus(pres) {
    var status = this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == pres.prescriptionstatus_id);
    if (status) return this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == pres.prescriptionstatus_id).status;else return "active";
  }
  static #_ = this.ɵfac = function DrugChartComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || DrugChartComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_services_datarequest__WEBPACK_IMPORTED_MODULE_1__.DataRequest), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_services_subjects_service__WEBPACK_IMPORTED_MODULE_2__.SubjectsService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_services_timeline_service_service__WEBPACK_IMPORTED_MODULE_3__.TimelineServiceService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_4__.AppService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_services_apirequest_service__WEBPACK_IMPORTED_MODULE_5__.ApirequestService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineComponent"]({
    type: DrugChartComponent,
    selectors: [["app-drug-chart"]],
    viewQuery: function DrugChartComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵviewQuery"](_c0, 5);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵloadQuery"]()) && (ctx.timecomponentid = _t.first);
      }
    },
    hostBindings: function DrugChartComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("resize", function DrugChartComponent_resize_HostBindingHandler($event) {
          return ctx.onResize($event);
        }, false, _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresolveWindow"])("click", function DrugChartComponent_click_HostBindingHandler($event) {
          return ctx.clickout($event);
        }, false, _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresolveDocument"]);
      }
    },
    inputs: {
      groupFilterType: "groupFilterType"
    },
    outputs: {
      emitPrintIcon: "emitPrintIcon"
    },
    decls: 1,
    vars: 0,
    template: function DrugChartComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](0, "drug chart ");
      }
    },
    styles: [".contextmenu{\n    position: absolute; \n}\n\n.hidescrollbar::-webkit-scrollbar {\n    display: none;\n}\n\n#timecomponentid .vis-timeline.vis-bottom.vis-ltr\n{  \n    height: 60px !important;\n  \n}\n.vis-item.vis-background.transbackground {\n     \n  background-color: transparent;\n}\n#drugcomponent .vis-left {\n    width: 30%;\n  \n  }\n  #drugcomponent  .vis-center {\n\n    width: 70%;\n  }\n  #drugcomponent  .vis-content{\n    z-index: 2;\n}\n\n/* added 20px to bring item down */\n/* .vis-item .vis-item-content {\n    white-space: nowrap;\n    box-sizing: border-box;\n    padding: 5px;\n    padding-top: 20px;\n} */\n.vis-timeline .vis-item.vis-point {\n    margin-top: 25px;\n}\n#drugcomponent .vis-time-axis {\n    background-color:#ececec;\n  \n  }\n  .vis-item.vis-background.timelinecurrent {\n    background-color: rgba(255, 255, 255, 0.781);\n    z-index: 1 !important;\n  }\n\n  .vis-time-axis .vis-today.vis-minor{\n    background: #fff;\n    }\n   \n     \n \n      /* .vis-time-axis .vis-today.vis-h8-h12, */\n      .vis-time-axis .vis-today.vis-h12-h16,\n      .vis-time-axis .vis-today.vis-h16-h20,\n      .vis-time-axis .vis-today.vis-h20-h24,\n      .vis-time-axis .vis-tomorrow.vis-h0-h4,\n     .vis-time-axis .vis-tomorrow.vis-h4-h8\n    {\n        background: #fff;\n    }\n\n    .vis-time-axis .vis-today.vis-h0,\n    .vis-time-axis .vis-today.vis-h1,\n    .vis-time-axis .vis-today.vis-h2,\n    .vis-time-axis .vis-today.vis-h3,\n    .vis-time-axis .vis-today.vis-h4,\n    .vis-time-axis .vis-today.vis-h5,\n    .vis-time-axis .vis-today.vis-h6    \n  {\n      background:  #ececec !important;\n  }\n  \n  .vis-time-axis .vis-tomorrow.vis-h0,\n  .vis-time-axis .vis-tomorrow.vis-h1,\n  .vis-time-axis .vis-tomorrow.vis-h2,\n  .vis-time-axis .vis-tomorrow.vis-h3,\n  .vis-time-axis .vis-tomorrow.vis-h4,\n  .vis-time-axis .vis-tomorrow.vis-h5,\n  .vis-time-axis .vis-tomorrow.vis-h6 \n \n{\n    background:  #fff !important;\n}\n\n  #timecomponentid .vis-time-axis .vis-today.vis-h0,\n  #timecomponentid .vis-time-axis .vis-today.vis-h1,\n  #timecomponentid .vis-time-axis .vis-today.vis-h2,\n  #timecomponentid .vis-time-axis .vis-today.vis-h3,\n  #timecomponentid .vis-time-axis .vis-today.vis-h4,\n  #timecomponentid .vis-time-axis .vis-today.vis-h5,\n  #timecomponentid .vis-time-axis .vis-today.vis-h6    \n{\n    background: #fff !important;\n}\n\n\n   \n  \n    .vis-time-axis .vis-today.vis-h4-h8\n    {\n        background: #ececec;\n    }\n\n    #timecomponentid .vis-time-axis .vis-today.vis-h4-h8,\n    #timecomponentid .vis-time-axis .vis-today.vis-h8-h12\n    {\n        background: #fff !important;\n    } \n\n  /* #timecomponentid .vis-time-axis .vis-today.vis-h8-h12\n    {\n        background: #ececec !important;\n    } */\n\n    \n\n\n\n  .vis-time-axis.vis-foreground {\n    top: 0;\n    left: 0;\n    width: 100%;\n    background: #ffff !important;\n}\n    .vis-item.transparant {\n      background-color: rgba(0, 247, 255, 0)  !important;\n      border-color: rgba(139, 0, 0, 0)  !important;\n   \n      font-family: monospace;\n      box-shadow: 0 0 0px gray;\n      cursor: pointer;\n    }\n    .colfooterBtns {\n        color:#2978CC;;\n        cursor: pointer;\n }\n    .vis-foreground .vis-group {\n        position: relative;\n        box-sizing: border-box;\n        border-bottom: 1px solid #bfbfbf;\n  \n    }\n    /* .vis-group{\n        margin-top: -4%;\n    } */\n\n    /* -------------------- */\n    /* .vis-group {    \n      display: flex;\n      justify-content: center;\n      align-items: center;\n  } */\n  .Recordadditionaladministration{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-130px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/events/infusion/Administer_Fluid_PRN.svg\");\n  }\n  .Multiple_Reminders_With_The_Date{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Multiple_Reminders_With_The_Date.svg\");\n  }\n  .Multiple_Reminders_One_Day_Has_Passed{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Multiple_Reminders_One_Day_Has_Passed.svg\");\n  }\n  .Multiple_Reminders_Has_Been_Acknowledged{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Multiple_Reminders_Has_Been_Acknowledged.svg\");\n  }\n  .Multiple_Reminders{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Multiple_Reminders.svg\");\n  }\n  .Reminder{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Reminder.svg\");\n  }\n  .Reminderdue{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Reminder_With_The_Date.svg\");\n  }\n  .Reminderoverdue{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Reminder_One_Day_Has_Passed.svg\");\n  }\n  .ReminderAcknowledged{\n    width: 2em;\n    height: 2em; background-size : cover; margin-top:-90px; background-repeat: no-repeat;\n    background-image: url(\"/assets/images/epma/reminder/Reminder_Has_Been_Acknowledged.svg\");\n  }\n    .Administer_PRN{\n        width: 2em;\n        height: 2em;\n        background-size : cover;\n        /* background: #fff; */\n        margin-top:-130px;\n        /* border-radius: 7px; */\n       background-image: url(\"/assets/images/epma/events/administration/Administer_PRN.svg\");\n       background-repeat: no-repeat;\n    }\n    .Cancelled{\n      width: 2.5em;\n      height: 2.5em; background-size : cover;margin-top:-44px;\n     background-image: url(\"/assets/images/epma/events/administration/Cancelled.svg\");\n  }\n    .Administration_Completed_early{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Completed_Early.svg\");\n    }\n    .Administration_Completed_late{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Completed_Late.svg\");\n    }\n    .Administration_Defered{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Defered.svg\");\n    }\n    .Administration_Deferedinfusion{\n      width: 2.5em;\n      height: 2.5em; background-size : cover;margin-top:-60px;\n     background-image: url(\"/assets/images/epma/events/administration/Administration_Defered.svg\"); /* should this be a separate icon? */\n  }\n    .Administration_Failed{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Failed.svg\");\n    }\n    .AdministrationInfution_Failed{\n      width: 2.3em;\n      height: 2.3em; background-size : cover;margin-top:-60px;\n     background-image: url(\"/assets/images/epma/events/administration/Administration_Failed.svg\");\n  }\n    .Administration_requires_doctors_confirmation_Due{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       \n        border-radius: 7px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Requires_Prescribers_Confirmation_Due.svg\");\n    }\n    .Administration_requires_doctors_confirmation_Late{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       \n        border-radius: 7px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Requires_Prescribers_Confirmation_Overdue.svg\");\n    }\n    .Administration_requires_doctors_confirmation_Planned{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n      \n        border-radius: 7px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Requires_Prescribers_Confirmation_Planned.svg\");\n    }\n    .Administration_withheld_by_doctor{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Administration_Withheld_By_Prescriber.svg\");\n    }\n    .Administration_withheld_by_doctor_Infution{\n      width: 2.3em;\n      height: 2.3em; background-size : cover;margin-top:-60px;\n     background-image: url(\"/assets/images/epma/events/administration/Administration_Withheld_By_Prescriber.svg\");\n  }\n    .Maintain_Infusion_Rate_done{\n      width: 2.5em;\n      height: 2.5em; background-size : cover; margin-top:-60px;\n     background-image: url(\"/assets/images/epma/events/infusion/Maintain_Infusion_Rate_Done.svg\");\n  }\n  .Maintain_Infusion_Rate_Late{\n    width: 2.5em;\n    height: 2.5em; background-size : cover; margin-top:-60px;\n   background-image: url(\"/assets/images/epma/events/infusion/Maintain_Infusion_Rate_Overdue.svg\");\n}\n.Maintain_Infusion_Rate_Planned{\n  width: 2.5em;\n  height: 2.5em; background-size : cover; margin-top:-60px;\n background-image: url(\"/assets/images/epma/events/infusion/Maintain_Infusion_Rate_Planned.svg\");\n}\n  .Maintain_Infusion_Rate_Due{\n    width: 2.5em;\n    height: 2.5em; background-size : cover; margin-top:-60px;\n   background-image: url(\"/assets/images/epma/events/infusion/Maintain_Infusion_Rate_Due.svg\");\n   \n}\n.Dose_Administered_Early_Is_A_Different_Product_From_Prescribed{\n  width: 2.5em;\n  height: 2.5em; background-size : cover;margin-top:-44px;\n background-image: url(\"/assets/images/epma/events/administration/Dose_Administered_Early_Is_A_Different_Product_From_Prescribed.svg\");\n}\n.Dose_Administered_Is_A_Different_Product_From_Prescribed{\n  width: 2.5em;\n  height: 2.5em; background-size : cover;margin-top:-44px;\n background-image: url(\"/assets/images/epma/events/administration/Dose_Administered_Is_A_Different_Product_From_Prescribed.svg\");\n}\n.Dose_Administered_Late_Is_A_Different_Product_From_Prescribed{\n  width: 2.5em;\n  height: 2.5em; background-size : cover;margin-top:-44px;\n background-image: url(\"/assets/images/epma/events/administration/Dose_Administered_Late_Is_A_Different_Product_From_Prescribed.svg\");\n}\n    .Completed_Administration{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Completed_Administration.svg\");\n    }\n    .Dose_administered_early_is_differnt_from_prescribed{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Dose_Administered_Early_Is_Different_From_Prescribed.svg\");\n    }\n    .Dose_administered_is_differnt_from_prescribed{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Dose_Administered_Is_Different_From_Prescribed.svg\");\n    }\n    .Dose_administered_late_is_differnt_from_prescribed{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Dose_Administered_Late_Is_Different_From_Prescribed.svg\");\n    }\n    .Due_Administration{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Due_Administration.svg\");\n    }\n    .Late_Administration{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Overdue_Administration.svg\");\n    }\n    .Planned_Administration{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-44px;\n       background-image: url(\"/assets/images/epma/events/administration/Planned_Administration.svg\");\n    }\n\n    .vis-item.vis-background.positive {\n      background-color: #fff;\n     \n    }\n    \n    .addopacity{\n      opacity: 30%;\n    }\n    .vis-item.vis-background.negative {\n     \n      background-color: rgba(255, 0, 0, 0.2);\n    }\n    .Infusionplanned{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Infusion_Planned.svg') ;\n      \n      }\n      \n    .Infusiondue{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Infusion_Due.svg') ;\n      \n      }\n      .InfusionLate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Infusion_Overdue.svg') ;\n       \n      }\n      .Infusioncompletionplanned{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Infusion_Completion_Planned.svg') ;\n      \n      }  \n      .InfusionCompletiondue{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Infusion_Completion_Due.svg') ;\n      \n      }\n      .InfusionCompleteoverdue{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Infusion_Completion_Overdue.svg') ;\n      \n      }\n      .DecreaseInfusionRatePlanned{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Decrease_Infusion_Rate_Planned.svg') ;\n      }\n      .DecreaseInfusionRateDue{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Decrease_Infusion_Rate_Due.svg') ;\n      }\n      .DecreaseInfusionRateLate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Decrease_Infusion_Rate_Overdue.svg') ;\n      }\n      .IncreaseInfusionRatePlanned{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Increase_Infusion_Rate_Planned.svg') ;\n      }\n      .IncreaseInfusionRateLate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Increase_Infusion_Rate_Overdue.svg') ;\n      }\n      .IncreaseInfusionRateDue{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Increase_Infusion_Rate_Due.svg') ;\n      }\n      .BolusAdministrationCompleted{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/infusion/Bolus_Administration_Completed.svg') ;\n      }\n\n      .additionaladministration{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n       background-image:url('/assets/images/epma/events/administration/Charted by nurse.svg') ;\n      }\n      .Infusiondone{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Infusion_Done.svg') ;\n      }\n            \n      .InfusionCompletedEarly{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Infusion_Completed_Early.svg') ;\n      }\n\n      .InfusionCompletedLate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Infusion_Completed_Late.svg') ;\n      }\n      \n      .Adjusted_Decrease_Infusion_Rate_Done_Kit_Change{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Decrease_Infusion_Rate_Done_Kit_Change.svg') ;\n      }\n      .Adjusted_Increase_Infusion_Rate_Done_Kit_Change{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Increase_Infusion_Rate_Done_Kit_Change.svg') ;\n      }\n      .Adjusted_Maintain_Infusion_Rate_Done_Kit_Change{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Maintain_Infusion_Rate_Done_Kit_Change.svg') ;\n      }\n\n      .IncreaseInfusionRatedone{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Increase_Infusion_Rate_Done.svg') ;\n      }\n\n      .IncreaseInfusionRatedonelate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Increase_Infusion_Rate_Done_Late.svg') ;\n      }\n      .IncreaseInfusionRatedoneearly{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Increase_Infusion_Rate_Done_Early.svg') ;\n      }\n      .DecreaseInfusionRatedone{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Decrease_Infusion_Rate_Done.svg') ;\n      }\n      .DecreaseInfusionRatedonelate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Decrease_Infusion_Rate_Done_Late.svg') ;\n      }\n      .DecreaseInfusionRatedoneearly{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Decrease_Infusion_Rate_Done_Early.svg') ;\n      }\n\n      .InfusionCompleteddone{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Infusion_Completion_Done.svg') ;\n      }\n\n      .InfusionCompletedEarly2{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Infusion_Completed_Early_2.svg') ;\n      }\n\n      .InfusionCompletedLate2 {\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Infusion_Completed_Late_2.svg') ;\n      }\n\n      .AdjustedDecreaseInfusionRatedoneearly {\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Decrease_Infusion_Rate_Done_Early.svg') ;\n      }\n      \n      .AdjustedDecreaseInfusionRatedonelate {\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Decrease_Infusion_Rate_Done_Late.svg') ;\n      }\n      \n      .AdjustedDecreaseInfusionRatedone {\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Decrease_Infusion_Rate_Done.svg') ;\n      }\n      \n      .AdjustedIncreaseInfusionRatedoneearly {\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Increase_Infusion_Rate_Done_Early.svg') ;\n      }\n      \n      .AdjustedIncreaseInfusionRatedonelate {\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Increase_Infusion_Rate_Done_Late.svg') ;\n      }\n\n      .AdjustedIncreaseInfusionRatedone{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Increase_Infusion_Rate_Done.svg') ;\n      }\n      \n      .MaintainInfusionRatedonelate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Maintain_Infusion_Rate_Done_Late.svg') ;\n      \n      }\n\n        \n      .MaintainInfusionRatedoneearly{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Maintain_Infusion_Rate_Done_Early.svg') ;\n      \n      }\n\n      .AdjustedsameInfusionRatedone{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Adjusted_Maintain_Infusion_Rate_Done.svg') ;\n      \n      }\n      .FaliedtoAdjustInfusionRatedonelate{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Falied_To_Adjust_Infusion_Rate_Done_Late.svg') ;\n\n      }\n\n      .FaliedtoAdjustInfusionRatedoneearly{\n        width: 2.5em;\n        height: 2.5em; background-size : cover;margin-top:-60px;\n      background-image:url('/assets/images/epma/events/infusion/Falied_To_Adjust_Infusion_Rate_Done_Early.svg') ;\n\n      }\n.InfusionRatePaused{\nwidth: 2.5em;\nheight: 2.5em; background-size : cover;margin-top:-60px;\nbackground-image:url('/assets/images/epma/events/infusion/Infusion_Rate_Paused.svg') ;\n\n}\n.ContinuousInfusionSetChanged{\n  width: 2.5em;\n  height: 2.5em; background-size : cover;margin-top:-60px;\n  background-image:url('/assets/images/epma/events/infusion/Continuous_Infusion_Set_Changed.svg') ;\n  \n  }\n  .Continuousinfusionsyringeorbagchange{\n    width: 2.5em;\n    height: 2.5em; background-size : cover;margin-top:-60px;\n    background-image:url('/assets/images/epma/events/infusion/Continuous_Infusion_Syringe_Or_Bag_Changed.svg') ;\n    \n    }\n      .duration-line {\n        margin-left: 10px;\n        margin-right: 10px;\n        height: 5px;\n        border: none;\n        z-index: 9;\n        background-color: #54b4e7;\n    }\n    .Zoombutton {\n      /* font-size: 11px; */\n      background-size : cover;\n      width:3.7em;\n      height:3.7em;margin-top:-65px;\n      z-index: 80;\n      background-image:url('/assets/images/epma/menu/Zoom_Icon.svg') ;\n \n     \n  }\n  .AddZindux{\n    z-index: 80;\n  }\n    .durationFlorate {\n        font-size: 11px;\n        color:darkblue;\n        height: 13px;\n        margin-top: -26px !important;\n        z-index: -20;\n        background-color: #c2e2f5;\n    }\n    .durationFlorateprescriptionform {\n      color: #4d4d4d;\n      padding-top: 1px;\n      margin-top: -26px !important;\n      overflow: hidden;\n      box-sizing: border-box;\n      white-space: nowrap;  \n  }\n   \n\n      .vis-item.vis-range{\n        margin-top: -29px;\n        height: 4px;\n        background-color: #c2e2f5 !important\n      }\n\n      .PauseDurline.vis-item.vis-range {\n        margin-top: -29px !important;\n        height: 1px;\n        border:none;\n        border-top:4px dashed  #F2CC99 !important;\n        color:#fff;\n        background-color:transparent !important;\n        z-index: 99999;\n        border-radius: 0px;\n      \n\n      }\n\n      .PRNRange.vis-item.vis-range {\n        margin-top: -45px !important;\n        /* height: 4px;  */\n        /* background-color: #afaaaa !important;\n        border: white */\n        border:none;\n        border-top:3px dotted gray;\n        color:#fff;\n        background-color:#ececec !important;\n       \n        border-radius: 0px;\n      \n\n      }\n      \n\n\n      ::-webkit-scrollbar {\n        -webkit-appearance: none;\n        width: 3px;\n        height: 3px;\n        -webkit-overflow-scrolling: auto;\n    }\n    \n    ::-webkit-scrollbar-thumb {\n        border-radius: 3px;\n        background-color: rgba(0, 0, 0, .5);\n        -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n    }\n   \n   .vis-inner {\n     width: 100%;\n   }\n   .stackMargin{\n    margin-top:-10px !important;\n    z-index: -5;\n   \n   }\n.EnterInErrorbolus{\n  width: 2.5em;\n  height: 2.5em; background-size : cover;margin-top:-60px;\n background-image: url(\"/assets/images/epma/events/Entered_In_Error.svg\");\n}\n   .EnterInError{\n    width: 2.5em;\n    height: 2.5em; background-size : cover;margin-top:-44px;\n   background-image: url(\"/assets/images/epma/events/Entered_In_Error.svg\");\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
    encapsulation: 2
  });
}

/***/ }),

/***/ 5255:
/*!*******************************************************!*\
  !*** ./src/app/components/drug-chart/timer-helper.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimeerHelper: () => (/* binding */ TimeerHelper)
/* harmony export */ });
/* harmony import */ var _services_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/enum */ 6134);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 2510);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/app.service */ 529);





class TimeerHelper {
  constructor(appService) {
    this.appService = appService;
    this.prescriptionStatus = "";
    this.subscriptions = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription();
    this.PRNids = new Array();
    this.PrescriptionFormEvent = [];
    this.bufferambertime = 0;
  }
  // createPrescriptionFormEvent(prescription: Prescription) {
  //     this.isTempEvents = true;
  //     this.PrescriptionFormEvent = [];
  //     this.prescriptionStatus = "";
  //     // setting max and min event date
  //     this.MaxEventDate = moment(this.currentDate).add(8, 'days');
  //     this.minEventDate = moment(this.currentDate).add(-8, 'days');
  //     this.MaxEventDate.set({ hour: 23, minute: 59, second: 0, millisecond: 0 })
  //     this.minEventDate.set({ hour: 0, minute: 0, second: 0, millisecond: 0 })
  //     if (prescription.prescriptionstatus_id != null && prescription.prescriptionstatus_id != "") {
  //         this.prescriptionStatus = this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == prescription.prescriptionstatus_id).status;
  //     }
  //     if (prescription.__posology[0].prn) {
  //         this.addevents(prescription.prescription_id, prescription.__posology[0].__dose[0].dose_id, new Date(), null, prescription.__posology[0].posology_id, prescription.__posology[0].prn,
  //             false, false, false, contents.Administer_PRN)
  //         this.PRNids.push(prescription.__posology[0].__dose[0].dose_id);
  //     }
  //     else if (prescription.isinfusion) {
  //         if (this.prescriptionStatus != "stopped" && this.prescriptionStatus != "cancelled") {
  //             this.addInfutionEvent(prescription);
  //         }
  //     }
  //     else {
  //         let temp = this.appService.TimelineArray;
  //         this.currentDate = new Date();
  //         if (prescription.__posology[0].frequency == "protocol") {
  //             this.addProtocolEvents(prescription)
  //         }
  //         else {
  //             this.addLogicalEvent(prescription);
  //         }
  //     }
  //     let temp = this.PrescriptionFormEvent;
  //     this.PrescriptionFormEvent = Array.from(new Set(temp.map(a => a.dose_id)))
  //         .map(id => {
  //             return temp.find(a => a.dose_id === id)
  //         })
  //     return this.PrescriptionFormEvent;
  // }
  addReminderevents(prescription_id, dose_id, eventStart, eventEnd, epma_prescriptionreminders_id, type, pending, remindertype, isinfusion, content, title, admitdone = false, issystem = false) {
    let opacityclass = "";
    if (eventEnd == null) {
      opacityclass = this.iseventinpatientaway(moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStart));
    }
    if (this.isreportevents) {
      this.appService.AllReminderevents.push({
        prescription_id: prescription_id,
        epma_prescriptionreminders_id: epma_prescriptionreminders_id,
        dose_id: dose_id,
        eventStart: moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStart),
        eventEnd: eventEnd,
        type: type,
        pending: pending,
        remindertype: remindertype,
        isinfusion: isinfusion,
        content: content,
        title: title,
        admitdone: admitdone,
        opacityclass: opacityclass,
        diffrence: 0,
        stackclass: false
      });
    } else {
      this.appService.CurrentReminderevents.push({
        prescription_id: prescription_id,
        epma_prescriptionreminders_id: epma_prescriptionreminders_id,
        dose_id: dose_id,
        eventStart: moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStart),
        eventEnd: eventEnd,
        type: type,
        pending: pending,
        remindertype: remindertype,
        isinfusion: isinfusion,
        content: content,
        title: title,
        admitdone: admitdone,
        opacityclass: opacityclass,
        diffrence: 0,
        stackclass: false,
        issystem: issystem
      });
    }
  }
  createWithDoseReminder(reminder) {
    let Overdue = moment__WEBPACK_IMPORTED_MODULE_1___default()().add(-this.appService.appConfig.defaultReminderOverdueTimePeriod, 'h');
    let prescriptionEvents = [];
    if (this.isreportevents) {
      prescriptionEvents = this.appService.reportData.filter(e => e.prescription_id == reminder.prescription_id && moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(e.eventStart)) && !e.dose_id.includes("bolus_") && !e.dose_id.includes("end") && !e.dose_id.includes("pause") && !e.dose_id.includes("dur") && !e.dose_id.includes("flowrate") && !e.content.includes("Administer_PRN") && !e.dose_id.includes("infusionevent"));
    } else {
      prescriptionEvents = this.appService.events.filter(e => e.prescription_id == reminder.prescription_id && moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(e.eventStart)) && !e.dose_id.includes("bolus_") && !e.dose_id.includes("end") && !e.dose_id.includes("pause") && !e.dose_id.includes("dur") && !e.dose_id.includes("flowrate") && !e.content.includes("Administer_PRN") && !e.dose_id.includes("infusionevent"));
    }
    for (let event of prescriptionEvents) {
      if (!reminder.enddatetime || moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.enddatetime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart))) {
        if (this.appService.remindersack.find(x => x.logicalid == "dur_Reminder" + event.dose_id)) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + event.dose_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart), null, reminder.epma_prescriptionreminders_id, 3, false, 2, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.ReminderAcknowledged, reminder.message);
        } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.lastmodifiedon).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart)) && moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()())) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + event.dose_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart), null, reminder.epma_prescriptionreminders_id, 2, false, 2, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminder, reminder.message);
        } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.lastmodifiedon).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart)) && moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()()) && Overdue.isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime))) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + event.dose_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart), null, reminder.epma_prescriptionreminders_id, 1, false, 2, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminderdue, reminder.message);
        } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.lastmodifiedon).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart)) && Overdue.isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart))) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + event.dose_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(event.eventStart), null, reminder.epma_prescriptionreminders_id, 0, false, 2, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminderoverdue, reminder.message);
        }
      }
    }
  }
  createRepeatReminder(start, enddate, reminder) {
    if (moment__WEBPACK_IMPORTED_MODULE_1___default()(start).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime))) {
      start = moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime);
    }
    let Overdue = moment__WEBPACK_IMPORTED_MODULE_1___default()().add(-this.appService.appConfig.defaultReminderOverdueTimePeriod, 'h');
    let prescriptions = this.appService.Prescription.find(x => x.prescription_id == reminder.prescription_id);
    let prescriptionStatus = this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == prescriptions.prescriptionstatus_id).status;
    let prescriptionenddate = this.appService.GetCurrentPosology(prescriptions).prescriptionenddate;
    if (prescriptionStatus == "suspended" || prescriptionStatus == "stopped" || prescriptionStatus == "cancelled") {
      enddate = this.appService.GetCurrentPosology(prescriptions).prescriptionenddate;
    }
    if (prescriptionenddate && moment__WEBPACK_IMPORTED_MODULE_1___default()(prescriptionenddate).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate))) {
      enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescriptionenddate);
    }
    if (moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.enddatetime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate))) {
      enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.enddatetime);
    }
    let remindersplotTime = moment__WEBPACK_IMPORTED_MODULE_1___default()(start).clone();
    while (moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate))) {
      if (this.appService.remindersack.find(x => x.logicalid == "dur_Reminder" + this.createLogicalId(remindersplotTime, reminder.epma_prescriptionreminders_id))) {
        this.addReminderevents(reminder.prescription_id, "dur_Reminder" + this.createLogicalId(remindersplotTime, reminder.epma_prescriptionreminders_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime), null, reminder.epma_prescriptionreminders_id, 3, false, 1, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.ReminderAcknowledged, reminder.message);
      } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()())) {
        this.addReminderevents(reminder.prescription_id, "dur_Reminder" + this.createLogicalId(remindersplotTime, reminder.epma_prescriptionreminders_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime), null, reminder.epma_prescriptionreminders_id, 2, false, 1, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminder, reminder.message);
      } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()()) && Overdue.isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime))) {
        this.addReminderevents(reminder.prescription_id, "dur_Reminder" + this.createLogicalId(remindersplotTime, reminder.epma_prescriptionreminders_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime), null, reminder.epma_prescriptionreminders_id, 1, false, 1, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminderdue, reminder.message);
      } else if (Overdue.isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime))) {
        this.addReminderevents(reminder.prescription_id, "dur_Reminder" + this.createLogicalId(remindersplotTime, reminder.epma_prescriptionreminders_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime), null, reminder.epma_prescriptionreminders_id, 0, false, 1, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminderoverdue, reminder.message);
      }
      if (reminder.repeattype == "h") remindersplotTime = moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime).add(reminder.repeatsize, "h");
      if (reminder.repeattype == "m") remindersplotTime = moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime).add(reminder.repeatsize, "m");
      if (reminder.repeattype == "d") remindersplotTime = moment__WEBPACK_IMPORTED_MODULE_1___default()(remindersplotTime).add(reminder.repeatsize, "d");
    }
  }
  AddReminders(eventStartDate, eventEndDate, Reminderprescription) {
    //  let overduetimeOther =overduetimeOther.add(this.appService.appConfig.defaultReminderOverdueTimePeriod, "hours");
    let start = moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStartDate).clone();
    let enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(eventEndDate).clone();
    (moment__WEBPACK_IMPORTED_MODULE_1___default());
    if (Reminderprescription) {
      let sortreminder = this.appService.CurrentReminderevents.sort((a, b) => new Date(a.eventStart).getTime() - new Date(b.eventStart).getTime()).filter(x => x.prescription_id == Reminderprescription.prescription_id);
      let pendingReminder = sortreminder.find(x => moment__WEBPACK_IMPORTED_MODULE_1___default()(x.eventStart).isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()()));
      if (pendingReminder) {
        pendingReminder.pending = true;
        this.appService.AllReminderevents.push(pendingReminder);
      }
    }
    for (let reminder of this.appService.Prescriptionreminders) {
      let Overdue = moment__WEBPACK_IMPORTED_MODULE_1___default()().add(-this.appService.appConfig.defaultReminderOverdueTimePeriod, 'h');
      if (!reminder.activationdatetime) {
        let administration = this.appService.Medicationadministration.filter(x => x.prescription_id == reminder.prescription_id).sort((a, b) => new Date(a.administrationstartime).getTime() - new Date(b.administrationstartime).getTime());
        if (administration.length > 0) {
          reminder.__calculatedactivationdatetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(administration[0].administrationstartime, "YYYY-MM-DD HH:mm").add(+reminder.activationinhours, "hours");
        } else {
          continue;
        }
      } else {
        reminder.__calculatedactivationdatetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime);
      }
      if (reminder.remindertype && reminder.remindertype == 1) {
        this.createRepeatReminder(start, enddate, reminder);
      } else if (reminder.remindertype && reminder.remindertype == 2) {
        this.createWithDoseReminder(reminder);
      } else {
        if (reminder.isacknowledged) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + reminder.epma_prescriptionreminders_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime), null, reminder.epma_prescriptionreminders_id, 3, false, 0, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.ReminderAcknowledged, reminder.message, false, reminder.issystem);
        } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()())) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + reminder.epma_prescriptionreminders_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime), null, reminder.epma_prescriptionreminders_id, 2, false, 0, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminder, reminder.message, false, reminder.issystem);
        } else if (moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()()) && Overdue.isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime))) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + reminder.epma_prescriptionreminders_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime), null, reminder.epma_prescriptionreminders_id, 1, false, 0, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminderdue, reminder.message, false, reminder.issystem);
        } else if (Overdue.isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime))) {
          this.addReminderevents(reminder.prescription_id, "dur_Reminder" + reminder.epma_prescriptionreminders_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.__calculatedactivationdatetime), null, reminder.epma_prescriptionreminders_id, 0, false, 0, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Reminderoverdue, reminder.message, false, reminder.issystem);
        }
      }
    }
    if (!this.isreportevents) {
      for (let reminder of this.appService.Prescriptionreminders.filter(x => !x.issystem && x.remindertype != 1 && x.remindertype != 2)) {
        if (this.appService.CurrentReminderevents.find(x => x.epma_prescriptionreminders_id != reminder.epma_prescriptionreminders_id && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.eventStart).isSame(moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime)) && x.prescription_id == reminder.prescription_id)) {
          let array = this.appService.CurrentReminderevents.filter(x => moment__WEBPACK_IMPORTED_MODULE_1___default()(x.eventStart).isSame(moment__WEBPACK_IMPORTED_MODULE_1___default()(reminder.activationdatetime)) && x.prescription_id == reminder.prescription_id);
          for (let obj of array) {
            this.appService.CurrentReminderevents.splice(this.appService.CurrentReminderevents.indexOf(obj), 1);
          }
          // this.appService.CurrentReminderevents= this.appService.CurrentReminderevents.filter(x=>x.epma_prescriptionreminders_id == reminder.epma_prescriptionreminders_id && ! moment(x.eventStart).isSame(moment(reminder.activationdatetime)) && x.prescription_id == reminder.prescription_id)
          if (array.find(x => x.type < 3)) {
            array = array.filter(x => x.type < 3);
            if (array[0].type == 2) {
              array[0].content = _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Multiple_Reminders;
              array[0].title = "Multiple Reminders";
            }
            if (array[0].type == 1) {
              array[0].content = _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Multiple_Reminders_With_The_Date;
              array[0].title = "Multiple Reminders";
            }
            if (array[0].type == 0) {
              array[0].content = _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Multiple_Reminders_One_Day_Has_Passed;
              array[0].title = "Multiple Reminders";
            }
            this.appService.CurrentReminderevents.push(array[0]);
          } else {
            array[0].content = _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Multiple_Reminders_Has_Been_Acknowledged;
            array[0].title = "Multiple Reminders3";
            this.appService.CurrentReminderevents.push(array[0]);
          }
        }
      }
    }
  }
  AddCIDurationLine(prescription, sortedArray) {
    this.appService.events = this.appService.events.filter(x => !(x.dose_id.includes("dur") && x.prescription_id == prescription.prescription_id));
    let length = sortedArray.length;
    sortedArray.forEach((value, index) => {
      // console.log(index); // 0, 1, 2
      // console.log(value); // 9, 2, 5
      if (!value.dose_id.includes("pause") && !value.dose_id.includes("end_")) {
        let linestartDatetime = value.eventStart;
        let LineEndline;
        if (index + 1 == length) {
          LineEndline = moment__WEBPACK_IMPORTED_MODULE_1___default()(this.timelineend);
        } else {
          LineEndline = sortedArray[index + 1].eventStart;
        }
        if (this.appService.Medicationadministration.find(x => x.administredinfusionrate == 0 && x.logicalid == value.dose_id)) {
          this.addevents(prescription.prescription_id, "durdoted" + index + prescription.prescription_id, linestartDatetime, LineEndline, prescription.__posology[0].posology_id, false, false, false, true, "<div class='PauseDurline'></div>", "");
        } else {
          this.addevents(prescription.prescription_id, "dur" + index + prescription.prescription_id, linestartDatetime, LineEndline, prescription.__posology[0].posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.durationline, "");
        }
      }
    });
  }
  CurrentPrescriptionFlowArray(prescription) {
    let currentPresctionStatus;
    let prescriptionEvents = this.appService.Medicationadministration.filter(e => e.prescription_id == prescription.prescription_id && !e.logicalid.includes("bolus_"));
    let latestevent = this.appService.events.filter(e => e.prescription_id == prescription.prescription_id && !e.dose_id.includes("dur") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent"));
    latestevent = latestevent.sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_1___default()(a.eventStart).valueOf() - moment__WEBPACK_IMPORTED_MODULE_1___default()(b.eventStart).valueOf());
    prescriptionEvents = prescriptionEvents.sort((a, b) => moment__WEBPACK_IMPORTED_MODULE_1___default()(a.administrationstartime).valueOf() - moment__WEBPACK_IMPORTED_MODULE_1___default()(b.administrationstartime).valueOf());
    if (prescription.__completed || this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == prescription.prescriptionstatus_id).status == "stopped" || this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == prescription.prescriptionstatus_id).status == "cancelled") {
      currentPresctionStatus = {
        start: this.timelinestart,
        end: this.timelineend,
        prescriptionid: prescription.prescription_id,
        content: "<strong>Stopped</strong>"
      };
    } else if (!prescriptionEvents.find(x => x.logicalid.startsWith("start_"))) {
      currentPresctionStatus = {
        start: this.timelinestart,
        end: this.timelineend,
        prescriptionid: prescription.prescription_id,
        content: "<strong>Not started</strong>"
      };
    } else if (prescriptionEvents.find(x => x.logicalid.startsWith("start_"))) {
      let content = "<strong>Currently: " + prescriptionEvents[prescriptionEvents.length - 1].administredinfusionrate + " " + prescription.__posology[0].infusionrateunits + "</strong>";
      if (latestevent[0].dose_id.startsWith("pause")) {
        content = "<strong>PAUSED-previously: " + prescriptionEvents[prescriptionEvents.length - 1].administredinfusionrate + " " + prescription.__posology[0].infusionrateunits + "</strong>";
      }
      currentPresctionStatus = {
        start: this.timelinestart,
        end: this.timelineend,
        prescriptionid: prescription.prescription_id,
        content: content
      };
    }
    this.appService.arrPrescriptionCurrentFlowRate.push(currentPresctionStatus);
  }
  AddStackClassEvent(prescription) {
    if (prescription.isinfusion && (prescription.__posology[0].infusiontypeid == 'ci' || prescription.__posology[0].infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca)) {
      this.CurrentPrescriptionFlowArray(prescription);
    }
    let prescriptionEvents = this.appService.events.filter(e => e.prescription_id == prescription.prescription_id && !e.dose_id.includes("dur") && !e.dose_id.includes("flowrate") && !e.content.includes("Administer_PRN") && !e.dose_id.includes("infusionevent"));
    /////////////////remove duplicate////////////////////////
    let temp = prescriptionEvents;
    prescriptionEvents = Array.from(new Set(temp.map(a => a.dose_id))).map(id => {
      return temp.find(a => a.dose_id === id);
    });
    //////////////////////////////////////////////////
    const sortedArray = prescriptionEvents.sort((a, b) => a.eventStart - b.eventStart);
    if (prescription.isinfusion && (prescription.__posology[0].infusiontypeid == 'ci' || prescription.__posology[0].infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca)) {
      this.AddCIDurationLine(prescription, sortedArray);
    }
    let EventIsStackTrue;
    let zoombooton;
    let priviousEvent;
    for (let pNext of sortedArray) {
      if (EventIsStackTrue) {
        let lastevent = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(EventIsStackTrue.eventStart, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let currentEvent = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(pNext.eventStart, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let diffMs = currentEvent.valueOf() - lastevent.valueOf();
        let diffrence = Math.round(diffMs / 60000);
        if (diffrence < 91) {
          if (priviousEvent && priviousEvent.stackclass != true) {
            //if there is allready a stack class in net event no need to add
            EventIsStackTrue.diffrence = diffrence;
            EventIsStackTrue.stackclass = true;
          }
          //check to add zoom button every 90 min diffrence
          if (zoombooton && Math.round((moment__WEBPACK_IMPORTED_MODULE_1___default()(EventIsStackTrue.eventStart).valueOf() - moment__WEBPACK_IMPORTED_MODULE_1___default()(zoombooton.eventStart).valueOf()) / 60000) < 40) {
            priviousEvent = EventIsStackTrue;
            EventIsStackTrue = pNext;
            continue;
          }
          zoombooton = {
            prescription_id: EventIsStackTrue.prescription_id,
            posology_id: EventIsStackTrue.posology_id,
            dose_id: "dur_Zoom" + EventIsStackTrue.dose_id,
            eventStart: moment__WEBPACK_IMPORTED_MODULE_1___default()(EventIsStackTrue.eventStart),
            eventEnd: null,
            prn: false,
            iscancel: false,
            doctorsorder: false,
            isinfusion: false,
            content: "<div class ='Zoombutton'></div>",
            title: "",
            admitdone: false,
            opacityclass: "",
            diffrence: diffrence,
            stackclass: false
          };
          this.appService.stackButtons.push(zoombooton);
        }
      } else {
        //first loop only when priviousEvent and EventIsStackTrue is undefind
        priviousEvent = pNext;
        EventIsStackTrue = pNext;
        continue;
      }
      priviousEvent = EventIsStackTrue;
      EventIsStackTrue = pNext;
    }
  }
  checkIFMOAisPrescrib(prescription) {
    let formularycode = prescription.__medications.find(x => x.isprimary).__codes.find(y => y.terminology == "formulary").code;
    //  let codeobject = this.appService.Prescription.find(x => x.prescription_id != prescription.prescription_id).__medications.find(y => y.isprimary == true).__codes.find(z => z.terminology == "formulary" && z.code == formularycode)
    let codeobject = this.appService.Prescription.filter(x => x.prescription_id != prescription.prescription_id && x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(x => x.context == _services_enum__WEBPACK_IMPORTED_MODULE_0__.PrescriptionContext.Inpatient).prescriptioncontext_id && x.__medications.find(y => y.isprimary == true).__codes.filter(z => z.terminology == "formulary" && z.code == formularycode).length != 0);
    if (codeobject && codeobject.length != 0) {
      return true; // MOA match and no need to show
    } else {
      return false; // Code not found and MOA prescription not prescribed
    }
  }
  AddPRNFutureLine(prescriptions) {
    let prnPrescriptions = prescriptions.filter(x => x.__posology.find(z => z.iscurrent && z.prn));
    for (let p of prnPrescriptions) {
      if (this.appService.events.find(x => x.prescription_id == p.prescription_id && x.admitdone == true && x.content != _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.EnterInError)) {
        let pres = this.appService.events.filter(x => x.prescription_id == p.prescription_id && x.admitdone == true && x.content != _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.EnterInError);
        if (pres) {
          const sortedArray = pres.sort((b, a) => a.eventStart - b.eventStart);
          let lastadmited = sortedArray[0];
          let enddate;
          if (p.__posology.find(x => x.iscurrent).frequency == "h") {
            enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(lastadmited.eventStart).add(p.__posology.find(x => x.iscurrent).frequencysize, 'hours'); // see the cloning?frequency
          } else {
            enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(lastadmited.eventStart).add(p.__posology.find(x => x.iscurrent).frequencysize, 'minutes');
          }
          if (p.__posology.find(x => x.posology_id == lastadmited.posology_id && x.iscurrent)) {
            this.addevents(lastadmited.prescription_id, "dur" + lastadmited.prescription_id, lastadmited.eventStart, enddate, lastadmited.posology_id, false, false, false, true, "<div class='divPRN'></div>", "PRN");
          }
        }
      }
    }
  }
  createEvents(eventStartDate, eventEndDate, isReportview = false, Reminderprescription = null, CreateWithheldEvents = false) {
    this.CreateWithheldEvents = CreateWithheldEvents;
    this.isreportevents = isReportview;
    if (!isReportview) {
      this.timelinestart = eventStartDate;
      this.timelineend = eventEndDate;
      this.appService.events = [];
      this.appService.CurrentReminderevents = [];
      this.appService.arrPrescriptionCurrentFlowRate = [];
      this.appService.stackButtons = [];
    } else {
      this.appService.AllReminderevents = [];
      this.appService.reportData = [];
    }
    this.appService.FilteredPrescription = this.appService.FilteredPrescription.filter(x => x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(x => x.context == _services_enum__WEBPACK_IMPORTED_MODULE_0__.PrescriptionContext.Admission).prescriptioncontext_id || x.prescriptioncontext_id == null || x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(x => x.context == _services_enum__WEBPACK_IMPORTED_MODULE_0__.PrescriptionContext.Inpatient).prescriptioncontext_id);
    let posologyloopCount = 0;
    let loopPrescription = [];
    if (Reminderprescription) {
      loopPrescription.push(this.appService.FilteredPrescription.find(x => x.prescription_id == Reminderprescription.prescription_id));
    } else {
      loopPrescription = this.appService.FilteredPrescription;
    }
    for (let prescription of loopPrescription) {
      this.bufferambertime = this.appService.buffertimeAmber;
      if (prescription.__medications.find(x => x.isprimary).iscritical) {
        this.bufferambertime = this.appService.criticalDrugbuffertimeAmber;
      }
      this.prescriptionStatus = "";
      if (prescription.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(x => x.context == _services_enum__WEBPACK_IMPORTED_MODULE_0__.PrescriptionContext.Admission).prescriptioncontext_id) {
        if (this.checkIFMOAisPrescrib(prescription)) {
          this.appService.FilteredPrescription = this.appService.FilteredPrescription.filter(x => x.prescription_id != prescription.prescription_id);
          continue;
        } else {
          continue;
        }
      }
      // setting max and min event date 
      // this.MaxEventDate=  moment(eventEndDate);
      // this.minEventDate = moment(eventStartDate);
      // this.MaxEventDate.set({ hour: 23, minute: 59, second: 0, millisecond: 0 })
      // this.minEventDate.set({ hour: 0, minute: 0, second: 0, millisecond: 0 })
      if (prescription.prescriptionstatus_id != null && prescription.prescriptionstatus_id != "") {
        this.prescriptionStatus = this.appService.MetaPrescriptionstatus.find(x => x.prescriptionstatus_id == prescription.prescriptionstatus_id).status;
      }
      for (let pslg of prescription.__posology) {
        posologyloopCount = 0;
        if (this.appService.encounter.dischargedatetime && moment__WEBPACK_IMPORTED_MODULE_1___default()(eventEndDate).isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(this.appService.encounter.dischargedatetime))) {
          this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(this.appService.encounter.dischargedatetime);
        } else {
          this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(eventEndDate);
          this.MaxEventDate.set({
            hour: 23,
            minute: 59,
            second: 0,
            millisecond: 0
          });
        }
        this.minEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStartDate);
        this.minEventDate.set({
          hour: 0,
          minute: 0,
          second: 0,
          millisecond: 0
        });
        if (pslg.prn) {
          // create all administer events only onces
          if (posologyloopCount == 0) {
            posologyloopCount = 1;
            this.addAdministeredEvent(prescription);
          }
          if (pslg.iscurrent && this.prescriptionStatus != "suspended" && this.prescriptionStatus != "stopped" && this.prescriptionStatus != "cancelled") {
            this.addevents(prescription.prescription_id, pslg.__dose[0].dose_id, new Date(), null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administer_PRN, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administer_PRN);
            this.PRNids.push(pslg.__dose[0].dose_id);
          }
          // if (this.prescriptionStatus != "stopped" && this.prescriptionStatus != "cancelled") {
          // }
        } else if (prescription.isinfusion) {
          //  if ( this.prescriptionStatus != "cancelled") {
          this.addInfutionEvent(prescription, pslg);
          //  }
        } else {
          let temp = this.appService.TimelineArray;
          this.currentDate = new Date();
          // if (this.prescriptionStatus != "stopped" && this.prescriptionStatus != "cancelled") {
          if (posologyloopCount == 0) {
            posologyloopCount = 1;
            this.addAdministeredEvent(prescription);
          }
          if (pslg.frequency == "protocol") {
            this.addProtocolEvents(prescription, pslg, this.prescriptionStatus);
          } else {
            this.addLogicalEvent(prescription, pslg, this.prescriptionStatus);
          }
        }
      }
      this.AddStackClassEvent(prescription);
    }
    let temp = this.appService.events;
    this.appService.events = Array.from(new Set(temp.map(a => a.dose_id))).map(id => {
      return temp.find(a => a.dose_id === id);
    });
    if (isReportview) {
      let reportData = this.appService.reportData;
      this.appService.reportData = Array.from(new Set(reportData.map(a => a.dose_id))).map(id => {
        return reportData.find(a => a.dose_id === id);
      });
    }
    this.AddReminders(eventStartDate, eventEndDate, Reminderprescription);
    this.AddPRNFutureLine(this.appService.FilteredPrescription);
  }
  addProtocolEvents(prescription, pslg, prescriptionStatus) {
    let repitTimes = pslg.repeatprotocoltimes;
    let minemumDate = new Date(Math.min.apply(null, pslg.__dose.map(function (e) {
      return new Date(e.dosestartdatetime);
    })));
    let maximumDate = new Date(Math.max.apply(null, pslg.__dose.map(function (e) {
      return new Date(e.dosestartdatetime);
    })));
    let dateDiff = 0;
    do {
      // to repete whole protocall 1 ti
      for (let dose of pslg.__dose) {
        if (moment__WEBPACK_IMPORTED_MODULE_1___default()(this.minEventDate) < moment__WEBPACK_IMPORTED_MODULE_1___default()(dose.dosestartdatetime) && moment__WEBPACK_IMPORTED_MODULE_1___default()(dose.dosestartdatetime) <= moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate)) {
          let ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(dose.dosestartdatetime);
          ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(dateDiff, 'd');
          const logicalId = this.createLogicalId(ploteDate, dose.dose_id);
          if (!this.appService.Medicationadministration.find(x => x.logicalid == logicalId)) {
            if (!(!dose.dosesize && !dose.strengthdenominator && !dose.strengthneumerator && !dose.descriptivedose)) {
              let enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate);
              if (prescriptionStatus == "suspended" || prescriptionStatus == "stopped" || prescriptionStatus == "cancelled") {
                enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon);
              }
              if (moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate))) {
                this.createLogicalevents(pslg, ploteDate, dose);
              }
            }
          }
        }
      }
      dateDiff = dateDiff + moment__WEBPACK_IMPORTED_MODULE_1___default()(maximumDate).diff(moment__WEBPACK_IMPORTED_MODULE_1___default()(minemumDate), 'days') + 1;
      repitTimes = repitTimes - 1;
      if (repitTimes < 1) {
        break;
      }
    } while (!pslg.repeatlastday);
    ///////////////// loo end ////////////////////////
    // repeate only last day
    if (pslg.repeatlastday) {
      let lastdose = pslg.__dose[pslg.__dose.length - 1];
      let dose = [];
      for (let x of pslg.__dose) {
        if (moment__WEBPACK_IMPORTED_MODULE_1___default()(lastdose.dosestartdatetime).format('DD') == moment__WEBPACK_IMPORTED_MODULE_1___default()(x.dosestartdatetime).format('DD')) {
          if (x.dosesize && x.dosesize != "0") {
            dose.push(x);
          }
        }
      }
      //  let dose = pslg.__dose.filter(x=> moment(x.dosestartdatetime, "MM/DD/YYYY").format('DD') == moment(tempdose.dosestartdatetime).format('DD'))
      for (let plotdose of dose) {
        let ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(plotdose.dosestartdatetime);
        let repeatlastdayuntil = moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.repeatlastdayuntil);
        if (moment__WEBPACK_IMPORTED_MODULE_1___default()(repeatlastdayuntil, "MM/DD/YYYY") < moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate, "MM/DD/YYYY")) {
          this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.repeatlastdayuntil);
          this.MaxEventDate.set({
            hour: 0,
            minute: 0,
            second: 0,
            millisecond: 0
          });
        }
        if (prescriptionStatus == "suspended" || prescriptionStatus == "stopped" || prescriptionStatus == "cancelled") {
          this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon);
        }
        ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(1, 'd');
        while (moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate))) {
          const logicalId = this.createLogicalId(ploteDate, plotdose.dose_id);
          if (!this.appService.Medicationadministration.find(x => x.logicalid == logicalId)) {
            if (pslg.iscurrent || moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate) >= ploteDate) {
              this.createLogicalevents(pslg, ploteDate, plotdose);
            }
          }
          ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(1, 'd');
        }
      }
    }
  }
  addLogicalEvent(prescription, pslg, prescriptionStatus) {
    let daystoplot = JSON.parse(pslg.daysofweek);
    for (let dose of pslg.__dose) {
      let ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(dose.dosestartdatetime);
      let enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate);
      if (prescriptionStatus == "suspended" || prescriptionStatus == "stopped" || prescriptionStatus == "cancelled") {
        if (pslg.prescriptionenddate && moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon))) {
          enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate);
        } else {
          enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon);
        }
        let dosetransfer = this.appService.DoseEvents.filter(x => x.posology_id == pslg.posology_id && x.eventtype == "Transfer");
        dosetransfer.sort((b, a) => new Date(a.startdatetime).getTime() - new Date(b.startdatetime).getTime());
        for (let transEvent of dosetransfer) {
          //finding max event transferdate before stoping  
          if (moment__WEBPACK_IMPORTED_MODULE_1___default()(transEvent.startdatetime).isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon)) && moment__WEBPACK_IMPORTED_MODULE_1___default()(transEvent.dosedatetime).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon))) {
            enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(transEvent.startdatetime);
            break;
          }
        }
      }
      if (!this.CreateWithheldEvents && moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate) <= moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate)) {
        this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate);
      }
      let futureTransferevent = this.appService.DoseEvents.filter(x => x.dose_id == dose.dose_id && x.posology_id == pslg.posology_id && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.startdatetime).isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate)) && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.dosedatetime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate)));
      for (let k of futureTransferevent) {
        if (prescription.__posology.find(x => x.posology_id == k.posology_id)) {
          this.createLogicalevents(pslg, moment__WEBPACK_IMPORTED_MODULE_1___default()(k.startdatetime), dose);
          // addfutureevent.push(k);
        }
      }
      if (dose.isadditionaladministration) {
        // if isadditional administration not need to loop till date   
        const logicalId = this.createLogicalId(ploteDate, dose.dose_id);
        if (!this.appService.Medicationadministration.find(x => x.logicalid == logicalId)) {
          if (pslg.iscurrent || moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate) > ploteDate) {
            this.createLogicalevents(pslg, ploteDate, dose);
          }
        }
      } else {
        while (moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate, "MM/DD/YYYY HH") <= moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate, "MM/DD/YYYY HH")) {
          const logicalId = this.createLogicalId(ploteDate, dose.dose_id);
          if (!this.appService.Medicationadministration.find(x => x.logicalid == logicalId)) {
            if (daystoplot.indexOf(moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).format('dddd')) > -1 || daystoplot.length == 0) {
              if (moment__WEBPACK_IMPORTED_MODULE_1___default()(this.minEventDate, "MM/DD/YYYY") < moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate, "MM/DD/YYYY")) {
                if (pslg.iscurrent || moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate) >= ploteDate) {
                  this.createLogicalevents(pslg, ploteDate, dose);
                  if (pslg.frequency == "stat") {
                    break;
                  }
                }
              }
            } else {
              //Not in the array
            }
          }
          if (pslg.frequency == "stat") {
            break;
          }
          if (pslg.dosingdaysfrequencysize == 0) {
            ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(1, 'd');
          } else {
            if (pslg.dosingdaysfrequency == "days") {
              ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(pslg.dosingdaysfrequencysize, 'd');
            } else if (pslg.dosingdaysfrequency == "weeks") {
              ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(pslg.dosingdaysfrequencysize, 'w');
            } else if (pslg.dosingdaysfrequency == "months") {
              ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).add(pslg.dosingdaysfrequencysize, 'M');
            }
          }
        }
      }
    }
  }
  createLogicalevents(pslg, ploteDate, dose) {
    let logical_ID = this.createLogicalId(ploteDate, dose.dose_id);
    let posology = pslg;
    if (moment__WEBPACK_IMPORTED_MODULE_1___default()(posology.prescriptionstartdate) > moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate)) {
      if (!dose.isadditionaladministration) {
        return;
      }
    }
    let doseprescription = this.appService.Prescription.find(x => x.prescription_id == dose.prescription_id);
    // Checking if dose required doctors or and also if doctor has not yet conform isdoctorsorderconfirmed shoud be false
    let isdoseCancle = false;
    let canceldose;
    let doctorcomporm = this.appService.DoseEvents.find(x => x.logicalid == logical_ID && x.eventtype == "doconfirm") ? true : false;
    let isTitrationDone = this.appService.DoseEvents.find(x => x.dose_id == null && x.eventtype == "titration" && x.posology_id == pslg.posology_id && (moment__WEBPACK_IMPORTED_MODULE_1___default()(x.titrateduntildatetime) >= moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate) || x.titrateduntildatetime == null)) ? true : false;
    if (!isTitrationDone) {
      isTitrationDone = this.appService.DoseEvents.find(x => x.dose_id == dose.dose_id && x.eventtype == "titration" && x.logicalid == logical_ID && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.titrateduntildatetime).format("YYYYMMDDHHmm") == moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate).format("YYYYMMDDHHmm")) ? true : false;
    }
    if (this.appService.DoseEvents.filter(x => x.logicalid == logical_ID && x.eventtype != "Undo").length > 0) {
      isdoseCancle = this.appService.DoseEvents.filter(x => x.logicalid == logical_ID)[0].eventtype == "Cancel" ? true : false;
      canceldose = this.appService.DoseEvents.filter(x => x.logicalid == logical_ID)[0];
    }
    let dosetransferDate = this.appService.DoseEvents.find(x => x.logicalid == logical_ID && x.eventtype == "Transfer");
    if (dosetransferDate) {
      ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDate.dosedatetime);
      if (moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate) <= ploteDate) {
        return;
      }
    }
    dosetransferDate = this.appService.DoseEvents.find(x => x.logicalid == logical_ID && x.eventtype == "AdminTransfer");
    if (dosetransferDate) {
      ploteDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDate.dosedatetime);
    }
    /////////////////////////////////////
    let current = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(new Date(), (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
    let start = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(ploteDate, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
    let diffMs = start.valueOf() - current.valueOf();
    let diffMins = Math.round(diffMs / 60000); // minutes
    ///////////////////////////////
    if (isdoseCancle) {
      // if (posology.doctorsorder) {
      if (canceldose.comments == "Medication suspended") {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, doctorcomporm, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_withheld_by_doctor, "Withheld by prescriber");
      } else {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, doctorcomporm, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_withheld_by_doctor, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_withheld_by_doctor);
      }
      // }
      // else {
      //     this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn,
      //         isdoseCancle, doctorcomporm, false, contents.Cancelled)
      // }
    } else if (doseprescription.titration && !isTitrationDone && !isdoseCancle) {
      if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, true, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_requires_doctors_confirmation_Due, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_requires_doctors_confirmation_Due);
      } else if (diffMins <= -this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, true, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_requires_doctors_confirmation_Late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_requires_doctors_confirmation_Late);
      } else if (diffMins >= this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, true, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_requires_doctors_confirmation_Planned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_requires_doctors_confirmation_Planned);
      }
    } else if (posology.doctorsorder && !doctorcomporm && !isdoseCancle) {
      if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, true, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_requires_doctors_confirmation_Due, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_requires_doctors_confirmation_Due);
      } else if (diffMins <= -this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, true, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_requires_doctors_confirmation_Late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_requires_doctors_confirmation_Late);
      } else if (diffMins >= this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, true, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_requires_doctors_confirmation_Planned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_requires_doctors_confirmation_Planned);
      }
    }
    // check if dose not cancel and even if doctor order is required in dose order is conformed
    else if (!isdoseCancle) {
      if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Due_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Due_Administration);
      } else if (diffMins <= -this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Late_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Late_Administration);
      } else if (diffMins >= this.bufferambertime) {
        this.addevents(dose.prescription_id, logical_ID, ploteDate, null, dose.posology_id, posology.prn, isdoseCancle, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Planned_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Planned_Administration);
      }
    }
  }
  addAdministeredEvent(Prescription) {
    for (let medicationadministration of this.appService.Medicationadministration.filter(x => x.prescription_id == Prescription.prescription_id)) {
      if (moment__WEBPACK_IMPORTED_MODULE_1___default()(this.minEventDate) < moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.administrationstartime)) {
        // if (true) {
        let pslg = Prescription.__posology.find(x => x.posology_id == medicationadministration.posology_id);
        if (!pslg) {
          this.addAdministeredEventForDeletedPSLG(medicationadministration);
          continue;
        }
        if (medicationadministration.isenterinerror) {
          this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.EnterInError, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.EnterInError, true);
          continue;
        }
        let plannedtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.planneddatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let administeredtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.administrationstartime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let diffMs = administeredtime.valueOf() - plannedtime.valueOf();
        let diffMins = Math.round(diffMs / 60000); // minutes
        // Check the statuse is defer
        let plannedinfustionValue = +medicationadministration.planneddosesize;
        let administredinfusionValue = +medicationadministration.administreddosesize;
        let maxdose = +medicationadministration.planneddosesizerangemax;
        if (pslg.dosetype == "units") {
          plannedinfustionValue = +medicationadministration.planneddosesize;
          administredinfusionValue = +medicationadministration.administreddosesize;
        } else if (pslg.dosetype == "strength") {
          plannedinfustionValue = +medicationadministration.plannedstrengthneumerator;
          administredinfusionValue = +medicationadministration.administeredstrengthneumerator;
        } else {
          // for descriptive no need to compare
          plannedinfustionValue = 0;
          administredinfusionValue = 0;
        }
        if (medicationadministration.adminstrationstatus == "defer") {
          this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Defered, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Defered, true);
        }
        //-- if statuse notgiven
        else if (medicationadministration.adminstrationstatus == "notgiven") {
          this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Failed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Failed, true);
        }
        // for prn cannot be late or early
        else if (pslg.prn) {
          if (plannedinfustionValue == administredinfusionValue) {
            this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Completed_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Completed_Administration, true);
          } else {
            this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_is_differnt_from_prescribed, true);
          }
        }
        //-- if administed and statuse given or self given
        else {
          //On time administered ---------------------------------------------------------------------------
          if (diffMins > -this.appService.bufferAdministered && diffMins < this.appService.bufferAdministered) {
            /// if diffrentproduct is administer
            if (medicationadministration.isdifferentproductadministered) {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_Administered_Is_A_Different_Product_From_Prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_Administered_Is_A_Different_Product_From_Prescribed, true);
            }
            // cheching Dose administered is differnt from prescribed
            else if (maxdose && maxdose > 0) {
              if (administredinfusionValue >= plannedinfustionValue && maxdose >= administredinfusionValue) {
                this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Completed_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Completed_Administration, true);
              } else {
                this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_is_differnt_from_prescribed, true);
              }
            } else if (plannedinfustionValue == administredinfusionValue) {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Completed_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Completed_Administration, true);
            } else {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_is_differnt_from_prescribed, true);
            }
          }
          // early dose Administered ---------------------------------------------------------------------------
          else if (diffMins <= -this.appService.bufferAdministered) {
            //   cheching Administered early  but Dose administered early is differnt from prescribed
            if (medicationadministration.isdifferentproductadministered) {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_Administered_Early_Is_A_Different_Product_From_Prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_Administered_Early_Is_A_Different_Product_From_Prescribed, true);
            } else if (maxdose && maxdose > 0) {
              if (administredinfusionValue >= plannedinfustionValue && maxdose >= administredinfusionValue) {
                this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_early, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_early, true);
              } else {
                this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_early_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_early_is_differnt_from_prescribed, true);
              }
            } else if (plannedinfustionValue == administredinfusionValue) {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_early, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_early, true);
            } else {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_early_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_early_is_differnt_from_prescribed, true);
            }
          }
          // late dose Administered -----------------------------------------------------------------------------
          else if (diffMins >= -this.appService.bufferAdministered) {
            if (medicationadministration.isdifferentproductadministered) {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_Administered_Late_Is_A_Different_Product_From_Prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_Administered_Late_Is_A_Different_Product_From_Prescribed, true);
            }
            //   cheching Administered early  but Dose administered early is differnt from prescribed
            else if (maxdose && maxdose > 0) {
              if (administredinfusionValue >= plannedinfustionValue && maxdose >= administredinfusionValue) {
                this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_late, true);
              } else {
                this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_late_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_late_is_differnt_from_prescribed, true);
              }
            } else if (plannedinfustionValue == administredinfusionValue) {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_late, true);
            } else {
              this.addevents(pslg.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_late_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_late_is_differnt_from_prescribed, true);
            }
          }
        }
      }
    }
  }
  addAdministeredEventForDeletedPSLG(medicationadministration) {
    if (moment__WEBPACK_IMPORTED_MODULE_1___default()(this.minEventDate) < moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.administrationstartime)) {
      // if (true) {
      let plannedtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.planneddatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
      let administeredtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.administrationstartime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
      let diffMs = administeredtime.valueOf() - plannedtime.valueOf();
      let diffMins = Math.round(diffMs / 60000); // minutes
      // Check the statuse is defer
      let plannedinfustionValue = +medicationadministration.planneddosesize;
      let administredinfusionValue = +medicationadministration.administreddosesize;
      let maxdose = +medicationadministration.planneddosesizerangemax;
      if (plannedinfustionValue == 0) {
        plannedinfustionValue = +medicationadministration.plannedstrengthneumerator;
        administredinfusionValue = +medicationadministration.administeredstrengthneumerator;
      } else {
        // for descriptive no need to compare
        plannedinfustionValue = 0;
        administredinfusionValue = 0;
      }
      if (medicationadministration.adminstrationstatus == "defer") {
        this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Defered, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Defered, true);
      }
      //-- if statuse notgiven
      else if (medicationadministration.adminstrationstatus == "notgiven") {
        this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Failed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Failed, true);
      }
      // for prn cannot be late or early
      else if (false) {}
      //-- if administed and statuse given or self given
      else {
        //On time administered ---------------------------------------------------------------------------
        if (diffMins > -this.appService.bufferAdministered && diffMins < this.appService.bufferAdministered) {
          // cheching Dose administered is differnt from prescribed
          if (maxdose && maxdose > 0) {
            if (administredinfusionValue >= plannedinfustionValue && maxdose >= administredinfusionValue) {
              this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Completed_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Completed_Administration, true);
            } else {
              this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_is_differnt_from_prescribed, true);
            }
          } else if (plannedinfustionValue == administredinfusionValue) {
            this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Completed_Administration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Completed_Administration, true);
          } else {
            this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_is_differnt_from_prescribed, true);
          }
        }
        // early dose Administered ---------------------------------------------------------------------------
        else if (diffMins <= -this.appService.bufferAdministered) {
          //   cheching Administered early  but Dose administered early is differnt from prescribed
          if (maxdose && maxdose > 0) {
            if (administredinfusionValue >= plannedinfustionValue && maxdose >= administredinfusionValue) {
              this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_early, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_early, true);
            } else {
              this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_early_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_early_is_differnt_from_prescribed, true);
            }
          } else if (plannedinfustionValue == administredinfusionValue) {
            this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_early, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_early, true);
          } else {
            this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_early_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_early_is_differnt_from_prescribed, true);
          }
        }
        // late dose Administered -----------------------------------------------------------------------------
        else if (diffMins >= -this.appService.bufferAdministered) {
          //   cheching Administered early  but Dose administered early is differnt from prescribed
          if (maxdose && maxdose > 0) {
            if (administredinfusionValue >= plannedinfustionValue && maxdose >= administredinfusionValue) {
              this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_late, true);
            } else {
              this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_late_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_late_is_differnt_from_prescribed, true);
            }
          } else if (plannedinfustionValue == administredinfusionValue) {
            this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_Completed_late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_Completed_late, true);
          } else {
            this.addevents(medicationadministration.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Dose_administered_late_is_differnt_from_prescribed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Dose_administered_late_is_differnt_from_prescribed, true);
          }
        }
      }
    }
  }
  addevents(prescription_id, dose_id, eventStart, eventEnd, posology_id, prn, iscancel, doctorsorder, isinfusion, content, title, admitdone = false) {
    let titration = this.appService.Prescription.find(x => x.prescription_id == prescription_id).titration;
    let opacityclass = "";
    if (eventEnd == null) {
      opacityclass = this.iseventinpatientaway(moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStart));
    }
    if (this.isreportevents) {
      this.appService.reportData.push({
        prescription_id: prescription_id,
        posology_id: posology_id,
        dose_id: dose_id,
        eventStart: moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStart),
        eventEnd: eventEnd,
        prn: prn,
        iscancel: iscancel,
        doctorsorder: doctorsorder,
        isinfusion: isinfusion,
        content: content,
        title: title,
        admitdone: admitdone,
        titration: titration
      });
    } else {
      this.appService.events.push({
        prescription_id: prescription_id,
        posology_id: posology_id,
        dose_id: dose_id,
        eventStart: moment__WEBPACK_IMPORTED_MODULE_1___default()(eventStart),
        eventEnd: eventEnd,
        prn: prn,
        iscancel: iscancel,
        doctorsorder: doctorsorder,
        isinfusion: isinfusion,
        content: content,
        title: title,
        admitdone: admitdone,
        opacityclass: opacityclass,
        diffrence: 0,
        stackclass: false
      });
    }
  }
  iseventinpatientaway(eventdate) {
    let iseventInaway = false;
    for (let x of this.appService.PersonAwayPeriod) {
      if (x.isenabled) {
        let sdate = moment__WEBPACK_IMPORTED_MODULE_1___default()(x.awayfrom);
        let edate = moment__WEBPACK_IMPORTED_MODULE_1___default()(x.awayto);
        if (moment__WEBPACK_IMPORTED_MODULE_1___default()(eventdate).isBetween(sdate, edate, undefined, '[]')) {
          iseventInaway = true;
          break;
        }
      }
    }
    if (iseventInaway) {
      return " addopacity";
    } else {
      return "";
    }
  }
  createLogicalId(dosedate, dose_id) {
    let logicalid = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosedate).format('YYYYMMDDHHmm') + "_" + dose_id.toString();
    return logicalid;
  }
  makeId(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
  addInfutionEvent(prescription, pslg) {
    // let infutionlist = this.appService.Dose.filter(x => x.prescription_id == prescription.prescription_id && x.continuityid == null);
    let infutionlist = pslg.__dose.filter(x => x.continuityid == null);
    this.PlotNonDoseAdminsterEvensForCI(prescription);
    for (let dose of infutionlist) {
      let allDoses = pslg.__dose.filter(x => x.continuityid == dose.dose_id);
      allDoses.sort((b, a) => new Date(b.dosestartdatetime).getTime() - new Date(a.dosestartdatetime).getTime());
      this.createAdmiseredInfusionEvents(prescription, dose, allDoses);
      this.createInfusioniEvents(prescription, pslg, dose, allDoses);
    }
  }
  createInfusioniEvents(prescription, pslg, startDose, allDoses) {
    let daystoplot = JSON.parse(pslg.daysofweek);
    let EndDosetime;
    if (prescription.linkedinfusionid) {
      let linkedinfusion = this.appService.Prescription.find(x => x.prescription_id == prescription.linkedinfusionid);
      if (!this.appService.InfusionEvents.find(x => x.posology_id == linkedinfusion.__posology[0].posology_id && x.eventtype == "endinfusion")) {
        return;
      }
    }
    if (allDoses.length > 0) {
      EndDosetime = allDoses[allDoses.length - 1].doseenddatatime;
    } else {
      EndDosetime = startDose.doseenddatatime;
    }
    let startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDose.dosestartdatetime);
    let enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate);
    if (moment__WEBPACK_IMPORTED_MODULE_1___default()(enddate, "MM/DD/YYYY") < moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate, "MM/DD/YYYY")) {
      this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate);
    }
    if (this.prescriptionStatus == "suspended" || this.prescriptionStatus == "stopped" || this.prescriptionStatus == "cancelled") {
      this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon);
      let futureTransferevent = this.appService.DoseEvents.filter(x => x.dose_id == startDose.dose_id && x.posology_id == pslg.posology_id && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.startdatetime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon)) && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.dosedatetime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon)));
      for (let k of futureTransferevent) {
        if (prescription.__posology.find(x => x.posology_id == k.posology_id)) {
          if (moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(k.startdatetime))) {
            this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(k.startdatetime);
          }
        }
      }
    } else {
      let futureTransferevent = this.appService.DoseEvents.filter(x => x.dose_id == startDose.dose_id && x.posology_id == pslg.posology_id && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.startdatetime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate)) && moment__WEBPACK_IMPORTED_MODULE_1___default()(x.dosedatetime).isSameOrBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate)));
      for (let k of futureTransferevent) {
        if (prescription.__posology.find(x => x.posology_id == k.posology_id)) {
          if (moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate).isBefore(moment__WEBPACK_IMPORTED_MODULE_1___default()(k.startdatetime))) {
            this.MaxEventDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(k.startdatetime);
          }
        }
      }
    }
    // if ( =="ci" ||
    // this.appService.Prescription.find(p=>p.prescription_id == prescription.prescription_id).__posology.find(po=>po.posology_id==pslg.posology_id).infusiontypeid =="rate" && 
    // this.appService.Prescription.find(p=>p.prescription_id == prescription.prescription_id).__posology.find(po=>po.posology_id==pslg.posology_id).infusiontypeid =="variable"
    // ) {
    //     this.MaxEventDate = moment().add(8, 'days');
    // }
    let repeatDays = 0;
    while (moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime, "MM/DD/YYYY ") <= moment__WEBPACK_IMPORTED_MODULE_1___default()(this.MaxEventDate, "MM/DD/YYYY")) {
      if (daystoplot.indexOf(moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).format('dddd')) > -1 || daystoplot.length == 0) {
        //no need to add days in the choose array
      } else {
        startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(1, 'd');
        EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(1, 'd');
        continue;
      }
      if (startDosetime >= moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionstartdate)) {
        if (pslg.infusiontypeid == 'ci' || pslg.infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca || moment__WEBPACK_IMPORTED_MODULE_1___default()(this.minEventDate, "MM/DD/YYYY") < moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime, "MM/DD/YYYY")) {
          let startFlowrate = startDose.infusionrate;
          const logicalId = this.createLogicalId(startDosetime, startDose.dose_id);
          let administeredevent = this.appService.Medicationadministration.find(x => x.logicalid == "start_" + logicalId && x.dose_id == startDose.dose_id);
          if (administeredevent && administeredevent.adminstrationstatus == "notgiven") {
            repeatDays++;
            if (pslg.prescriptionenddate == EndDosetime) {
              // more then 24 hource so no repete and breck
              break;
            }
            startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(1, 'd');
            EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(1, 'd');
            continue;
          }
          let plotstartDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime);
          let dosetransferDate = this.appService.DoseEvents.find(x => x.logicalid == "start_" + logicalId && x.eventtype == "Transfer");
          if (dosetransferDate) {
            plotstartDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDate.dosedatetime);
            if (moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionenddate) <= plotstartDosetime) {
              break;
            }
          }
          ///Infution trans or not if cancel 
          let isdoseCancle = false;
          const logicalId_1 = this.createLogicalId(startDosetime, startDose.dose_id);
          if (this.appService.DoseEvents.filter(x => x.logicalid == "start_" + logicalId_1).length > 0) {
            isdoseCancle = this.appService.DoseEvents.filter(x => x.logicalid == "start_" + logicalId_1)[0].eventtype == "Cancel" ? true : false;
          }
          if (isdoseCancle) {
            this.addevents(startDose.prescription_id, "start_" + this.createLogicalId(startDosetime, startDose.dose_id), plotstartDosetime, null, pslg.posology_id, false, isdoseCancle, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Administration_withheld_by_doctor_Infution, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Administration_withheld_by_doctor_Infution);
            if (pslg.prescriptionenddate == EndDosetime) {
              // more then 24 hource so no repete and breck
              break;
            }
            startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(1, 'd');
            EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(1, 'd');
            continue;
          }
          let diffMins = this.getTimeDiff(plotstartDosetime);
          const logicalId_2 = this.createLogicalId(startDosetime, startDose.dose_id);
          dosetransferDate = this.appService.DoseEvents.find(x => x.logicalid == "start_" + logicalId_2 && x.eventtype == "AdminTransfer");
          if (dosetransferDate) {
            plotstartDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDate.dosedatetime);
          }
          if (administeredevent && prescription.infusiontype_id == "bolus") {
            startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(1, 'd');
            EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(1, 'd');
            continue;
          }
          //Flow rate for start node
          if (!administeredevent && prescription.infusiontype_id != "bolus" && this.prescriptionStatus != "stopped") {
            let doserate = startDose.infusiondoserate == null ? startDose.infusionrate + " " + pslg.infusionrateunits : startDose.infusiondoserate + " " + startDose.infusiondoserateunits;
            this.addevents(startDose.prescription_id, "flowrate_" + this.createLogicalId(startDosetime, startDose.dose_id), plotstartDosetime, null, startDose.posology_id, false, false, false, true, "<div class='durationFlorate'>" + doserate + "</div>", "");
          }
          /////////////////////////
          if (administeredevent && this.prescriptionStatus != "suspended" && this.prescriptionStatus != "stopped" && this.prescriptionStatus != "cancelled") {
            let startcount = this.appService.InfusionEvents.filter(x => x.posology_id == pslg.posology_id && x.eventtype == "administered").length - this.appService.InfusionEvents.filter(x => x.posology_id == pslg.posology_id && x.eventtype == "endinfusion").length;
            if (startcount >= 1) {
              this.addevents(prescription.prescription_id, "infusionevent" + prescription.prescription_id, new Date(), null, pslg.posology_id, pslg.prn, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Recordadditionaladministration, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Recordadditionaladministration);
              this.PRNids.push("infusionevent" + prescription.prescription_id);
            }
            this.addevents(startDose.prescription_id, "flowrate_" + this.createLogicalId(startDosetime, startDose.dose_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(administeredevent.administrationstartime), null, startDose.posology_id, false, false, false, true, "<div class='durationFlorate'>" + administeredevent.administredinfusionrate + " " + pslg.infusionrateunits + "</div>", "");
          } else {
            if (!administeredevent) {
              if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
                this.addevents(startDose.prescription_id, "start_" + this.createLogicalId(startDosetime, startDose.dose_id), plotstartDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Infusiondue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Infusiondue);
              } else if (diffMins <= -this.bufferambertime) {
                this.addevents(startDose.prescription_id, "start_" + this.createLogicalId(startDosetime, startDose.dose_id), plotstartDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionLate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionLate);
              } else if (diffMins >= this.bufferambertime) {
                this.addevents(startDose.prescription_id, "start_" + this.createLogicalId(startDosetime, startDose.dose_id), plotstartDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Infusionplanned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Infusionplanned);
              }
            }
          }
          let plotEndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime);
          const logicalId_3 = this.createLogicalId(EndDosetime, startDose.dose_id);
          let dosetransferDateend = this.appService.DoseEvents.find(x => x.logicalid == "end_" + logicalId_3 && x.eventtype == "Transfer");
          if (dosetransferDateend) {
            plotEndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDateend.dosedatetime);
          }
          // admin transfer override transfer
          const logicalId_4 = this.createLogicalId(EndDosetime, startDose.dose_id);
          dosetransferDateend = this.appService.DoseEvents.find(x => x.logicalid == "end_" + logicalId_4 && x.eventtype == "AdminTransfer");
          if (dosetransferDateend) {
            plotEndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDateend.dosedatetime);
          }
          diffMins = this.getTimeDiff(plotEndDosetime);
          if (prescription.infusiontype_id != "bolus") {
            const logicalId_5 = this.createLogicalId(EndDosetime, startDose.dose_id);
            let infusionEndEvent = this.appService.InfusionEvents.find(x => x.logicalid == "end_" + logicalId_5 && x.eventtype == "endinfusion");
            if (EndDosetime) {
              ////////////////////////
              // if infusion is comlete
              if (pslg.infusiontypeid != 'ci' && pslg.infusiontypeid != _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca && infusionEndEvent) {
                let plannedtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionEndEvent.planneddatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
                let administeredtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionEndEvent.eventdatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
                let diffMs = administeredtime.valueOf() - plannedtime.valueOf();
                let diffMins = Math.round(diffMs / 60000); // minutes
                if (diffMins > -this.appService.bufferAdministered && diffMins < this.appService.bufferAdministered) {
                  this.addevents(prescription.prescription_id, infusionEndEvent.logicalid, infusionEndEvent.eventdatetime, null, infusionEndEvent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompleteddone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompleteddone, true);
                } else if (diffMins >= this.appService.bufferAdministered) {
                  this.addevents(prescription.prescription_id, infusionEndEvent.logicalid, infusionEndEvent.eventdatetime, null, infusionEndEvent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletedLate2, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletedLate2, true);
                } else if (diffMins <= -this.appService.bufferAdministered) {
                  this.addevents(prescription.prescription_id, infusionEndEvent.logicalid, infusionEndEvent.eventdatetime, null, infusionEndEvent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletedEarly2, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletedEarly2, true);
                }
              }
              // if infusion is not comlete
              else if (pslg.infusiontypeid != 'ci' && pslg.infusiontypeid != _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca || this.prescriptionStatus != "suspended" && this.prescriptionStatus != "stopped" && this.prescriptionStatus != "cancelled") {
                if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
                  this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), plotEndDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletiondue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletiondue);
                } else if (diffMins <= -this.bufferambertime) {
                  this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), plotEndDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompleteoverdue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompleteoverdue);
                } else if (diffMins >= this.bufferambertime) {
                  this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), plotEndDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Infusioncompletionplanned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Infusioncompletionplanned);
                }
              }
            }
            if (EndDosetime == null && pslg.prescriptionenddate == null && (pslg.infusiontypeid == 'ci' || pslg.infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca)) {
              let enddate = this.MaxEventDate;
              if (infusionEndEvent) {
                enddate = infusionEndEvent.eventdatetime;
              }
              if (this.prescriptionStatus == "suspended" || this.prescriptionStatus == "stopped" || this.prescriptionStatus == "cancelled") {
                let infusionEndEvent = this.appService.InfusionEvents.find(x => x.posology_id == pslg.posology_id && x.eventtype == "endinfusion");
                if (infusionEndEvent) {
                  enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionEndEvent.eventdatetime);
                } else {
                  enddate = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon);
                }
              }
              // else if () {
              //     enddate = moment(prescription.lastmodifiedon);
              //     // this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), enddate,
              //     //     null, startDose.posology_id, false, false, false, true, contents.InfusionCompleteddone)
              //     //     this.addevents(startDose.prescription_id, "dur" + startDose.prescription_id, plotstartDosetime,
              //     //     enddate, startDose.posology_id, false, false, false, true, contents.durationline)
              // }
              if (administeredevent) {
                this.addevents(startDose.prescription_id, "dur" + startDose.prescription_id, moment__WEBPACK_IMPORTED_MODULE_1___default()(administeredevent.administrationstartime), enddate, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.durationline, "");
              } else {
                this.addevents(startDose.prescription_id, "dur" + startDose.prescription_id, plotstartDosetime, enddate, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.durationline, "");
              }
            } else {
              let durationEnd = plotEndDosetime;
              if (infusionEndEvent) {
                durationEnd = infusionEndEvent.eventdatetime;
              }
              if ((pslg.infusiontypeid == 'ci' || pslg.infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca) && (this.prescriptionStatus == "suspended" || this.prescriptionStatus == "stopped" || this.prescriptionStatus == "cancelled")) {
                durationEnd = moment__WEBPACK_IMPORTED_MODULE_1___default()(prescription.lastmodifiedon);
              }
              if (infusionEndEvent && (pslg.infusiontypeid == 'ci' || pslg.infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca) && (this.prescriptionStatus == "suspended" || this.prescriptionStatus == "stopped" || this.prescriptionStatus == "cancelled")) {
                durationEnd = infusionEndEvent.eventdatetime;
              }
              if (administeredevent) {
                this.addevents(startDose.prescription_id, "dur" + this.createLogicalId(startDosetime, startDose.dose_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(administeredevent.administrationstartime), durationEnd, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.durationline, "");
              } else {
                this.addevents(startDose.prescription_id, "dur" + this.createLogicalId(startDosetime, startDose.dose_id), plotstartDosetime, durationEnd, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.durationline, "");
              }
            }
          }
        }
      }
      if (startDosetime >= moment__WEBPACK_IMPORTED_MODULE_1___default()(pslg.prescriptionstartdate)) {
        this.PloteFutureFlowRateChange(pslg, startDose, allDoses, repeatDays);
      }
      repeatDays++;
      if (pslg.prescriptionenddate == EndDosetime) {
        // more then 24 hource so no repete and breck
        break;
      }
      if (pslg.infusiontypeid == "rate" && pslg.frequency == "stat") {
        break;
      }
      if (pslg.dosingdaysfrequencysize == 0) {
        startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(1, 'd');
        EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(1, 'd');
      } else {
        if (pslg.dosingdaysfrequency == "days") {
          startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(pslg.dosingdaysfrequencysize, 'd');
          EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(pslg.dosingdaysfrequencysize, 'd');
        } else if (pslg.dosingdaysfrequency == "weeks") {
          startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(pslg.dosingdaysfrequencysize, 'w');
          EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(pslg.dosingdaysfrequencysize, 'w');
        } else if (pslg.dosingdaysfrequency == "months") {
          startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(pslg.dosingdaysfrequencysize, 'M');
          EndDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(EndDosetime).add(pslg.dosingdaysfrequencysize, 'M');
        }
      }
    }
    /////////////////////////////////////
    /////////////////////////////////
  }
  PloteFutureFlowRateChange(pslg, startDose, allDoses, repeatDays) {
    const logicalId = this.createLogicalId(moment__WEBPACK_IMPORTED_MODULE_1___default()(startDose.dosestartdatetime), startDose.dose_id);
    let administeredevent = this.appService.Medicationadministration.find(x => x.logicalid == "start_" + logicalId && x.dose_id == startDose.dose_id);
    if (administeredevent && administeredevent.adminstrationstatus == "defer") {
      return;
    }
    let firstDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDose.dosestartdatetime).add(repeatDays, 'd');
    let currentFlowRate = startDose.infusionrate;
    const logicalId_1 = this.createLogicalId(firstDosetime, startDose.dose_id);
    let startFlowRateAdministered = this.appService.Medicationadministration.find(x => x.logicalid == "start_" + logicalId_1);
    if (startFlowRateAdministered) {
      currentFlowRate = startFlowRateAdministered.administredinfusionrate;
    }
    let allinfusion = this.appService.InfusionEvents.filter(x => x.posology_id == startDose.posology_id && (x.eventtype == "adjust" || x.eventtype == "restart" || x.eventtype == "administered"));
    allinfusion.sort((a, b) => b._sequenceid - a._sequenceid);
    if (allinfusion.length > 0 && (allinfusion[0].eventtype == "adjust" || allinfusion[0].eventtype == "restart")) {
      currentFlowRate = this.appService.Medicationadministration.find(x => x.logicalid == allinfusion[0].logicalid).administredinfusionrate;
    }
    // while (repeatDays > 0) {
    for (let dose of allDoses) {
      let startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dose.dosestartdatetime);
      let originalStarttime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime);
      const logicalId_2 = this.createLogicalId(originalStarttime, dose.dose_id);
      let dosetransferDate = this.appService.DoseEvents.find(x => x.logicalid == "adjust_" + logicalId_2 && x.eventtype == "Transfer");
      if (dosetransferDate) {
        startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDate.dosedatetime);
      }
      //if there is admin transfer there override transfer
      const logicalId_3 = this.createLogicalId(originalStarttime, dose.dose_id);
      dosetransferDate = this.appService.DoseEvents.find(x => x.logicalid == "adjust_" + logicalId_3 && x.eventtype == "AdminTransfer");
      if (dosetransferDate) {
        startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(dosetransferDate.dosedatetime);
      }
      startDosetime = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDosetime).add(repeatDays, 'd');
      let diffMins = this.getTimeDiff(startDosetime);
      const logicalId_4 = this.createLogicalId(originalStarttime, dose.dose_id);
      let administeredevent = this.appService.Medicationadministration.find(x => x.logicalid == "adjust_" + logicalId_4 && x.dose_id == dose.dose_id);
      //////////////////////////////
      if (administeredevent) {
        this.addevents(dose.prescription_id, "flowrate_" + this.createLogicalId(originalStarttime, dose.dose_id), moment__WEBPACK_IMPORTED_MODULE_1___default()(administeredevent.administrationstartime), null, startDose.posology_id, false, false, false, true, "<div class='durationFlorate'>" + administeredevent.administredinfusionrate + " " + pslg.infusionrateunits + "</div>", "");
        currentFlowRate = administeredevent.administredinfusionrate;
        continue;
      } else {
        this.addevents(dose.prescription_id, "flowrate_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, "<div class='durationFlorate'>" + dose.infusiondoserate + " " + dose.infusiondoserateunits + "</div>", "");
      }
      ////////////////////////////
      if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
        if (currentFlowRate == dose.infusionrate) {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Maintain_Infusion_Rate_Due, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Maintain_Infusion_Rate_Due);
        } else if (currentFlowRate < dose.infusionrate) {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.IncreaseInfusionRateDue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.IncreaseInfusionRateDue);
        } else {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.DecreaseInfusionRateDue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.DecreaseInfusionRateDue);
        }
        currentFlowRate = dose.infusionrate;
      } else if (diffMins <= -this.bufferambertime) {
        if (currentFlowRate == dose.infusionrate) {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Maintain_Infusion_Rate_Late, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Maintain_Infusion_Rate_Late);
        } else if (currentFlowRate < dose.infusionrate) {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.IncreaseInfusionRateLate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.IncreaseInfusionRateLate);
        } else {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.DecreaseInfusionRateLate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.DecreaseInfusionRateLate);
        }
        currentFlowRate = dose.infusionrate;
      } else if (diffMins >= this.bufferambertime) {
        if (currentFlowRate == dose.infusionrate) {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Maintain_Infusion_Rate_Planned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Maintain_Infusion_Rate_Planned);
        } else if (currentFlowRate < dose.infusionrate) {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.IncreaseInfusionRatePlanned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.IncreaseInfusionRatePlanned);
        } else {
          this.addevents(dose.prescription_id, "adjust_" + this.createLogicalId(originalStarttime, dose.dose_id), startDosetime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.DecreaseInfusionRatePlanned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.DecreaseInfusionRatePlanned);
        }
        currentFlowRate = dose.infusionrate;
      }
      // }
      // repeatDays--;
    }
  }
  PlotNonDoseAdminsterEvensForCI(prescription) {
    if ((prescription.__posology[0].infusiontypeid == 'ci' || prescription.__posology[0].infusiontypeid == _services_enum__WEBPACK_IMPORTED_MODULE_0__.InfusionType.pca) && (this.prescriptionStatus == "suspended" || this.prescriptionStatus == "stopped" || this.prescriptionStatus == "cancelled")) {
      let administeredevent = this.appService.Medicationadministration.find(x => x.prescription_id == prescription.prescription_id && x.logicalid.startsWith("start_"));
      if (administeredevent && administeredevent.adminstrationstatus == "notgiven") {
        return;
      }
    }
    let allNonAdministeredEvent = this.appService.InfusionEvents.filter(x => x.posology_id == this.appService.GetCurrentPosology(prescription).posology_id && (x.eventtype == "pause" || x.eventtype == "bolus" || x.eventtype == "changeinfusionset" || x.eventtype == "changeinfusionkit" || x.eventtype == "endinfusion" || x.eventtype == "endinfusion_planned"));
    for (let infusionevent of allNonAdministeredEvent) {
      if (infusionevent.eventtype == "bolus") {
        this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.BolusAdministrationCompleted, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.BolusAdministrationCompleted, true);
      }
      if (infusionevent.eventtype == "pause") {
        this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionRatePaused, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionRatePaused, true);
      } else if (infusionevent.eventtype == "changeinfusionset") {
        this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.ContinuousInfusionSetChanged, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.ContinuousInfusionSetChanged, true);
      } else if (infusionevent.eventtype == "changeinfusionkit") {
        this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Continuousinfusionsyringeorbagchange, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Continuousinfusionsyringeorbagchange, true);
      } else if (infusionevent.eventtype == "endinfusion_planned") {
        let plannedtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionevent.planneddatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let administeredtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionevent.eventdatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let diffMs = administeredtime.valueOf() - plannedtime.valueOf();
        let diffMins = this.getTimeDiff(infusionevent.eventdatetime); // minutes
        if (diffMins > -this.appService.bufferAdministered && diffMins < this.appService.bufferAdministered) {
          this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletiondue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletiondue, false);
        } else if (diffMins >= this.appService.bufferAdministered) {
          this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Infusioncompletionplanned, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Infusioncompletionplanned, false);
        } else if (diffMins <= -this.appService.bufferAdministered) {
          this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompleteoverdue, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompleteoverdue, false);
        }
      } else if (infusionevent.eventtype == "endinfusion") {
        let plannedtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionevent.planneddatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let administeredtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(infusionevent.eventdatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
        let diffMs = administeredtime.valueOf() - plannedtime.valueOf();
        let diffMins = Math.round(diffMs / 60000); // minutes
        if (diffMins > -this.appService.bufferAdministered && diffMins < this.appService.bufferAdministered) {
          this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompleteddone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompleteddone, true);
        } else if (diffMins >= this.appService.bufferAdministered) {
          this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletedLate2, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletedLate2, true);
        } else if (diffMins <= -this.appService.bufferAdministered) {
          this.addevents(prescription.prescription_id, infusionevent.logicalid, infusionevent.eventdatetime, null, infusionevent.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletedEarly2, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletedEarly2, true);
        }
      }
    }
  }
  // if (diffMins > -this.bufferambertime && diffMins < this.bufferambertime) {
  //     this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), plotEndDosetime,
  //         null, startDose.posology_id, false, false, false, true, contents.InfusionCompletiondue)
  // }
  // else if (diffMins <= -this.bufferambertime) {
  //     this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), plotEndDosetime,
  //         null, startDose.posology_id, false, false, false, true, contents.InfusionCompleteoverdue)
  // }
  // else if (diffMins >= this.bufferambertime) {
  //     this.addevents(startDose.prescription_id, "end_" + this.createLogicalId(EndDosetime, startDose.dose_id), plotEndDosetime,
  //         null, startDose.posology_id, false, false, false, true, contents.Infusioncompletionplanned)
  // }
  createAdmiseredInfusionEvents(prescription, startDose, allDoses) {
    let allAdministered = this.appService.Medicationadministration.filter(x => x.prescription_id == prescription.prescription_id);
    allAdministered.sort((b, a) => new Date(b.administrationstartime).getTime() - new Date(a.administrationstartime).getTime());
    let currentFlowRate = 0;
    // non adminster like pause change bag or cancled event
    for (let medicationadministration of allAdministered) {
      if (medicationadministration.isenterinerror) {
        this.addevents(prescription.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, false, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.EnterInErrorbolus, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.EnterInError, true);
        continue;
      }
      let plannedtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.planneddatetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
      let administeredtime = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(medicationadministration.administrationstartime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
      let plannedinfustionValue = +medicationadministration.plannedinfustionrate;
      let administredinfusionValue = +medicationadministration.administredinfusionrate;
      if (prescription.__posology.find(x => x.posology_id == medicationadministration.posology_id).infusiontypeid == "bolus") {
        if (prescription.__posology.find(x => x.posology_id == medicationadministration.posology_id).dosetype == "units") {
          plannedinfustionValue = +medicationadministration.planneddosesize;
          administredinfusionValue = +medicationadministration.administreddosesize;
        } else if (prescription.__posology.find(x => x.posology_id == medicationadministration.posology_id).dosetype == "strength") {
          plannedinfustionValue = +medicationadministration.plannedstrengthneumerator;
          administredinfusionValue = +medicationadministration.administeredstrengthneumerator;
        } else {
          // for descriptive no need to compare
          plannedinfustionValue = 0;
          administredinfusionValue = 0;
        }
      }
      let diffMs = administeredtime.valueOf() - plannedtime.valueOf();
      let diffMins = Math.round(diffMs / 60000); // minutes
      if (medicationadministration.adminstrationstatus == "notgiven") {
        this.addevents(prescription.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, medicationadministration.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdministrationInfution_Failed, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdministrationInfution_Failed, true);
      } else {
        let TempEventtype = this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype;
        if (TempEventtype == "adjust" || TempEventtype == "restart") {
          this.addevents(startDose.prescription_id, "flowrate_" + this.createLogicalId(medicationadministration.administrationstartime, medicationadministration.dose_id), medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, "<div class='durationFlorate'>" + medicationadministration.administredinfusionrate + " " + prescription.__posology.find(x => x.posology_id == medicationadministration.posology_id).infusionrateunits + "</div>", "");
        }
        // this.addevents(startDose.prescription_id, "flowrate_" + medicationadministration.logicalid, medicationadministration.administrationstartime,
        //     null, startDose.posology_id, false, false, false, true, "<div class='durationFlorate'>" + medicationadministration.administredinfusionrate + " ml/h</div>")
        // on time administration
        if (diffMins > -this.appService.bufferAdministered && diffMins < this.appService.bufferAdministered) {
          // cheching Dose administered is differnt from prescribed flow
          if (plannedinfustionValue == administredinfusionValue) {
            if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "administered") {
              this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Infusiondone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Infusiondone, true);
              currentFlowRate = administredinfusionValue;
            } else {
              if (currentFlowRate > administredinfusionValue) {
                if (medicationadministration.isinfusionkitchange) {
                  this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Adjusted_Decrease_Infusion_Rate_Done_Kit_Change, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Adjusted_Decrease_Infusion_Rate_Done_Kit_Change, true);
                } else {
                  this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.DecreaseInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.DecreaseInfusionRatedone, true);
                }
              } else if (currentFlowRate < administredinfusionValue) {
                if (medicationadministration.isinfusionkitchange) {
                  this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Adjusted_Increase_Infusion_Rate_Done_Kit_Change, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Adjusted_Increase_Infusion_Rate_Done_Kit_Change, true);
                } else {
                  this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.IncreaseInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.IncreaseInfusionRatedone, true);
                }
              } else if (currentFlowRate == administredinfusionValue) {
                if (medicationadministration.isinfusionkitchange) {
                  this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Adjusted_Maintain_Infusion_Rate_Done_Kit_Change, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Adjusted_Maintain_Infusion_Rate_Done_Kit_Change, true);
                } else {
                  this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.Maintain_Infusion_Rate_done, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.Maintain_Infusion_Rate_done, true);
                }
              }
              currentFlowRate = administredinfusionValue;
            }
          } else {
            // events Dulta sign
            if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "administered") {
              if (plannedinfustionValue < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedIncreaseInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedIncreaseInfusionRatedone, true);
              } else {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedDecreaseInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedDecreaseInfusionRatedone, true);
              }
              currentFlowRate = administredinfusionValue;
            } else {
              //For Flow Changed event
              if (currentFlowRate > administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedDecreaseInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedDecreaseInfusionRatedone, true);
              } else if (currentFlowRate < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedIncreaseInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedIncreaseInfusionRatedone, true);
              } else if (currentFlowRate == administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedsameInfusionRatedone, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedsameInfusionRatedone, true); //  Adjusted same Infusion Rate done this image need to change
              }
              currentFlowRate = administredinfusionValue;
            }
          }
        } else if (diffMins >= this.appService.bufferAdministered) {
          if (plannedinfustionValue == administredinfusionValue) {
            if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "administered") {
              this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletedLate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletedLate, true);
              currentFlowRate = administredinfusionValue;
            }
            // else if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "bolus") {
            //     this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime,
            //         null, startDose.posology_id, false, false, false, true, contents.BolusAdministrationCompleted)
            // }
            else {
              if (currentFlowRate > administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.DecreaseInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.DecreaseInfusionRatedonelate, true);
              } else if (currentFlowRate < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.IncreaseInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.IncreaseInfusionRatedonelate, true);
              } else if (currentFlowRate == administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.MaintainInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.MaintainInfusionRatedonelate, true); // this image need to change
              }
              currentFlowRate = administredinfusionValue;
            }
          } else {
            // events Dulta sign
            if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "administered") {
              if (plannedinfustionValue < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedIncreaseInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedIncreaseInfusionRatedonelate, true);
              } else {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedDecreaseInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedDecreaseInfusionRatedonelate, true);
              }
              currentFlowRate = administredinfusionValue;
            } else {
              // for flowchange delta
              if (currentFlowRate > administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedDecreaseInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedDecreaseInfusionRatedonelate, true);
              } else if (currentFlowRate < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedIncreaseInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedIncreaseInfusionRatedonelate, true);
              } else if (currentFlowRate == administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.FaliedtoAdjustInfusionRatedonelate, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.FaliedtoAdjustInfusionRatedonelate, true); // this image need to change
              }
              currentFlowRate = administredinfusionValue;
            }
          }
        } else if (diffMins <= -this.appService.bufferAdministered) {
          if (plannedinfustionValue == administredinfusionValue) {
            if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "administered") {
              this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.InfusionCompletedEarly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.InfusionCompletedEarly, true);
              currentFlowRate = administredinfusionValue;
            }
            // else if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "bolus") {
            //     this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime,
            //         null, startDose.posology_id, false, false, false, true, contents.BolusAdministrationCompleted)
            // }
            else {
              if (currentFlowRate > administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.DecreaseInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.DecreaseInfusionRatedoneearly, true);
              } else if (currentFlowRate < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.IncreaseInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.IncreaseInfusionRatedoneearly, true);
              } else if (currentFlowRate == administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.MaintainInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.MaintainInfusionRatedoneearly, true); // this image need to change
              }
              currentFlowRate = administredinfusionValue;
            }
          } else {
            // events Dulta sign
            if (this.appService.InfusionEvents.find(x => x.logicalid == medicationadministration.logicalid).eventtype == "administered") {
              if (plannedinfustionValue < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedIncreaseInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedIncreaseInfusionRatedoneearly, true);
              } else {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedDecreaseInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedDecreaseInfusionRatedoneearly, true);
              }
              currentFlowRate = administredinfusionValue;
            } else {
              // for flowchange delta
              if (currentFlowRate > administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedDecreaseInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedDecreaseInfusionRatedoneearly, true);
              } else if (currentFlowRate < administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.AdjustedIncreaseInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.AdjustedIncreaseInfusionRatedoneearly, true);
              } else if (currentFlowRate == administredinfusionValue) {
                this.addevents(startDose.prescription_id, medicationadministration.logicalid, medicationadministration.administrationstartime, null, startDose.posology_id, false, false, false, true, _services_enum__WEBPACK_IMPORTED_MODULE_0__.contents.FaliedtoAdjustInfusionRatedoneearly, _services_enum__WEBPACK_IMPORTED_MODULE_0__.title.FaliedtoAdjustInfusionRatedoneearly, true); // this image need to change
              }
              currentFlowRate = administredinfusionValue;
            }
          }
        }
      }
    }
  }
  getTimeDiff(datetime) {
    let current = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(new Date(), (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
    let start = new Date(moment__WEBPACK_IMPORTED_MODULE_1___default()(datetime, (moment__WEBPACK_IMPORTED_MODULE_1___default().ISO_8601)).toString());
    let diffMs = start.valueOf() - current.valueOf();
    return Math.round(diffMs / 60000); // minutes
  }
  static #_ = this.ɵfac = function TimeerHelper_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || TimeerHelper)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_2__.AppService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: TimeerHelper,
    factory: TimeerHelper.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 5705:
/*!*******************************************************************************************************************!*\
  !*** ./src/app/components/prescription-infusion-print-template/prescription-infusion-print-template.component.ts ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrescriptionInfusionPrintTemplateComponent: () => (/* binding */ PrescriptionInfusionPrintTemplateComponent)
/* harmony export */ });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/enum */ 6134);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/app.service */ 529);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _directives_number_to_words_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../directives/number-to-words.pipe */ 2324);






function PrescriptionInfusionPrintTemplateComponent_span_0_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" (", med_r1.__ingredients[0].name, ") ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesizerangemax), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_1_span_3_Template, 3, 4, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesize), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesizerangemax);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthrangemax), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthunits, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_2_span_3_Template, 3, 4, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthunits, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthrangemax);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_1_Template, 4, 5, "span", 7)(2, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_span_2_Template, 4, 5, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" / ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominator), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominatorunit, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](3, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_1_span_4_Template, 3, 4, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](3, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumerator), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumeratorunit, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.__medications.length == 1);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_2_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" / ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominator), "\u00A0\u00A0", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominatorunit, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](3, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_2_span_4_Template, 3, 4, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](3, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumerator), "\u00A0\u00A0", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumeratorunit, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.__medications.length == 1);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_1_Template, 5, 5, "span", 7)(2, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_span_2_Template, 5, 5, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].descriptivedose);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, " DOSE:");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_3_Template, 3, 2, "span", 1)(4, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_4_Template, 2, 0, "span", 1)(5, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_5_Template, 3, 2, "span", 1)(6, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_6_Template, 2, 0, "span", 1)(7, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_span_7_Template, 3, 1, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "units");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "strength");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "descriptive");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_span_1_Template, 8, 5, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose.length > 0 && (ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesize || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumerator || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].descriptivedose));
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_8_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"]("- ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, med_r1.doseformsize), " ", med_r1.doseformunits, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_8_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"]("- ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, med_r1.strengthdenominator), " ", med_r1.strengthdenominatorunit, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_0_span_8_span_1_Template, 3, 4, "span", 7)(2, PrescriptionInfusionPrintTemplateComponent_span_0_span_8_span_2_Template, 3, 4, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", med_r1.doseformunits);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", med_r1.strengthdenominatorunit);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "-MR");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "-GR");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_span_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_0_span_3_Template, 2, 0, "span", 1)(4, PrescriptionInfusionPrintTemplateComponent_span_0_span_4_Template, 2, 1, "span", 1)(5, PrescriptionInfusionPrintTemplateComponent_span_0_span_5_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](6, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](7, PrescriptionInfusionPrintTemplateComponent_span_0_span_7_Template, 2, 1, "span", 1)(8, PrescriptionInfusionPrintTemplateComponent_span_0_span_8_Template, 3, 2, "span", 1)(9, PrescriptionInfusionPrintTemplateComponent_span_0_span_9_Template, 2, 0, "span", 1)(10, PrescriptionInfusionPrintTemplateComponent_span_0_span_10_Template, 2, 0, "span", 1)(11, PrescriptionInfusionPrintTemplateComponent_span_0_span_11_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", med_r1.name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", med_r1.__ingredients.length == 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", med_r1.isprimary);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !med_r1.isprimary);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.ismodifiedrelease);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.isgastroresistant);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", i_r3 != ctx_r1.prescription.__medications.length - 1);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "TOTAL VOLUME: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_2_span_3_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](6, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](7, " - ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](6, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalinfusionvolume), "ml");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "Titrate");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "Variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "Protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](3, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](3, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionrate), " ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionrateunits, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_4_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, " - CONTINUOUS INFUSION");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_4_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "INTERMITTENT - ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_4_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, " - PCA/NCA ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_6_span_4_span_1_Template, 3, 0, "span", 1)(2, PrescriptionInfusionPrintTemplateComponent_span_6_span_4_span_2_Template, 2, 0, "span", 1)(3, PrescriptionInfusionPrintTemplateComponent_span_6_span_4_span_3_Template, 3, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx_r1.prescription.ismedicinalgas && ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusiontypeid == "ci");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusiontypeid == "rate");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusiontypeid == "pca");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_6_span_1_Template, 3, 0, "span", 1)(2, PrescriptionInfusionPrintTemplateComponent_span_6_span_2_Template, 3, 0, "span", 1)(3, PrescriptionInfusionPrintTemplateComponent_span_6_span_3_Template, 4, 4, "span", 1)(4, PrescriptionInfusionPrintTemplateComponent_span_6_span_4_Template, 4, 3, "span", 1)(5, PrescriptionInfusionPrintTemplateComponent_span_6_span_5_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency != "variable" && ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency != "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.primaryMedication);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_7_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "Variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_7_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "Protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_7_span_3_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - INTERMITTENT ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_7_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](3, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_7_span_3_span_4_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5, " - ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](6, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](7, "DURATION: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"]("", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](3, 4, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionrate), " ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionrateunits, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusiontypeid == "rate");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionduration, "h ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_7_span_1_Template, 3, 0, "span", 1)(2, PrescriptionInfusionPrintTemplateComponent_span_7_span_2_Template, 3, 0, "span", 1)(3, PrescriptionInfusionPrintTemplateComponent_span_7_span_3_Template, 9, 6, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency != "variable" && ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency != "protocol");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_9_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_9_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" - DURATION: ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionduration, "h ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, " BOLUS");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_9_span_3_Template, 2, 0, "span", 1)(4, PrescriptionInfusionPrintTemplateComponent_span_9_span_4_Template, 2, 1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).infusionduration);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_11_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_11_span_4_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r1.device, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_12_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_12_span_4_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r1.oxygenAdditionalInformation, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_13_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "span")(3, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4, "ROUTE: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](6, PrescriptionInfusionPrintTemplateComponent_span_13_span_6_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r1.routes, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_14_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, ctx_r1.prescription.titrationtargetmin), " ", ctx_r1.prescription.titrationtargetunits, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_14_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 2, ctx_r1.prescription.titrationtargetmax), " ", ctx_r1.prescription.titrationtargetunits, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_14_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, PrescriptionInfusionPrintTemplateComponent_span_14_span_2_Template, 3, 4, "span", 1)(3, PrescriptionInfusionPrintTemplateComponent_span_14_span_3_Template, 3, 4, "span", 1)(4, PrescriptionInfusionPrintTemplateComponent_span_14_span_4_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" TARGET ", ctx_r1.prescription.titrationtype, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.titrationtargetmin);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.titrationtargetmax);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - Morning\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - Noon\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - Night\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - Evening\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - Stat. dose\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_20_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" - ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequencysize, " time(s) per day\n");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" - Every ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequencysize, " hour(s)\n");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" - Every ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequencysize, " min(s)\n");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_23_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_24_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" - Every ", ctx_r1.choosenDays, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_25_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" - Every ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosingdaysfrequencysize, " ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosingdaysfrequency, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_26_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" \u2013 ", ctx_r1.prescriptionAdditionalCondition, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_27_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_28_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - Prescriber to confirm");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_29_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_30_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("(Max ", ctx_r1.prnmaxdosestring, " per day)");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_30_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " - When needed");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, PrescriptionInfusionPrintTemplateComponent_span_30_span_2_Template, 2, 1, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prnmaxdosestring);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_31_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_span_5_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_span_5_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominatorunit, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](2, "numberToWords");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_32_span_5_span_3_Template, 2, 1, "span", 1)(4, PrescriptionInfusionPrintTemplateComponent_span_32_span_5_span_4_Template, 2, 1, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantity, " ", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](2, 4, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantity), " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "units");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "strength");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantitytext, "");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_span_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_32_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](3, "TOTAL QUANTITY");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_32_span_4_Template, 2, 0, "span", 1)(5, PrescriptionInfusionPrintTemplateComponent_span_32_span_5_Template, 5, 6, "span", 3)(6, PrescriptionInfusionPrintTemplateComponent_span_32_span_6_Template, 2, 1, "span", 3)(7, PrescriptionInfusionPrintTemplateComponent_span_32_span_7_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantity);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantitytext);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "PLANNED TIME: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "span")(4, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r1.plannedTime, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_1_span_1_Template, 6, 1, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.administration.planneddatetime);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "FROM: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](5, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind2"](5, 1, ctx_r1.startDate, "dd-MMM-yyyy HH:mm"), " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](3, "UNTIL: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](6, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind2"](6, 1, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription).prescriptionenddate, "dd-MMM-yyyy HH:mm"), " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_2_span_1_Template, 6, 4, "span", 1)(2, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_2_span_2_Template, 7, 4, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.startDate);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription).prescriptionenddate);
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("(", ctx_r1.lastmodifiedbyrole, ")");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_div_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "div")(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", "STATUS \u00A0 ( \u00A0" + ctx_r1.prescriptionstatus + " \u00A0) \u00A0:\u00A0 " + ctx_r1.prescriptionEventComment, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_div_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "div")(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", "STATUS \u00A0 ( \u00A0" + ctx_r1.dischargeSummarystatus + " \u00A0) \u00A0:\u00A0 " + ctx_r1.dischargeSummaryComment, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_1_Template, 2, 1, "span", 1)(2, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_2_Template, 3, 2, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](3, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "span")(5, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](6, " PRESCRIBED BY: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](7, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](9, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_span_9_Template, 2, 1, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](10, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](11, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_div_11_Template, 5, 1, "div", 1)(12, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_div_12_Template, 5, 1, "div", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.componenttype == "administer" && !ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription).prn);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.componenttype != "medicationOrderSet" && ctx_r1.componenttype != "administer" && !ctx_r1.prescription.linkedinfusionid);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r1.prescription.lastmodifiedby);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.lastmodifiedbyrole && ctx_r1.appService.appConfig.AppSettings.IsShowUserRole);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescriptionEventComment && !(ctx_r1.componenttype == "SUM" || ctx_r1.componenttype == "SUMNO"));
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.dischargeSummaryComment && (ctx_r1.componenttype == "SUM" || ctx_r1.componenttype == "SUMNO"));
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_34_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, PrescriptionInfusionPrintTemplateComponent_span_34_span_1_Template, 13, 6, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.componenttype != "additional" && ctx_r1.componenttype != "MOA" && ctx_r1.componenttype != "MOD" && ctx_r1.componenttype != "SUM" && ctx_r1.componenttype != "SUMNO" && ctx_r1.componenttype != "MODNO");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_35_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, "\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_35_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "INDICATION ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, PrescriptionInfusionPrintTemplateComponent_span_35_span_2_span_3_Template, 2, 0, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.fromPrinting);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r1.indicationstring, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_35_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span")(1, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "COMMENTS ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r1.prescription.comments, " ");
  }
}
function PrescriptionInfusionPrintTemplateComponent_span_35_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, PrescriptionInfusionPrintTemplateComponent_span_35_span_2_Template, 6, 2, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](3, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, PrescriptionInfusionPrintTemplateComponent_span_35_span_4_Template, 5, 1, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.indication);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.prescription.comments);
  }
}
class PrescriptionInfusionPrintTemplateComponent {
  constructor(appService) {
    this.appService = appService;
    this.fromPrinting = false;
    this.showPrescriptionHistory = false;
    this.routes = "";
    this.choosenDays = "";
    this.prescriptionAdditionalCondition = "";
    this.device = "";
    this.oxygenAdditionalInformation = "";
    this.indicationstring = "";
    this.isMOAPrescription = false;
  }
  ngOnInit() {
    const currentPosology = this.appService.GetCurrentPosology(this.prescription);
    this.prescription_id = this.prescription.prescription_id;
    this.prescription.__medications.sort(value => {
      return value.isprimary ? -1 : 1;
    });
    this.metaprescriptionstatus = this.appService.MetaPrescriptionstatus;
    this.additionalcondition = this.appService.MetaPrescriptionadditionalcondition;
    this.primaryMedication = this.prescription.__medications.find(e => e.isprimary == true);
    if (this.administration) {
      this.plannedTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.administration.planneddatetime, "YYYY-MM-DD HH:mm").format("DD-MMM-YYYY HH:mm");
    }
    let oxydevice = this.appService.oxygenDevices.find(x => x.code == this.prescription.oxygendevices_id);
    if (oxydevice) {
      this.device = oxydevice.name;
    }
    this.startDate = this.prescription.startdatetime;
    if (moment__WEBPACK_IMPORTED_MODULE_0___default()(this.prescription.startdatetime).format("YYYYMMDDHHmm") != moment__WEBPACK_IMPORTED_MODULE_0___default()(currentPosology.prescriptionstartdate).format("YYYYMMDDHHmm")) {
      this.modifiedFrom = currentPosology.prescriptionstartdate;
    } else {
      this.modifiedFrom = null;
    }
    this.GetRoutes();
    this.GetChoosenDays();
    this.getOxygenAditionalInformation();
    this.getMOAPrescription();
    this.indicationstring = this.appService.GetIndication(this.prescription);
    this.prescriptionEvent = this.appService.prescriptionEvent.find(e => e.prescriptionid == this.prescription_id);
    if (this.prescriptionEvent) {
      this.prescriptionEventComment = this.prescriptionEvent.comments;
    }
    this.GetDischargeSummaryMessage();
    this.getPrescriptionStatus();
    if (currentPosology.prn && currentPosology.prnmaxdose) {
      this.prnmaxdosestring = this.appService.GetPRNMaxDoseDisplayString(currentPosology.prnmaxdose);
    }
    this.lastmodifiedbyrole = this.appService.JSONTryParse(this.prescription.lastmodifiedbyrole) ?? [].join(", ");
  }
  GetRoutes() {
    this.routes = this.prescription.__routes.sort((x, y) => Number(y.isdefault) - Number(x.isdefault)).map(m => m.route).join(",");
  }
  GetChoosenDays() {
    this.choosenDays = JSON.parse(this.appService.GetCurrentPosology(this.prescription, this.posologyid).daysofweek).join(", ");
  }
  getOxygenAditionalInformation() {
    let arrayAdd = [];
    if (this.prescription.oxygenadditionalinfo) {
      JSON.parse(this.prescription.oxygenadditionalinfo).forEach(element => {
        arrayAdd.push(this.appService.oxygenprescriptionadditionalinfo.find(e => e.oxygenprescriptionadditionalinfo_id == element).additionalinfo);
      });
    }
    this.oxygenAdditionalInformation = arrayAdd.join(",");
  }
  GetAdditionalcondition() {
    var condition = this.additionalcondition.find(x => x.prescriptionadditionalconditions_id == this.prescription.prescriptionadditionalconditions_id);
    if (condition) this.prescriptionAdditionalCondition = this.additionalcondition.find(x => x.prescriptionadditionalconditions_id == this.prescription.prescriptionadditionalconditions_id).additionalcondition;else this.prescriptionAdditionalCondition = "No additional criteria";
  }
  getMOAPrescription() {
    if (this.prescription.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(x => x.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Admission).prescriptioncontext_id) {
      this.isMOAPrescription = true;
    }
  }
  GetDischargeSummaryMessage() {
    // discharge summary comment
    this.dischargeSummaryComment = "";
    this.dischargeSummarystatus = "";
    if (this.componenttype == 'SUMNO') {
      let prescription_stop_statusid = this.appService.MetaPrescriptionstatus.find(x => x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.stopped || x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.cancelled).prescriptionstatus_id;
      let prescription_cancel_statusid = this.appService.MetaPrescriptionstatus.find(x => x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.cancelled).prescriptionstatus_id;
      let prescription_suspend_statusid = this.appService.MetaPrescriptionstatus.find(x => x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended).prescriptionstatus_id;
      let allPrescription = this.appService.Prescription.filter(x => x.__medications.find(x => x.isprimary).__codes[0].code == this.primaryMedication.__codes[0].code && x.prescriptioncontext_id != this.appService.MetaPrescriptioncontext.find(y => y.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Discharge).prescriptioncontext_id);
      if (this.sumstatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.stopped) {
        let allStop = allPrescription.filter(x => x.prescriptionstatus_id == prescription_stop_statusid || x.prescriptionstatus_id == prescription_cancel_statusid).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) ? -1 : 0);
        if (allStop && allStop.length > 0) {
          let comment = this.appService.prescriptionEvent.find(e => e.prescriptionid == allStop[0].prescription_id);
          if (comment) {
            this.dischargeSummaryComment = comment.comments;
            this.dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.stopped;
          }
        }
      }
      if (this.sumstatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended) {
        let addedToChart = allPrescription.filter(x => x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(y => y.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Inpatient).prescriptioncontext_id).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) ? -1 : 0);
        ;
        if (addedToChart && addedToChart.length == 0)
          // this drug was not added to drug chart as inpatient medication 
          {
            this.dischargeSummaryComment = "Medicine suspended on admission";
            this.dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended;
          } else {
          let allActive = allPrescription.filter(x => x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(y => y.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Inpatient).prescriptioncontext_id && x.prescriptionstatus_id != prescription_suspend_statusid && x.prescriptionstatus_id != prescription_stop_statusid && x.prescriptionstatus_id != prescription_cancel_statusid).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) ? -1 : 0);
          ;
          if (allActive && allActive.length > 0)
            // added to drug chart as inpatient medicaiton but, not to discharge prescription 
            {
              this.dischargeSummaryComment = "Medicine suspended on discharge";
              this.dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended;
            } else {
            let allSuspend = allPrescription.filter(x => x.prescriptionstatus_id == prescription_suspend_statusid).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_0___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_0___default()(a.lastmodifiedon) ? -1 : 0);
            ;
            if (allSuspend && allSuspend.length > 0)
              // added to drug chart and manually suspended 
              {
                let comment = this.appService.prescriptionEvent.find(e => e.prescriptionid == allSuspend[0].prescription_id);
                if (comment) {
                  this.dischargeSummaryComment = comment.comments;
                  this.dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended;
                }
              }
          }
        }
      }
    }
  }
  getPrescriptionStatus() {
    var status = this.metaprescriptionstatus.find(x => x.prescriptionstatus_id == this.prescription.prescriptionstatus_id);
    if (status) this.prescriptionstatus = this.metaprescriptionstatus.find(x => x.prescriptionstatus_id == this.prescription.prescriptionstatus_id).status;else this.prescriptionstatus = "active";
  }
  static #_ = this.ɵfac = function PrescriptionInfusionPrintTemplateComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || PrescriptionInfusionPrintTemplateComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_2__.AppService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
    type: PrescriptionInfusionPrintTemplateComponent,
    selectors: [["app-prescription-infusion-print-template"]],
    inputs: {
      componenttype: "componenttype",
      prescription: "prescription",
      administration: "administration",
      fromPrinting: "fromPrinting",
      posologyid: "posologyid",
      sumstatus: "sumstatus"
    },
    decls: 36,
    vars: 32,
    consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], [2, "color", "#7891D8", "font-weight", "bold"], ["style", "font-size:11px; color: #646464;font-weight: bold;", 4, "ngIf"], ["style", "color: #7891D8;font-weight: bold;", 4, "ngIf"], [2, "font-size", "12px", "font-weight", "bold"], [2, "font-size", "11px", "color", "#2a93ba", "font-weight", "bold"], ["style", "font-size: 12px;color: #2a93ba;font-weight: bold;", 4, "ngIf"], [2, "font-size", "12px", "color", "#2a93ba", "font-weight", "bold"], [2, "font-size", "11px", "color", "#646464", "font-weight", "bold"], [2, "color", "#7891D8", "font-weight", "bold", "font-size", "11px"], [2, "font-size", "11px", "color", "#7891D8", "font-weight", "bold"]],
    template: function PrescriptionInfusionPrintTemplateComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, PrescriptionInfusionPrintTemplateComponent_span_0_Template, 12, 9, "span", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](1, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, PrescriptionInfusionPrintTemplateComponent_span_2_Template, 8, 4, "span", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "span", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4, "RATE: ");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](5, PrescriptionInfusionPrintTemplateComponent_span_5_Template, 2, 0, "span", 3)(6, PrescriptionInfusionPrintTemplateComponent_span_6_Template, 6, 5, "span", 1)(7, PrescriptionInfusionPrintTemplateComponent_span_7_Template, 4, 3, "span", 1)(8, PrescriptionInfusionPrintTemplateComponent_span_8_Template, 2, 0, "span", 1)(9, PrescriptionInfusionPrintTemplateComponent_span_9_Template, 5, 2, "span", 1)(10, PrescriptionInfusionPrintTemplateComponent_span_10_Template, 2, 0, "span", 1)(11, PrescriptionInfusionPrintTemplateComponent_span_11_Template, 5, 2, "span", 1)(12, PrescriptionInfusionPrintTemplateComponent_span_12_Template, 5, 2, "span", 1)(13, PrescriptionInfusionPrintTemplateComponent_span_13_Template, 7, 2, "span", 1)(14, PrescriptionInfusionPrintTemplateComponent_span_14_Template, 5, 4, "span", 4)(15, PrescriptionInfusionPrintTemplateComponent_span_15_Template, 2, 0, "span", 1)(16, PrescriptionInfusionPrintTemplateComponent_span_16_Template, 2, 0, "span", 1)(17, PrescriptionInfusionPrintTemplateComponent_span_17_Template, 2, 0, "span", 1)(18, PrescriptionInfusionPrintTemplateComponent_span_18_Template, 2, 0, "span", 1)(19, PrescriptionInfusionPrintTemplateComponent_span_19_Template, 2, 0, "span", 1)(20, PrescriptionInfusionPrintTemplateComponent_span_20_Template, 2, 1, "span", 1)(21, PrescriptionInfusionPrintTemplateComponent_span_21_Template, 2, 1, "span", 1)(22, PrescriptionInfusionPrintTemplateComponent_span_22_Template, 2, 1, "span", 1)(23, PrescriptionInfusionPrintTemplateComponent_span_23_Template, 2, 0, "span", 1)(24, PrescriptionInfusionPrintTemplateComponent_span_24_Template, 2, 1, "span", 1)(25, PrescriptionInfusionPrintTemplateComponent_span_25_Template, 2, 2, "span", 1)(26, PrescriptionInfusionPrintTemplateComponent_span_26_Template, 2, 1, "span", 1)(27, PrescriptionInfusionPrintTemplateComponent_span_27_Template, 2, 0, "span", 1)(28, PrescriptionInfusionPrintTemplateComponent_span_28_Template, 2, 0, "span", 1)(29, PrescriptionInfusionPrintTemplateComponent_span_29_Template, 2, 0, "span", 1)(30, PrescriptionInfusionPrintTemplateComponent_span_30_Template, 3, 1, "span", 1)(31, PrescriptionInfusionPrintTemplateComponent_span_31_Template, 2, 0, "span", 1)(32, PrescriptionInfusionPrintTemplateComponent_span_32_Template, 8, 4, "span", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](33, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](34, PrescriptionInfusionPrintTemplateComponent_span_34_Template, 2, 1, "span", 1)(35, PrescriptionInfusionPrintTemplateComponent_span_35_Template, 5, 2, "span", 1);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx.prescription.__medications);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).totalinfusionvolume);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.prescription.titration);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", (ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).infusiontypeid == "ci" || ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).infusiontypeid == "pca") && !ctx.prescription.titration);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).infusiontypeid == "rate" && !ctx.prescription.titration);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).infusiontypeid == "bolus" && !ctx.prescription.titration);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.device);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.prescription.oxygenadditionalinfo && ctx.prescription.oxygenadditionalinfo.length > 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.prescription.__routes.length > 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.prescription.titration);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "mor");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "mid");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "night");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "eve");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "stat");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "x");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "h");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "m");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).daysofweek && ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).daysofweek.length > 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).dosingdaysfrequencysize && ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).dosingdaysfrequencysize > 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.prescriptionAdditionalCondition && ctx.prescriptionAdditionalCondition != "No additional criteria");
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).doctorsorder);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).prn);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", (ctx.componenttype == "OP" || ctx.componenttype == "medication_rec" || ctx.componenttype == "MOD" || ctx.componenttype == "SUM" || ctx.componenttype == "MODNO" || ctx.componenttype == "SUMNO") && (ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).totalquantity || ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).totalquantitytext));
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.DecimalPipe, _angular_common__WEBPACK_IMPORTED_MODULE_5__.DatePipe, _directives_number_to_words_pipe__WEBPACK_IMPORTED_MODULE_3__.NumberToWordsPipe],
    styles: [".empa-template-bold[_ngcontent-%COMP%]{\n    font-size: 1.1em;\n    line-height: 14px;\n    color: #646464;\n    font-weight: 800;\n}\n\n.empa-template-dose[_ngcontent-%COMP%]{\n    font-size: 1.2em;\n    line-height: 14px;\n    color: #646464;\n    font-weight: bold;\n}\n.empa-template-dose-label[_ngcontent-%COMP%], .empa-template-induction-label[_ngcontent-%COMP%] {\n    color: #7891D8;\n    font-weight: bold;\n}\n.empa-template-dose-text[_ngcontent-%COMP%], .empa-template-induction-text[_ngcontent-%COMP%] {\n    font-size: 1.1em;\n    line-height: 14px;\n    color: #646464;\n    white-space: normal;\n}\n \n\n .medication-property[_ngcontent-%COMP%] {\n    display: flex;\n }\n.medication-property-icon[_ngcontent-%COMP%] {\n    width: 20px;\n    height: 20px;\n    background-repeat: no-repeat;\n    background-size: 100%;\n}\n.blacktrianglemedcine[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Black_Triangle_Medcine.svg);\n\n}\n.clinicaltrialmedicine[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Clinical_Trial_Medicine.svg);\n\n}\n.controlleddrug[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Controlled_Drug.svg);\n\n}\n.critialdrug[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Critical_Drug.svg);\n\n}\n.expensivemedication[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Expensive_Therapy.svg);\n\n}\n.highalertmedication[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/High_Alert_Medication.svg);\n\n}\n.nonformularymedication[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Non-Formulary_Medicine.svg);\n\n}\n.unlicencedmedicine[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Unlicenced_Medicine.svg);\n\n}\n.break-word[_ngcontent-%COMP%] {\n  word-wrap:break-word;\n}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wcmVzY3JpcHRpb24taW5mdXNpb24tcHJpbnQtdGVtcGxhdGUvcHJlc2NyaXB0aW9uLWluZnVzaW9uLXByaW50LXRlbXBsYXRlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGNBQWM7SUFDZCxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLG1CQUFtQjtBQUN2QjtDQUNDLGlEQUFpRDtDQUNqRDtJQUNHLGFBQWE7Q0FDaEI7QUFDRDtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osNEJBQTRCO0lBQzVCLHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0ksd0ZBQXdGOztBQUU1RjtBQUNBO0lBQ0kseUZBQXlGOztBQUU3RjtBQUNBO0lBQ0ksaUZBQWlGOztBQUVyRjtBQUNBO0lBQ0ksK0VBQStFOztBQUVuRjtBQUNBO0lBQ0ksbUZBQW1GOztBQUV2RjtBQUNBO0lBQ0ksdUZBQXVGOztBQUUzRjtBQUNBO0lBQ0ksd0ZBQXdGOztBQUU1RjtBQUNBO0lBQ0kscUZBQXFGOztBQUV6RjtBQUNBO0VBQ0Usb0JBQW9CO0FBQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiLmVtcGEtdGVtcGxhdGUtYm9sZHtcbiAgICBmb250LXNpemU6IDEuMWVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICAgIGNvbG9yOiAjNjQ2NDY0O1xuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XG59XG5cbi5lbXBhLXRlbXBsYXRlLWRvc2V7XG4gICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBjb2xvcjogIzY0NjQ2NDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cbi5lbXBhLXRlbXBsYXRlLWRvc2UtbGFiZWwsLmVtcGEtdGVtcGxhdGUtaW5kdWN0aW9uLWxhYmVsIHtcbiAgICBjb2xvcjogIzc4OTFEODtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cbi5lbXBhLXRlbXBsYXRlLWRvc2UtdGV4dCwuZW1wYS10ZW1wbGF0ZS1pbmR1Y3Rpb24tdGV4dCB7XG4gICAgZm9udC1zaXplOiAxLjFlbTtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBjb2xvcjogIzY0NjQ2NDtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xufVxuIC8qIC0tLS0tLS0tLSBtZWRpY2F0aW9uIHByb3BlcnR5IGljb24gLS0tLS0tLS0tLSovXG4gLm1lZGljYXRpb24tcHJvcGVydHkge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gfVxuLm1lZGljYXRpb24tcHJvcGVydHktaWNvbiB7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDAlO1xufVxuLmJsYWNrdHJpYW5nbGVtZWRjaW5lIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS9tZWRpY2F0aW9ucHJvcGVydHkvQmxhY2tfVHJpYW5nbGVfTWVkY2luZS5zdmcpO1xuXG59XG4uY2xpbmljYWx0cmlhbG1lZGljaW5lIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS9tZWRpY2F0aW9ucHJvcGVydHkvQ2xpbmljYWxfVHJpYWxfTWVkaWNpbmUuc3ZnKTtcblxufVxuLmNvbnRyb2xsZWRkcnVnIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS9tZWRpY2F0aW9ucHJvcGVydHkvQ29udHJvbGxlZF9EcnVnLnN2Zyk7XG5cbn1cbi5jcml0aWFsZHJ1ZyB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvbWVkaWNhdGlvbnByb3BlcnR5L0NyaXRpY2FsX0RydWcuc3ZnKTtcblxufVxuLmV4cGVuc2l2ZW1lZGljYXRpb24ge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL21lZGljYXRpb25wcm9wZXJ0eS9FeHBlbnNpdmVfVGhlcmFweS5zdmcpO1xuXG59XG4uaGlnaGFsZXJ0bWVkaWNhdGlvbiB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvbWVkaWNhdGlvbnByb3BlcnR5L0hpZ2hfQWxlcnRfTWVkaWNhdGlvbi5zdmcpO1xuXG59XG4ubm9uZm9ybXVsYXJ5bWVkaWNhdGlvbiB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvbWVkaWNhdGlvbnByb3BlcnR5L05vbi1Gb3JtdWxhcnlfTWVkaWNpbmUuc3ZnKTtcblxufVxuLnVubGljZW5jZWRtZWRpY2luZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvbWVkaWNhdGlvbnByb3BlcnR5L1VubGljZW5jZWRfTWVkaWNpbmUuc3ZnKTtcblxufVxuLmJyZWFrLXdvcmQge1xuICB3b3JkLXdyYXA6YnJlYWstd29yZDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */"]
  });
}

/***/ }),

/***/ 5005:
/*!***************************************************************************************************************************!*\
  !*** ./src/app/components/prescription-non-infusion-print-template/prescription-non-infusion-print-template.component.ts ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrescriptionNonInfusionPrintTemplateComponent: () => (/* binding */ PrescriptionNonInfusionPrintTemplateComponent)
/* harmony export */ });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/app.service */ 529);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _directives_number_to_words_pipe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../directives/number-to-words.pipe */ 2324);





function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" (", med_r1.__ingredients[0].name, ") ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesizerangemax), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_1_span_3_Template, 3, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesize), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesizerangemax);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthrangemax), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthunits, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_2_span_3_Template, 3, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthunits, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthrangemax);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_1_Template, 4, 5, "span", 1)(2, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_span_2_Template, 4, 5, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", !ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_4_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" / ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominator), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominatorunit, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 6)(2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](4, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](5, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_4_span_5_Template, 3, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](4, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumerator), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumeratorunit, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.__medications.length == 1);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate"](ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].descriptivedose);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "DOSE:");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_3_Template, 3, 2, "span", 2)(4, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_4_Template, 6, 5, "span", 2)(5, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_span_5_Template, 3, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "units");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "strength");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "descriptive");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_span_1_Template, 6, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose.length > 0 && (ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesize || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumerator || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].descriptivedose));
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"]("- ", med_r1.doseformsize, " ", med_r1.doseformunits, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"]("- ", med_r1.strengthdenominator, "", med_r1.strengthdenominatorunit, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_2_span_1_Template, 2, 2, "span", 1)(2, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_2_span_2_Template, 2, 2, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", med_r1.doseformunits);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", med_r1.strengthdenominatorunit);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_1_Template, 2, 1, "span", 2)(2, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_span_2_Template, 3, 2, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", med_r1.isprimary);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", !med_r1.isprimary);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, "-MR");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, "-GR");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_3_Template, 2, 1, "span", 2)(4, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_4_Template, 3, 2, "span", 2)(5, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_5_Template, 2, 0, "span", 2)(6, PrescriptionNonInfusionPrintTemplateComponent_span_0_span_6_Template, 2, 0, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const med_r1 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate"](med_r1.name);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", med_r1.__ingredients.length == 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.__medications.length > 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.ismodifiedrelease);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.isgastroresistant);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, "DOSE:\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "TOTAL VOLUME: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](5, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](5, 1, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalinfusionvolume), "ml");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, "Titrate");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_5_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" ", ctx_r1.prescription.titrationtargetmin, " ", ctx_r1.prescription.titrationtargetunits, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_5_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" - ", ctx_r1.prescription.titrationtargetmax, " ", ctx_r1.prescription.titrationtargetunits, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, PrescriptionNonInfusionPrintTemplateComponent_span_5_span_2_Template, 2, 2, "span", 2)(3, PrescriptionNonInfusionPrintTemplateComponent_span_5_span_3_Template, 2, 2, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" TARGET ", ctx_r1.prescription.titrationtype, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.titrationtargetmin);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.titrationtargetmax);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_1_span_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 1, ctx_r1.administration.planneddosesizerangemax), " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_1_span_1_span_3_Template, 3, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 3, ctx_r1.administration.planneddosesize), " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.administration.planneddosesizerangemax && ctx_r1.administration.planneddosesizerangemax != "0");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r1.administration.planneddoseunit, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_1_span_1_Template, 5, 5, "span", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.administration);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesizerangemax), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_1_span_3_Template, 3, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesize), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosesizerangemax);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" - ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 2, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthrangemax), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthunits, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_2_span_3_Template, 3, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 3, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthunits, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrengthrangemax);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_1_Template, 4, 5, "span", 1)(2, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_span_2_Template, 4, 5, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose.length > 0 && !ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose.length > 0 && ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].dosestrength);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "Variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "Protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_1_Template, 3, 2, "span", 2)(2, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_2_Template, 3, 0, "span", 2)(3, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_span_3_Template, 3, 0, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "x" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "h" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "stat" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "mor" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "mid" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "eve" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "night");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "protocol");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_1_Template, 2, 1, "span", 2)(2, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_span_2_Template, 4, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.componenttype == "administer");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.componenttype != "administer");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate4"]("", ctx_r1.administration.plannedstrengthneumerator, "", ctx_r1.administration.plannedstrengthneumeratorunits, " / ", ctx_r1.administration.plannedstrengthdenominator, "", ctx_r1.administration.plannedstrengthdenominatorunits, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_1_span_1_Template, 2, 4, "span", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.administration);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](3, "number");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate4"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 4, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumerator), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthneumeratorunit, " / ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](3, 6, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominator), "", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominatorunit, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_1_span_1_Template, 4, 8, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose.length > 0);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "Variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "Protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_1_Template, 2, 1, "span", 2)(2, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_2_Template, 3, 0, "span", 2)(3, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_span_3_Template, 3, 0, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "x" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "h" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "stat" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "mor" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "mid" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "eve" || ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "night");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequency == "protocol");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_1_Template, 2, 1, "span", 2)(2, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_span_2_Template, 4, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.componenttype == "administer");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.componenttype != "administer");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_3_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate"](ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].descriptivedose);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_3_span_1_Template, 2, 1, "span", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose.length > 0);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_1_Template, 3, 2, "span", 2)(2, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_2_Template, 3, 2, "span", 2)(3, PrescriptionNonInfusionPrintTemplateComponent_span_6_span_3_Template, 2, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "units");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "strength");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "descriptive");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - Morning\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - Noon\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - Evening\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - Night\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - Stat. dose\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" - ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequencysize, " time(s) per day\n");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" - Every ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequencysize, " hour(s)\n");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" - Every ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).frequencysize, " min(s)\n");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" - Every ", ctx_r1.chosenDays, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" - Every ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosingdaysfrequencysize, " ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosingdaysfrequency, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" \u2013 ", ctx_r1.prescriptionAdditionalConditions, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - Prescriber to confirm");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_19_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("(Max ", ctx_r1.prnmaxdosestring, " per day)");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " - When needed");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, PrescriptionNonInfusionPrintTemplateComponent_span_19_span_2_Template, 2, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prnmaxdosestring);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_20_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](2, "span")(3, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4, "ROUTE: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r1.routes, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_21_span_4_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].doseunit, "(s)");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_21_span_4_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).__dose[0].strengthdenominatorunit, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_21_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](2, "numberToWords");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_21_span_4_span_3_Template, 2, 1, "span", 2)(4, PrescriptionNonInfusionPrintTemplateComponent_span_21_span_4_span_4_Template, 2, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate2"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantity, " ", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind1"](2, 4, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantity), " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "units");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).dosetype == "strength");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_21_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantitytext, "");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](3, "TOTAL QUANTITY");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](4, PrescriptionNonInfusionPrintTemplateComponent_span_21_span_4_Template, 5, 6, "span", 3)(5, PrescriptionNonInfusionPrintTemplateComponent_span_21_span_5_Template, 2, 1, "span", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantity);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).totalquantitytext);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_span_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "FROM ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](5, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind2"](5, 1, ctx_r1.startDate, "dd-MMM-yyyy HH:mm"), " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_span_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "UNTIL ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipe"](5, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpipeBind2"](5, 1, ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).prescriptionenddate, "dd-MMM-yyyy HH:mm"), " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, PrescriptionNonInfusionPrintTemplateComponent_span_22_span_2_span_1_Template, 6, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](2, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](3, PrescriptionNonInfusionPrintTemplateComponent_span_22_span_2_span_3_Template, 6, 4, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).prescriptionstartdate);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.appService.GetCurrentPosology(ctx_r1.prescription, ctx_r1.posologyid).prescriptionenddate);
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_span_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("(", ctx_r1.lastmodifiedbyrole, ")");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_span_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "INDICATION ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", ctx_r1.indicationstring, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_span_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span")(1, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "COMMENTS ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", ctx_r1.prescription.comments, " ");
  }
}
function PrescriptionNonInfusionPrintTemplateComponent_span_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, PrescriptionNonInfusionPrintTemplateComponent_span_22_span_2_Template, 4, 2, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](3, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](4, "span")(5, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](6, " PRESCRIBED BY: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](7, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](9, PrescriptionNonInfusionPrintTemplateComponent_span_22_span_9_Template, 2, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](10, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](11, PrescriptionNonInfusionPrintTemplateComponent_span_22_span_11_Template, 5, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](12, "br");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](13, PrescriptionNonInfusionPrintTemplateComponent_span_22_span_13_Template, 5, 1, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.componenttype != "medicationOrderSet" && ctx_r1.componenttype != "administer" && !ctx_r1.prescription.linkedinfusionid);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate"](ctx_r1.prescription.lastmodifiedby);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.lastmodifiedbyrole && ctx_r1.appService.appConfig.AppSettings.IsShowUserRole);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.indication);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r1.prescription.comments);
  }
}
class PrescriptionNonInfusionPrintTemplateComponent {
  constructor(appService) {
    this.appService = appService;
    this.fromPrinting = false;
    this.showPrescriptionHistory = false;
    this.chosenDays = "";
    this.routes = "";
    this.indicationstring = "";
  }
  ngOnInit() {
    this.prescription.__medications.sort(value => {
      return value.isprimary ? -1 : 1;
    });
    this.prescriptionstatus = this.appService.MetaPrescriptionstatus;
    this.additionalcondition = this.appService.MetaPrescriptionadditionalcondition;
    this.primaryMedication = this.prescription.__medications.find(e => e.isprimary == true);
    if (this.administration) {
      this.plannedTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.administration.planneddatetime, "YYYY-MM-DD HH:mm").format("DD-MMM-YYYY HH:mm");
    }
    this.GetChosenDays();
    this.GetRoutes();
    this.GetAdditionalConditions();
    this.indicationstring = this.appService.GetIndication(this.prescription);
    this.startDate = this.prescription.startdatetime;
    const currentPosology = this.appService.GetCurrentPosology(this.prescription, this.posologyid);
    if (currentPosology.prn && currentPosology.prnmaxdose) {
      this.prnmaxdosestring = this.appService.GetPRNMaxDoseDisplayString(currentPosology.prnmaxdose);
    }
    this.lastmodifiedbyrole = this.appService.JSONTryParse(this.prescription.lastmodifiedbyrole) ?? [].join(", ");
  }
  GetRoutes() {
    this.routes = this.prescription.__routes.sort((x, y) => Number(y.isdefault) - Number(x.isdefault)).map(m => m.route).join(",");
  }
  GetChosenDays() {
    this.chosenDays = JSON.parse(this.appService.GetCurrentPosology(this.prescription, this.posologyid).daysofweek).join(", ");
  }
  GetAdditionalConditions() {
    var condition = this.additionalcondition.find(x => x.prescriptionadditionalconditions_id == this.prescription.prescriptionadditionalconditions_id);
    if (condition) this.prescriptionAdditionalConditions = this.additionalcondition.find(x => x.prescriptionadditionalconditions_id == this.prescription.prescriptionadditionalconditions_id).additionalcondition;else this.prescriptionAdditionalConditions = "No additional criteria";
  }
  static #_ = this.ɵfac = function PrescriptionNonInfusionPrintTemplateComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || PrescriptionNonInfusionPrintTemplateComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_1__.AppService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
    type: PrescriptionNonInfusionPrintTemplateComponent,
    selectors: [["app-prescription-non-infusion-print-template"]],
    inputs: {
      componenttype: "componenttype",
      prescription: "prescription",
      administration: "administration",
      posologyid: "posologyid",
      fromPrinting: "fromPrinting"
    },
    decls: 23,
    vars: 22,
    consts: [[4, "ngFor", "ngForOf"], ["style", "font-size: 12px;color: #2a93ba;font-weight: bold;", 4, "ngIf"], [4, "ngIf"], ["style", "font-size:11px; color: #646464;font-weight: bold;", 4, "ngIf"], [2, "font-size", "12px", "font-weight", "bold"], [2, "font-size", "11px", "color", "#2a93ba", "font-weight", "bold"], [2, "font-size", "12px", "color", "#2a93ba", "font-weight", "bold"], [2, "font-size", "11px", "color", "#646464", "font-weight", "bold"], [2, "color", "#7891D8", "font-weight", "bold"], [2, "color", "#7891D8", "font-weight", "bold", "font-size", "11px"], [2, "font-size", "11px", "color", "#7891D8", "font-weight", "bold"]],
    template: function PrescriptionNonInfusionPrintTemplateComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](0, PrescriptionNonInfusionPrintTemplateComponent_span_0_Template, 7, 5, "span", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, PrescriptionNonInfusionPrintTemplateComponent_span_2_Template, 2, 0, "span", 1)(3, PrescriptionNonInfusionPrintTemplateComponent_span_3_Template, 6, 3, "span", 2)(4, PrescriptionNonInfusionPrintTemplateComponent_span_4_Template, 2, 0, "span", 3)(5, PrescriptionNonInfusionPrintTemplateComponent_span_5_Template, 4, 3, "span", 1)(6, PrescriptionNonInfusionPrintTemplateComponent_span_6_Template, 4, 3, "span", 2)(7, PrescriptionNonInfusionPrintTemplateComponent_span_7_Template, 2, 0, "span", 3)(8, PrescriptionNonInfusionPrintTemplateComponent_span_8_Template, 2, 0, "span", 3)(9, PrescriptionNonInfusionPrintTemplateComponent_span_9_Template, 2, 0, "span", 3)(10, PrescriptionNonInfusionPrintTemplateComponent_span_10_Template, 2, 0, "span", 3)(11, PrescriptionNonInfusionPrintTemplateComponent_span_11_Template, 2, 0, "span", 3)(12, PrescriptionNonInfusionPrintTemplateComponent_span_12_Template, 2, 1, "span", 3)(13, PrescriptionNonInfusionPrintTemplateComponent_span_13_Template, 2, 1, "span", 3)(14, PrescriptionNonInfusionPrintTemplateComponent_span_14_Template, 2, 1, "span", 3)(15, PrescriptionNonInfusionPrintTemplateComponent_span_15_Template, 2, 1, "span", 3)(16, PrescriptionNonInfusionPrintTemplateComponent_span_16_Template, 2, 2, "span", 3)(17, PrescriptionNonInfusionPrintTemplateComponent_span_17_Template, 2, 1, "span", 3)(18, PrescriptionNonInfusionPrintTemplateComponent_span_18_Template, 2, 0, "span", 3)(19, PrescriptionNonInfusionPrintTemplateComponent_span_19_Template, 3, 1, "span", 3)(20, PrescriptionNonInfusionPrintTemplateComponent_span_20_Template, 6, 1, "span", 2)(21, PrescriptionNonInfusionPrintTemplateComponent_span_21_Template, 6, 2, "span", 2)(22, PrescriptionNonInfusionPrintTemplateComponent_span_22_Template, 14, 5, "span", 2);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx.prescription.__medications);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.prescription.__medications.length == 1 || ctx.prescription.titration);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.prescription.__medications.length > 1 && !ctx.prescription.titration && ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).totalinfusionvolume);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.prescription.titration && ctx.componenttype != "administer");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.prescription.titration && ctx.componenttype != "administer");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", !(ctx.prescription.titration && ctx.componenttype != "administer") && ctx.prescription.__medications.length == 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "mor");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "mid");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "eve");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "night");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "stat");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "x");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "h");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).frequency == "m");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).daysofweek && ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).daysofweek.length > 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).dosingdaysfrequencysize && ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).dosingdaysfrequencysize > 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.prescriptionAdditionalConditions != "No additional criteria");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).doctorsorder);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).prn);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.prescription.__routes.length > 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", (ctx.componenttype == "OP" || ctx.componenttype == "medication_rec" || ctx.componenttype == "MOD" || ctx.componenttype == "SUM" || ctx.componenttype == "MODNO" || ctx.componenttype == "SUMNO") && (ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).totalquantity || ctx.appService.GetCurrentPosology(ctx.prescription, ctx.posologyid).totalquantitytext));
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.fromPrinting);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_4__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_4__.DecimalPipe, _angular_common__WEBPACK_IMPORTED_MODULE_4__.DatePipe, _directives_number_to_words_pipe__WEBPACK_IMPORTED_MODULE_2__.NumberToWordsPipe],
    styles: [".empa-template-bold[_ngcontent-%COMP%]{\n    font-size: 1.1em;\n    line-height: 14px;\n    color: #646464;\n    font-weight: 800;\n}\n.empa-template-dose[_ngcontent-%COMP%]{\n    font-size: 1.2em;\n    line-height: 14px;\n    color: #646464;\n    font-weight: bold;\n}\n\n.empa-template-dose-label[_ngcontent-%COMP%], .empa-template-induction-label[_ngcontent-%COMP%] {\n    color: #7891D8;\n    font-weight: bold; \n}\n.empa-template-dose-text[_ngcontent-%COMP%], .empa-template-induction-text[_ngcontent-%COMP%] {\n    font-size: 1.1em;\n    line-height: 14px;\n    color: #646464;\n    white-space: normal;\n}\n \n\n .medication-property[_ngcontent-%COMP%] {\n    display: flex;\n }\n.medication-property-icon[_ngcontent-%COMP%] {\n    width: 20px;\n    height: 20px;\n    background-repeat: no-repeat;\n    background-size: 100%;\n}\n.blacktrianglemedcine[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Black_Triangle_Medcine.svg);\n     \n}\n.clinicaltrialmedicine[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Clinical_Trial_Medicine.svg);\n     \n}\n.controlleddrug[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Controlled_Drug.svg);\n     \n}\n.critialdrug[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Critical_Drug.svg);\n     \n}\n.expensivemedication[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Expensive_Therapy.svg);\n     \n}\n.highalertmedication[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/High_Alert_Medication.svg);\n     \n}\n.nonformularymedication[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Non-Formulary_Medicine.svg);\n     \n}\n.unlicencedmedicine[_ngcontent-%COMP%] {\n    background-image: url(/assets/images/epma/medicationproperty/Unlicenced_Medicine.svg);\n     \n}\n \n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wcmVzY3JpcHRpb24tbm9uLWluZnVzaW9uLXByaW50LXRlbXBsYXRlL3ByZXNjcmlwdGlvbi1ub24taW5mdXNpb24tcHJpbnQtdGVtcGxhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksY0FBYztJQUNkLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsbUJBQW1CO0FBQ3ZCO0NBQ0MsaURBQWlEO0NBQ2pEO0lBQ0csYUFBYTtDQUNoQjtBQUNEO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWiw0QkFBNEI7SUFDNUIscUJBQXFCO0FBQ3pCO0FBQ0E7SUFDSSx3RkFBd0Y7O0FBRTVGO0FBQ0E7SUFDSSx5RkFBeUY7O0FBRTdGO0FBQ0E7SUFDSSxpRkFBaUY7O0FBRXJGO0FBQ0E7SUFDSSwrRUFBK0U7O0FBRW5GO0FBQ0E7SUFDSSxtRkFBbUY7O0FBRXZGO0FBQ0E7SUFDSSx1RkFBdUY7O0FBRTNGO0FBQ0E7SUFDSSx3RkFBd0Y7O0FBRTVGO0FBQ0E7SUFDSSxxRkFBcUY7O0FBRXpGIiwic291cmNlc0NvbnRlbnQiOlsiLmVtcGEtdGVtcGxhdGUtYm9sZHtcbiAgICBmb250LXNpemU6IDEuMWVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICAgIGNvbG9yOiAjNjQ2NDY0O1xuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XG59XG4uZW1wYS10ZW1wbGF0ZS1kb3Nle1xuICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gICAgY29sb3I6ICM2NDY0NjQ7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5lbXBhLXRlbXBsYXRlLWRvc2UtbGFiZWwsLmVtcGEtdGVtcGxhdGUtaW5kdWN0aW9uLWxhYmVsIHtcbiAgICBjb2xvcjogIzc4OTFEODtcbiAgICBmb250LXdlaWdodDogYm9sZDsgXG59XG4uZW1wYS10ZW1wbGF0ZS1kb3NlLXRleHQsLmVtcGEtdGVtcGxhdGUtaW5kdWN0aW9uLXRleHQge1xuICAgIGZvbnQtc2l6ZTogMS4xZW07XG4gICAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gICAgY29sb3I6ICM2NDY0NjQ7XG4gICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cbiAvKiAtLS0tLS0tLS0gbWVkaWNhdGlvbiBwcm9wZXJ0eSBpY29uIC0tLS0tLS0tLS0qL1xuIC5tZWRpY2F0aW9uLXByb3BlcnR5IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuIH1cbi5tZWRpY2F0aW9uLXByb3BlcnR5LWljb24ge1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcbn1cbi5ibGFja3RyaWFuZ2xlbWVkY2luZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvbWVkaWNhdGlvbnByb3BlcnR5L0JsYWNrX1RyaWFuZ2xlX01lZGNpbmUuc3ZnKTtcbiAgICAgXG59XG4uY2xpbmljYWx0cmlhbG1lZGljaW5lIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS9tZWRpY2F0aW9ucHJvcGVydHkvQ2xpbmljYWxfVHJpYWxfTWVkaWNpbmUuc3ZnKTtcbiAgICAgXG59XG4uY29udHJvbGxlZGRydWcge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL21lZGljYXRpb25wcm9wZXJ0eS9Db250cm9sbGVkX0RydWcuc3ZnKTtcbiAgICAgXG59XG4uY3JpdGlhbGRydWcge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL21lZGljYXRpb25wcm9wZXJ0eS9Dcml0aWNhbF9EcnVnLnN2Zyk7XG4gICAgIFxufVxuLmV4cGVuc2l2ZW1lZGljYXRpb24ge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL21lZGljYXRpb25wcm9wZXJ0eS9FeHBlbnNpdmVfVGhlcmFweS5zdmcpO1xuICAgICBcbn1cbi5oaWdoYWxlcnRtZWRpY2F0aW9uIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS9tZWRpY2F0aW9ucHJvcGVydHkvSGlnaF9BbGVydF9NZWRpY2F0aW9uLnN2Zyk7XG4gICAgIFxufVxuLm5vbmZvcm11bGFyeW1lZGljYXRpb24ge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL21lZGljYXRpb25wcm9wZXJ0eS9Ob24tRm9ybXVsYXJ5X01lZGljaW5lLnN2Zyk7XG4gICAgIFxufVxuLnVubGljZW5jZWRtZWRpY2luZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvbWVkaWNhdGlvbnByb3BlcnR5L1VubGljZW5jZWRfTWVkaWNpbmUuc3ZnKTtcbiAgICAgXG59XG4gIl0sInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 1909:
/*!*************************************************************************!*\
  !*** ./src/app/components/print-discharge/print-discharge.component.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrintDischargeComponent: () => (/* binding */ PrintDischargeComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ 2752);
/* harmony import */ var src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/enum */ 6134);
/* harmony import */ var canvg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! canvg */ 1808);
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dompurify */ 2746);
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! html2canvas */ 822);
/* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(html2canvas__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 2510);
/* harmony import */ var src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/models/filter.model */ 3060);
/* harmony import */ var pdfmake_build_vfs_fonts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pdfmake/build/vfs_fonts */ 5360);
/* harmony import */ var src_app_services_helper_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/helper.service */ 4102);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/app.service */ 529);
/* harmony import */ var src_app_services_apirequest_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/apirequest.service */ 5351);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/common */ 316);















const _c0 = ["dischargeSummaryElement"];
function PrintDischargeComponent_div_0_ng_container_33_div_5_div_7_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 24)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dse_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("Day ", i_r2 + 1, " :");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", dse_r1, " ");
  }
}
function PrintDischargeComponent_div_0_ng_container_33_div_5_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, PrintDischargeComponent_div_0_ng_container_33_div_5_div_7_div_3_Template, 4, 2, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const unchanged_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", unchanged_r3.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_33_div_5_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const unchanged_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](unchanged_r3.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_33_div_5_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const unchanged_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](unchanged_r3.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_33_div_5_div_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Comments: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const unchanged_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](unchanged_r3.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_33_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](2, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "div", 20)(4, "span", 21)(5, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](7, PrintDischargeComponent_div_0_ng_container_33_div_5_div_7_Template, 4, 1, "div", 12)(8, PrintDischargeComponent_div_0_ng_container_33_div_5_div_8_Template, 6, 1, "div", 12)(9, PrintDischargeComponent_div_0_ng_container_33_div_5_div_9_Template, 6, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](10, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](11, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](12, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](13, PrintDischargeComponent_div_0_ng_container_33_div_5_div_13_Template, 5, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const unchanged_r3 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](unchanged_r3.__medications[0].name);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(unchanged_r3).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(unchanged_r3).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(unchanged_r3).frequency !== "protocol" && ctx_r3.appService.GetCurrentPosology(unchanged_r3).frequency !== "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", unchanged_r3.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_33_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "div", 5)(2, "div", 16)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, " Unchanged ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](5, PrintDischargeComponent_div_0_ng_container_33_div_5_Template, 14, 5, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r3.unChangedPres);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_div_7_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 24)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dse_r5 = ctx.$implicit;
    const i_r6 = ctx.index;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("Day ", i_r6 + 1, " :");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", dse_r5, " ");
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, PrintDischargeComponent_div_0_ng_container_34_div_5_div_7_div_3_Template, 4, 2, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const changed_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", changed_r7.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const changed_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](changed_r7.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const changed_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](changed_r7.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_div_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Comments: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const changed_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](changed_r7.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_div_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Change Reason: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const changed_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](changed_r7.reasonforediting);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](2, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "div", 20)(4, "span", 21)(5, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](7, PrintDischargeComponent_div_0_ng_container_34_div_5_div_7_Template, 4, 1, "div", 12)(8, PrintDischargeComponent_div_0_ng_container_34_div_5_div_8_Template, 6, 1, "div", 12)(9, PrintDischargeComponent_div_0_ng_container_34_div_5_div_9_Template, 6, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](10, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](11, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](12, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](13, PrintDischargeComponent_div_0_ng_container_34_div_5_div_13_Template, 5, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](14, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](15, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](16, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](17, PrintDischargeComponent_div_0_ng_container_34_div_5_div_17_Template, 5, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const changed_r7 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](changed_r7.__medications[0].name);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(changed_r7).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(changed_r7).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(changed_r7).frequency !== "protocol" && ctx_r3.appService.GetCurrentPosology(changed_r7).frequency !== "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", changed_r7.comments);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", changed_r7.reasonforediting);
  }
}
function PrintDischargeComponent_div_0_ng_container_34_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "div", 5)(2, "div", 16)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, " Changed ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](5, PrintDischargeComponent_div_0_ng_container_34_div_5_Template, 18, 6, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r3.changedPres);
  }
}
function PrintDischargeComponent_div_0_ng_container_35_div_5_div_7_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 24)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dse_r8 = ctx.$implicit;
    const i_r9 = ctx.index;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("Day ", i_r9 + 1, " :");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", dse_r8, " ");
  }
}
function PrintDischargeComponent_div_0_ng_container_35_div_5_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, PrintDischargeComponent_div_0_ng_container_35_div_5_div_7_div_3_Template, 4, 2, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const stopped_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", stopped_r10.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_35_div_5_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const stopped_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](stopped_r10.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_35_div_5_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const stopped_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](stopped_r10.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_35_div_5_div_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Comments: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const stopped_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](stopped_r10.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_35_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](2, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "div", 25)(4, "span", 21)(5, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](7, PrintDischargeComponent_div_0_ng_container_35_div_5_div_7_Template, 4, 1, "div", 12)(8, PrintDischargeComponent_div_0_ng_container_35_div_5_div_8_Template, 6, 1, "div", 12)(9, PrintDischargeComponent_div_0_ng_container_35_div_5_div_9_Template, 6, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](10, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](11, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](12, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](13, PrintDischargeComponent_div_0_ng_container_35_div_5_div_13_Template, 5, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](14, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](15, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](16, "div", 20)(17, "div")(18, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](19, "Reason : ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](20, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](21);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()()()();
  }
  if (rf & 2) {
    const stopped_r10 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](stopped_r10.__medications[0].name);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(stopped_r10).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(stopped_r10).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(stopped_r10).frequency !== "protocol" && ctx_r3.appService.GetCurrentPosology(stopped_r10).frequency !== "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", stopped_r10.comments);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ctx_r3.GetDischargeSummaryMessage(stopped_r10, "SUMNO", "stopped"));
  }
}
function PrintDischargeComponent_div_0_ng_container_35_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "div", 5)(2, "div", 16)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, " Stopped ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](5, PrintDischargeComponent_div_0_ng_container_35_div_5_Template, 22, 6, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r3.stoppedPres);
  }
}
function PrintDischargeComponent_div_0_ng_container_36_div_5_div_7_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dse_r11 = ctx.$implicit;
    const i_r12 = ctx.index;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("Day ", i_r12 + 1, " :");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", dse_r11, " ");
  }
}
function PrintDischargeComponent_div_0_ng_container_36_div_5_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, PrintDischargeComponent_div_0_ng_container_36_div_5_div_7_div_3_Template, 4, 2, "div", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const suspended_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", suspended_r13.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_36_div_5_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const suspended_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](suspended_r13.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_36_div_5_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const suspended_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](suspended_r13.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_36_div_5_div_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Comments: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const suspended_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](suspended_r13.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_36_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](2, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "div", 20)(4, "span", 21)(5, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](7, PrintDischargeComponent_div_0_ng_container_36_div_5_div_7_Template, 4, 1, "div", 12)(8, PrintDischargeComponent_div_0_ng_container_36_div_5_div_8_Template, 6, 1, "div", 12)(9, PrintDischargeComponent_div_0_ng_container_36_div_5_div_9_Template, 6, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](10, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](11, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](12, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](13, PrintDischargeComponent_div_0_ng_container_36_div_5_div_13_Template, 5, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](14, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](15, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](16, "div", 20)(17, "div")(18, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](19, "Reason : ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](20, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](21);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()()()();
  }
  if (rf & 2) {
    const suspended_r13 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](suspended_r13.__medications[0].name);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(suspended_r13).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(suspended_r13).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(suspended_r13).frequency !== "protocol" && ctx_r3.appService.GetCurrentPosology(suspended_r13).frequency !== "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", suspended_r13.comments);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ctx_r3.GetDischargeSummaryMessage(suspended_r13, "SUMNO", "suspended"));
  }
}
function PrintDischargeComponent_div_0_ng_container_36_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "div", 5)(2, "div", 16)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, " Suspended ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](5, PrintDischargeComponent_div_0_ng_container_36_div_5_Template, 22, 6, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r3.suspendedPres);
  }
}
function PrintDischargeComponent_div_0_ng_container_37_div_5_div_8_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 24)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const dse_r14 = ctx.$implicit;
    const i_r15 = ctx.index;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"]("Day ", i_r15 + 1, " :");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", dse_r14, " ");
  }
}
function PrintDischargeComponent_div_0_ng_container_37_div_5_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](3, PrintDischargeComponent_div_0_ng_container_37_div_5_div_8_div_3_Template, 4, 2, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ne_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ne_r16.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_37_div_5_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ne_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ne_r16.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_37_div_5_div_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "div")(2, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](3, "Dose: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ne_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ne_r16.showDoses);
  }
}
function PrintDischargeComponent_div_0_ng_container_37_div_5_div_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "Comments: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ne_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ne_r16.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_37_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 18)(1, "div", 5)(2, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](4, "div", 20)(5, "span", 21)(6, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](8, PrintDischargeComponent_div_0_ng_container_37_div_5_div_8_Template, 4, 1, "div", 12)(9, PrintDischargeComponent_div_0_ng_container_37_div_5_div_9_Template, 6, 1, "div", 12)(10, PrintDischargeComponent_div_0_ng_container_37_div_5_div_10_Template, 6, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](11, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](12, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](13, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](14, PrintDischargeComponent_div_0_ng_container_37_div_5_div_14_Template, 5, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ne_r16 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵclassMap"]("layers-container therapy-type ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ne_r16.__medications[0].name);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(ne_r16).frequency == "protocol");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(ne_r16).frequency == "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.appService.GetCurrentPosology(ne_r16).frequency !== "protocol" && ctx_r3.appService.GetCurrentPosology(ne_r16).frequency !== "variable");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ne_r16.comments);
  }
}
function PrintDischargeComponent_div_0_ng_container_37_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "div", 5)(2, "div", 16)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, " New ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](5, PrintDischargeComponent_div_0_ng_container_37_div_5_Template, 15, 8, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngForOf", ctx_r3.newPres);
  }
}
function PrintDischargeComponent_div_0_ng_container_38_div_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 29)(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipe"](3, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, "\u00A0\u00A0 ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](5, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵpipeBind2"](3, 2, ctx_r3.notesDisplayData[0].modifiedon, "dd-MMM-yyyy"));
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ctx_r3.notesDisplayData[0].modifiedby);
  }
}
function PrintDischargeComponent_div_0_ng_container_38_div_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](2, "\u00A0\u00A0 ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
}
function PrintDischargeComponent_div_0_ng_container_38_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](1, "div", 5)(2, "div", 16)(3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](4, " Discharge Notes ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](5, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](6, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](7, "div", 20)(8, "div", 27)(9, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](11, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](12, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](13, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](14, PrintDischargeComponent_div_0_ng_container_38_div_14_Template, 7, 5, "div", 28)(15, PrintDischargeComponent_div_0_ng_container_38_div_15_Template, 4, 0, "div", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ctx_r3.dischargeComments.notes);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", (ctx_r3.notesDisplayData == null ? null : ctx_r3.notesDisplayData.length) > 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", (ctx_r3.notesDisplayData == null ? null : ctx_r3.notesDisplayData.length) == 0);
  }
}
function PrintDischargeComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 3)(1, "div", 4, 0)(3, "div", 5)(4, "div", 6)(5, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](6, " Discharge Summary");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](7, "div", 8)(8, "div", 9)(9, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](10, " Name: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](11, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](13, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](14, " NHS Number: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](15, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](16);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](17, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](18, "div", 9)(19, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](20, " DOB: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](21, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](22);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](23, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](24, " Hospital Number: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](25, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](26);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](27, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](28, "div", 11)(29, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](30);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](31, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](32);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](33, PrintDischargeComponent_div_0_ng_container_33_Template, 6, 1, "ng-container", 12)(34, PrintDischargeComponent_div_0_ng_container_34_Template, 6, 1, "ng-container", 12)(35, PrintDischargeComponent_div_0_ng_container_35_Template, 6, 1, "ng-container", 12)(36, PrintDischargeComponent_div_0_ng_container_36_Template, 6, 1, "ng-container", 12)(37, PrintDischargeComponent_div_0_ng_container_37_Template, 6, 1, "ng-container", 12)(38, PrintDischargeComponent_div_0_ng_container_38_Template, 16, 3, "ng-container", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](39, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelement"](40, "div", 10)(41, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](42, "div", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtext"](43, " Prescribed by: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](12);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](ctx_r3.appService.patientDetails.fullname);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](" " + ctx_r3.appService.patientDetails.nhsnumber + " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](" " + ctx_r3.appService.patientDetails.born + " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate"](" " + ctx_r3.appService.patientDetails.hospitalnumber + " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Height: " + ctx_r3.appService.refHeightValue + " " + "cms", " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtextInterpolate1"](" ", "Weight: " + ctx_r3.appService.refWeightValue + " " + "kg", " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.unChangedPres && ctx_r3.unChangedPres.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.changedPres && ctx_r3.changedPres.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.stoppedPres && ctx_r3.stoppedPres.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.suspendedPres && ctx_r3.suspendedPres.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.newPres && ctx_r3.newPres.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx_r3.dischargeComments);
  }
}
function PrintDischargeComponent_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementContainer"](0);
  }
}
function PrintDischargeComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementStart"](0, "div", 30, 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](2, PrintDischargeComponent_div_1_ng_container_2_Template, 1, 0, "ng-container", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.customTemplate);
  }
}
const pdfMake = __webpack_require__(/*! pdfmake/build/pdfmake.js */ 7888);
const htmlToPdfmake = __webpack_require__(/*! html-to-pdfmake */ 887);
pdfMake.vfs = pdfmake_build_vfs_fonts__WEBPACK_IMPORTED_MODULE_6__.pdfMake.vfs;
class PrintDischargeComponent {
  constructor(hs, appService, apiRequest) {
    this.hs = hs;
    this.appService = appService;
    this.apiRequest = apiRequest;
    this.view = 'p';
    this.dimensions = [800, 650];
    this.title = 'Discharge Summary';
    this.saveTitle = 'Discharge Summary';
    this.measuringUnit = 'pt';
    this.destroyComponent = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    this.getRecordedNotes = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    this.patientDetails = {
      fullname: '',
      born: '',
      hospitalnumber: '',
      nhsnumber: '',
      allergies: '',
      dob: '',
      age: '',
      gender: '',
      address: ''
    };
    this.subscriptions = new rxjs__WEBPACK_IMPORTED_MODULE_11__.Subscription();
    this.arrreconcilation = [];
    this.AdditionalInfo = false;
    this.latestNotes = "";
    this.NodesType = "";
  }
  ngOnInit() {
    console.log('this.customTemplate', this.customTemplate);
    if (!this.customTemplate) {
      this.dischargeComments = this.dischargeComments[0];
      this.getRecordedNotes.emit('');
      this.hs.getDosesPrescriptions(this.unChangedPres);
      this.hs.getDosesPrescriptions(this.changedPres);
      this.hs.getDosesPrescriptions(this.stoppedPres);
      this.hs.getDosesPrescriptions(this.suspendedPres);
      this.hs.getDosesPrescriptions(this.newPres);
      // console.log("suspendedPres", this.suspendedPres);
      console.log("stoppedPres", this.stoppedPres);
      // this.stoppedPrescription(this.stoppedPres);
      this.unChangedPres.forEach(pres => {
        const typeOfMedicine = this.getTherapyType(pres);
        pres["type_of_medicine"] = typeOfMedicine;
      });
      this.changedPres.forEach(pres => {
        const typeOfMedicine = this.getTherapyType(pres);
        pres["type_of_medicine"] = typeOfMedicine;
      });
      this.stoppedPres.forEach(pres => {
        const typeOfMedicine = this.getTherapyType(pres);
        pres["type_of_medicine"] = typeOfMedicine;
      });
      this.suspendedPres.forEach(pres => {
        const typeOfMedicine = this.getTherapyType(pres);
        pres["type_of_medicine"] = typeOfMedicine;
      });
      this.newPres.forEach(pres => {
        const typeOfMedicine = this.getTherapyType(pres);
        pres["type_of_medicine"] = typeOfMedicine;
      });
    }
    this.getAllergiesList();
    canvg__WEBPACK_IMPORTED_MODULE_12__;
    dompurify__WEBPACK_IMPORTED_MODULE_2__;
    html2canvas__WEBPACK_IMPORTED_MODULE_3__;
  }
  ngAfterViewInit() {
    // this.createPdf();
    setTimeout(() => {
      this.downloadAsPDF();
    }, 1000);
  }
  downloadAsPDF() {
    this.patientDetails = this.appService.patientDetails;
    const splitAge = this.patientDetails.born?.split(' ');
    this.patientDetails.dob = splitAge[0] + ' ' + splitAge[1] + ' ' + splitAge[2];
    this.patientDetails.age = splitAge[3];
    var printType = this.printType;
    let htmlToPdfOptions = {
      "tableAutoSize": true,
      "removeExtraBlanks": true,
      "removeTagClasses": true
    };
    const pdfTable = this.dischargeSummaryElement.nativeElement;
    var html = htmlToPdfmake(pdfTable.innerHTML, htmlToPdfOptions);
    var documentDefinition = {
      header: (currentPage, pageCount, pageSize) => {
        // you can apply any logic and return any valid pdfmake element
        if (currentPage > 1) {
          return {
            columns: [{
              text: ' ' + this.patientDetails.fullname.split(',')[0] + ',  ' + this.patientDetails.fullname.split(',')[1] + ', ' + this.patientDetails.dob + ', ' + this.patientDetails.age + ', ' + this.patientDetails.gender + ', ' + this.patientDetails.hospitalnumber + ', ' + this.patientDetails.nhsnumber + ', ' + this.patientDetails.address + '\n' + this.allergiesString,
              alignment: 'center',
              style: 'header'
            }
            // { text: this.allergiesString , alignment : 'center', style: 'header'},
            ],
            margin: [0, 10, 0, 10]
          };
        }
      },
      footer: function (currentPage, pageCount, pageSize) {
        let currTime = moment__WEBPACK_IMPORTED_MODULE_4___default()(moment__WEBPACK_IMPORTED_MODULE_4___default()()).format('HH:mm');
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();
        let date = dd + '/' + mm + '/' + yyyy;
        if (printType == 'empty') {
          return {
            columns: [{
              text: 'Prescriber to print name, sign & date:________________________',
              alignment: 'left',
              style: 'footer'
            }, {
              text: 'Royal National Orthopaedic Hospital Trust, Brockley Hill, Stanmore, Middlesex HA7 4LP. Tel: 020 8954 2300',
              alignment: 'right',
              style: 'footer'
            }, {
              text: 'Page ' + currentPage.toString() + ' of ' + pageCount + ' Date/Time: ' + date + ' ' + currTime,
              alignment: 'center',
              style: 'footer'
            }],
            margin: [10, 10, 0, 5]
          };
        } else {
          return {
            columns: [{
              text: 'Royal National Orthopaedic Hospital Trust, Brockley Hill, Stanmore, Middlesex HA7 4LP. Tel: 020 8954 2300 \n Page ' + currentPage.toString() + ' of ' + pageCount + ' Date/Time: ' + date + ' ' + currTime,
              alignment: 'center',
              style: 'footer'
            }],
            margin: [0, 5, 0, 5]
          };
        }
        // return 'Page '+currentPage.toString() + ' of ' + pageCount + ' Date/Time: ' + date+ ' ' + currTime; 
      },
      pageMargins: [10, 45, 25, 30],
      // pageOrientation: 'portrait', 
      pageSize: {
        width: 595,
        height: 842
      },
      Times: {
        normal: 'Times-Roman',
        bold: 'Times-Bold',
        italics: 'Times-Italic',
        bolditalics: 'Times-BoldItalic'
      },
      content: html,
      styles: {
        header: {
          fontSize: 8,
          italics: true,
          color: 'grey'
        },
        footer: {
          fontSize: 8,
          italics: true,
          color: 'grey'
        }
      }
    };
    pdfMake.createPdf(documentDefinition).open();
    this.destroyComponent.emit('destroy');
  }
  // create pdf from html and display in new tab.
  createPdf() {
    // console.log('patientDetails',this.patientDetails);
    this.patientDetails = this.appService.patientDetails;
    const splitAge = this.patientDetails.born?.split(' ');
    this.patientDetails.dob = splitAge[0] + ' ' + splitAge[1] + ' ' + splitAge[2];
    this.patientDetails.age = splitAge[3];
    let title = this.title;
    let pdf = new jspdf__WEBPACK_IMPORTED_MODULE_0__.jsPDF(this.view, this.measuringUnit, this.dimensions, true);
    var element = this.dischargeSummaryElement.nativeElement;
    if (this.customTemplate) {
      pdf.html(this.dischargeSummaryElement.nativeElement, {
        margin: [40, 0, 30, 0],
        callback: pdf => {
          pdf.setProperties({
            title: this.title
          });
          const pageCount = pdf.getNumberOfPages();
          let currTime = moment__WEBPACK_IMPORTED_MODULE_4___default()(moment__WEBPACK_IMPORTED_MODULE_4___default()()).format('HH:mm');
          for (var i = 1; i <= pageCount; i++) {
            pdf.setPage(i);
            if (i > 1) {
              pdf.setFont(undefined, 'bold');
              pdf.text('Name: ' + this.patientDetails.fullname.split(',')[0] + ',  ' + this.patientDetails.fullname.split(',')[1] + ' DOB: ' + this.patientDetails.dob + ' Age: ' + this.patientDetails.age + ' Gender: ' + (this.patientDetails.gender == 'Male' ? 'M' : 'F') + ' Hospital Number: ' + this.patientDetails.hospitalnumber + ' NHS Number: ' + this.patientDetails.nhsnumber, 130, 30, null, null);
            }
            pdf.setFont(undefined, 'normal');
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();
            let date = dd + '/' + mm + '/' + yyyy;
            pdf.text('Page ' + String(i) + ' of ' + pageCount + ' Date/Time: ' + date + ' ' + currTime, 350, 580, null, null);
            // pdf.text('Page '+ String(i) + ' of ' + pageCount + ' Time: ' + currTime,350,580,null,null);
          }
          window.open(pdf.output('bloburl'), '_blank');
          this.destroyComponent.emit('destroy');
        }
      });
      // var opt = {
      //   margin:       [40,0,30,0],
      //   html2canvas:  { scale: 2 },
      //   jsPDF:        { unit: this.measuringUnit, format: this.dimensions, orientation: this.view },
      //   pagebreak:    { mode: ['avoid-all', 'css'] },
      // };
      // html2pdf().from(element).set(opt).toPdf().get('pdf').then((pdf) => {
      //   var totalPages = pdf.internal.getNumberOfPages();
      //   let currTime = moment(moment()).format('HH:mm');
      //   for (let i = 1; i <= totalPages; i++) {
      //     pdf.setPage(i);
      //     // set header to every page
      //     if(i > 1)
      //     {
      //       pdf.setFont(undefined,'bold');
      //       pdf.text('Name: ' + this.patientDetails.fullname.split(',')[0]+',  ' + this.patientDetails.fullname.split(',')[1] + ' DOB: ' + this.patientDetails.dob + ' Age: ' + this.patientDetails.age + ' Gender: ' + ((this.patientDetails.gender == 'Male')?'M':'F') + ' Hospital Number: ' + this.patientDetails.hospitalnumber + ' NHS Number: ' + this.patientDetails.nhsnumber,130,30,null,null);
      //     }
      //    // set footer to every page
      //     pdf.setFont(undefined,'normal');
      //     pdf.setFontSize(10);
      //     var today = new Date();
      //     var dd = String(today.getDate()).padStart(2, '0');
      //     var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
      //     var yyyy = today.getFullYear();
      //     let date =dd + '/' + mm + '/' + yyyy;
      //     pdf.text('Page '+ String(i) + ' of ' + totalPages + ' Date/Time: ' + date+ ' ' + currTime,320,580,null,null);
      //   }
      //   window.open(<any>pdf.output('bloburl'), '_blank');
      //   this.destroyComponent.emit('destroy');
      // })
    } else {
      pdf.html(this.dischargeSummaryElement.nativeElement, {
        margin: [40, 0, 40, 0],
        callback: pdf => {
          // pdf.save('doc.pdf');    // for saving the document directly.
          pdf.setProperties({
            title: this.title
          });
          const pageCount = pdf.getNumberOfPages();
          let currTime = moment__WEBPACK_IMPORTED_MODULE_4___default()(moment__WEBPACK_IMPORTED_MODULE_4___default()()).format('HH:mm');
          for (var i = 1; i <= pageCount; i++) {
            pdf.setPage(i);
            if (i > 1) {
              pdf.setFont(undefined, 'bold');
              pdf.text('Name: ' + this.patientDetails.fullname.split(',')[0] + ',  ' + this.patientDetails.fullname.split(',')[1] + ' DOB: ' + this.patientDetails.dob + ' Age: ' + this.patientDetails.age + ' Gender: ' + (this.patientDetails.gender == 'Male' ? 'M' : 'F') + ' Hospital Number: ' + this.patientDetails.hospitalnumber + ' NHS Number: ' + this.patientDetails.nhsnumber, 50, 30, null, null);
            }
            pdf.setFont(undefined, 'normal');
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();
            let date = dd + '-' + mm + '-' + yyyy;
            pdf.text('Page ' + String(i) + ' of ' + pageCount + ' Date: ' + date + ' Time: ' + currTime, 250, 780, null, null);
          }
          window.open(pdf.output('bloburl'), '_blank');
          this.destroyComponent.emit('destroy');
        }
      });
      // var opt1 = {
      //   margin:       [40,0,30,0],
      //   html2canvas:  { scale: 2 },
      //   jsPDF:        { unit: this.measuringUnit, format: this.dimensions, orientation: this.view },
      //   pagebreak:    { mode: ['avoid-all', 'css'] }
      // };
      // html2pdf().from(element).set(opt1).toPdf().get('pdf').then((pdf) => {
      //   var totalPages = pdf.internal.getNumberOfPages();
      //   let currTime = moment(moment()).format('HH:mm');
      //   for (let i = 1; i <= totalPages; i++) {
      //     pdf.setPage(i);
      //     // set header to every page
      //     if(i > 1)
      //     {
      //       pdf.setFont(undefined,'bold');
      //       pdf.text('Name: ' + this.patientDetails.fullname.split(',')[0]+',  ' + this.patientDetails.fullname.split(',')[1] + ' DOB: ' + this.patientDetails.dob + ' Age: ' + this.patientDetails.age + ' Gender: ' + ((this.patientDetails.gender == 'Male')?'M':'F') + ' Hospital Number: ' + this.patientDetails.hospitalnumber + ' NHS Number: ' + this.patientDetails.nhsnumber,50,30,null,null);
      //     }
      //    // set footer to every page
      //     pdf.setFont(undefined,'normal');
      //     pdf.setFontSize(10);
      //     var today = new Date();
      //     var dd = String(today.getDate()).padStart(2, '0');
      //     var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
      //     var yyyy = today.getFullYear();
      //     let date =dd + '/' + mm + '/' + yyyy;
      //     pdf.text('Page '+ String(i) + ' of ' + totalPages + ' Date/Time: ' + date+ ' ' + currTime,200,830,null,null);
      //   }
      //   window.open(<any>pdf.output('bloburl'), '_blank');
      //   this.destroyComponent.emit('destroy');
      // })
    }
  }
  getTherapyType(pres) {
    this.primaryMedication = pres.__medications.find(e => e.isprimary == true);
    if (!this.primaryMedication.form) {
      return "therapy";
    } else if (this.primaryMedication.form.toLowerCase().indexOf("tablet") != -1 || this.primaryMedication.form.toLowerCase().indexOf("capsule") != -1) {
      return "TabletorCapsule";
    } else if (this.primaryMedication.form.toLowerCase().indexOf("injection") != -1) {
      return "Injection";
    } else if (this.primaryMedication.form.toLowerCase().indexOf("infusion") != -1) {
      if (pres.infusiontype_id == "ci" || pres.infusiontype_id == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.InfusionType.pca) {
        return "ContinuousInfusion";
      } else {
        return "Infusion";
      }
    } else if (this.primaryMedication.form.toLowerCase().indexOf("fluid") != -1) {
      return "BasicFluids";
    } else if (this.primaryMedication.form.toLowerCase().indexOf("inhalation") != -1) {
      return "Inhalation";
    } else {
      return "therapy";
    }
  }
  CreateSessionFilter() {
    const condition = "encounterid=@encounterid";
    const f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__.filter(condition));
    const pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__.filterparam("encounterid", this.appService.encounter.encounter_id));
    const select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__.selectstatement("SELECT *");
    const orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_5__.orderbystatement("ORDER BY 2");
    const body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  getAllergiesList() {
    let getAllergyListForPersonURI = this.appService.baseURI + "/GetBaseViewListByAttribute/terminus_personallergylist?synapseattributename=person_id&attributevalue=" + this.appService.personId + "&orderby=clinicalstatusvalue ASC, causativeagentcodesystem DESC, _sequenceid DESC";
    this.subscriptions.add(this.apiRequest.getRequest(getAllergyListForPersonURI).subscribe(response => {
      let allergies = JSON.parse(response);
      this.allergyIntoleranceList = allergies.filter(x => x.clinicalstatusvalue == 'Active');
      let string = '';
      this.allergyIntoleranceList.forEach(function (element, idx, array) {
        if (idx === array.length - 1) {
          string += element.causativeagentdescription;
        } else {
          string += element.causativeagentdescription + ', ';
        }
      });
      this.allergiesString = string;
    }));
  }
  GetDischargeSummaryMessage(pres, componenttype, sumstatus) {
    // discharge summary comment
    let dischargeSummaryComment = "";
    let dischargeSummarystatus = "";
    if (componenttype == 'SUMNO') {
      let prescription_stop_statusid = this.appService.MetaPrescriptionstatus.find(x => x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.stopped || x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.cancelled).prescriptionstatus_id;
      let prescription_cancel_statusid = this.appService.MetaPrescriptionstatus.find(x => x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.cancelled).prescriptionstatus_id;
      let prescription_suspend_statusid = this.appService.MetaPrescriptionstatus.find(x => x.status == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended).prescriptionstatus_id;
      let allPrescription = this.appService.Prescription.filter(x => x.__medications.find(x => x.isprimary).__codes[0].code == pres.__medications.find(x => x.isprimary).__codes[0].code && x.prescriptioncontext_id != this.appService.MetaPrescriptioncontext.find(y => y.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Discharge).prescriptioncontext_id);
      if (sumstatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.stopped) {
        let allStop = allPrescription.filter(x => x.prescriptionstatus_id == prescription_stop_statusid || x.prescriptionstatus_id == prescription_cancel_statusid).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) ? -1 : 0);
        if (allStop && allStop.length > 0) {
          let comment = this.appService.prescriptionEvent.find(e => e.prescriptionid == allStop[0].prescription_id);
          if (comment) {
            dischargeSummaryComment = comment.comments;
            this.dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.stopped;
          }
        }
      }
      if (sumstatus == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended) {
        let addedToChart = allPrescription.filter(x => x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(y => y.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Inpatient).prescriptioncontext_id).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) ? -1 : 0);
        ;
        if (addedToChart && addedToChart.length == 0)
          // this drug was not added to drug chart as inpatient medication 
          {
            dischargeSummaryComment = "Medicine suspended on admission";
            dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended;
          } else {
          let allActive = allPrescription.filter(x => x.prescriptioncontext_id == this.appService.MetaPrescriptioncontext.find(y => y.context == src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionContext.Inpatient).prescriptioncontext_id && x.prescriptionstatus_id != prescription_suspend_statusid && x.prescriptionstatus_id != prescription_stop_statusid && x.prescriptionstatus_id != prescription_cancel_statusid).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) ? -1 : 0);
          ;
          if (allActive && allActive.length > 0)
            // added to drug chart as inpatient medicaiton but, not to discharge prescription 
            {
              dischargeSummaryComment = "Medicine suspended on discharge";
              dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended;
            } else {
            let allSuspend = allPrescription.filter(x => x.prescriptionstatus_id == prescription_suspend_statusid).slice().sort((b, a) => moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) ? 1 : moment__WEBPACK_IMPORTED_MODULE_4___default()(b.lastmodifiedon) > moment__WEBPACK_IMPORTED_MODULE_4___default()(a.lastmodifiedon) ? -1 : 0);
            ;
            if (allSuspend && allSuspend.length > 0)
              // added to drug chart and manually suspended 
              {
                let comment = this.appService.prescriptionEvent.find(e => e.prescriptionid == allSuspend[0].prescription_id);
                if (comment) {
                  dischargeSummaryComment = comment.comments;
                  dischargeSummarystatus = src_app_services_enum__WEBPACK_IMPORTED_MODULE_1__.PrescriptionStatus.suspended;
                }
              }
          }
        }
      }
      return dischargeSummaryComment;
    }
  }
  static #_ = this.ɵfac = function PrintDischargeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || PrintDischargeComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_helper_service__WEBPACK_IMPORTED_MODULE_7__.HelperService), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_8__.AppService), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](src_app_services_apirequest_service__WEBPACK_IMPORTED_MODULE_9__.ApirequestService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineComponent"]({
    type: PrintDischargeComponent,
    selectors: [["app-print-discharge"]],
    viewQuery: function PrintDischargeComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵviewQuery"](_c0, 5);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx.dischargeSummaryElement = _t.first);
      }
    },
    inputs: {
      customTemplate: "customTemplate",
      unChangedPres: "unChangedPres",
      changedPres: "changedPres",
      stoppedPres: "stoppedPres",
      suspendedPres: "suspendedPres",
      newPres: "newPres",
      dischargeComments: "dischargeComments",
      view: "view",
      dimensions: "dimensions",
      title: "title",
      saveTitle: "saveTitle",
      measuringUnit: "measuringUnit",
      notesDisplayData: "notesDisplayData",
      printType: "printType"
    },
    outputs: {
      destroyComponent: "destroyComponent",
      getRecordedNotes: "getRecordedNotes"
    },
    decls: 2,
    vars: 2,
    consts: [["dischargeSummaryElement", ""], ["class", "pdfUseOnly", 4, "ngIf"], ["class", "patient-margin margin-bottom table-dimensions", 4, "ngIf"], [1, "pdfUseOnly"], [1, "container"], [1, "row"], [1, "col-7", "text-center", "h5"], [1, "fs-1"], [1, "patient-margin"], [1, "row", "patient-details", "prescription-type"], [1, "col-3", "text-center"], [1, "row", "patient-details", "prescription-type", "patient-details-margin"], [4, "ngIf"], [1, "row", "patient-details", "prescription-type", "doctor-details-margin"], [1, "col-5", "text-center"], [1, "col-2", "text-center"], [1, "col-12", "card-header-pdf", "different-prescriptions", "header-height"], ["class", "prescription-space", 4, "ngFor", "ngForOf"], [1, "prescription-space"], [1, "col-1"], [1, "col-5"], [1, "prescription-type"], [1, "doseLabel"], ["class", "dose", 4, "ngFor", "ngForOf"], [1, "dose"], [1, "col-7"], [4, "ngFor", "ngForOf"], [1, "dose", "prescription-space"], ["class", "dose prescription-space float-left", 4, "ngIf"], [1, "dose", "prescription-space", "float-left"], [1, "patient-margin", "margin-bottom", "table-dimensions"], [4, "ngTemplateOutlet"]],
    template: function PrintDischargeComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵtemplate"](0, PrintDischargeComponent_div_0_Template, 44, 12, "div", 1)(1, PrintDischargeComponent_div_1_Template, 3, 1, "div", 2);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", !ctx.customTemplate);
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵproperty"]("ngIf", ctx.customTemplate);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_13__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_13__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_13__.NgTemplateOutlet, _angular_common__WEBPACK_IMPORTED_MODULE_13__.DatePipe],
    styles: [".check[_ngcontent-%COMP%] {\n  color: red;\n}\n\n.pdfUseOnly[_ngcontent-%COMP%] {\n  visibility: hidden;\n  font-size: 15px;\n}\n\n\n.doseLabel[_ngcontent-%COMP%] {\n  \n\n  font-size: 10px;\n}\n\n.dose[_ngcontent-%COMP%] {\n  font-size: 10px;\n}\n\n.different-prescriptions[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\n\n.prescription-type[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\n\n.dischargeNotes[_ngcontent-%COMP%] {\n  padding-left: 7px;\n}\n\n.patient-details-margin[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n}\n\n.doctor-details-margin[_ngcontent-%COMP%]{\n  margin-top: 20px;\n}\n\n\n\n\n.therapy-type[_ngcontent-%COMP%] {\n  background-size: 100%;\n  width: 45px;\n  height: 45px\n}\n.BasicFluids[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Basic_Fluids.svg);\n}\n.BloodProduct[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Blood_Product.svg);\n}\n.Infusion[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Infusion.svg);\n}\n.ContinuousInfusion[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Continuous_Infusion.svg);\n}\n.Infusion[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Infusion.svg);\n}\n.Inhalation[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Inhalation.svg);\n}\n.Injection[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Injection.svg);\n}\n.MentalHealth[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Mental_Health.svg);\n}\n.TabletorCapsule[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Tablet_Or_Capsule.svg);\n}\n.therapy[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Medication_Type_Not_Defined.svg);\n}\n.continued-therapy[_ngcontent-%COMP%] {\n  background-image: url(/assets/images/epma/therapy/Continued_Therapy.svg);\n}\n\n.layers-container[_ngcontent-%COMP%] {\n  position: relative;\n  float: right;\n  background-position: center;\n  background-repeat: no-repeat;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n.card-header-pdf[_ngcontent-%COMP%] {\n  padding: 0rem, 1rem;\n  margin-bottom: 0;\n  background-color: #f0f3f5;\n  border-bottom: 1px solid #c8ced3;\n}\n\n.patient-details[_ngcontent-%COMP%] {\n  color: darkblue;\n}\n\n.header-height[_ngcontent-%COMP%] {\n  height: 20px;\n}\n\n.prescription-space[_ngcontent-%COMP%] {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n\n.patient-margin[_ngcontent-%COMP%] {\n  margin-left: 80px;\n}\n\n.bottom-margin[_ngcontent-%COMP%] {\n  margin-bottom: 50px;\n}\n\n.table-dimensions[_ngcontent-%COMP%]{\n  width: 700px;\n  font-size: 10px;\n}\n\n\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wcmludC1kaXNjaGFyZ2UvcHJpbnQtZGlzY2hhcmdlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7O0FBR0E7RUFDRSxtQkFBbUI7RUFDbkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7O0FBR0Esa0RBQWtEO0FBQ2xEO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7RUFDWDtBQUNGO0FBQ0E7RUFDRSxtRUFBbUU7QUFDckU7QUFDQTtFQUNFLG9FQUFvRTtBQUN0RTtBQUNBO0VBQ0UsK0RBQStEO0FBQ2pFO0FBQ0E7RUFDRSwwRUFBMEU7QUFDNUU7QUFDQTtFQUNFLCtEQUErRDtBQUNqRTtBQUNBO0VBQ0UsaUVBQWlFO0FBQ25FO0FBQ0E7RUFDRSxnRUFBZ0U7QUFDbEU7QUFDQTtFQUNFLG9FQUFvRTtBQUN0RTtBQUNBO0VBQ0Usd0VBQXdFO0FBQzFFO0FBQ0E7RUFDRSxrRkFBa0Y7QUFDcEY7QUFDQTtFQUNFLHdFQUF3RTtBQUMxRTs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osMkJBQTJCO0VBQzNCLDRCQUE0QjtFQUM1QixTQUFTO0VBR1Qsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGdCQUFnQjtFQUNoQix5QkFBeUI7RUFDekIsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osZUFBZTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIi5jaGVjayB7XG4gIGNvbG9yOiByZWQ7XG59XG5cbi5wZGZVc2VPbmx5IHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICBmb250LXNpemU6IDE1cHg7XG59XG5cblxuLmRvc2VMYWJlbCB7XG4gIC8qIGNvbG9yOnNreWJsdWU7ICovXG4gIGZvbnQtc2l6ZTogMTBweDtcbn1cblxuLmRvc2Uge1xuICBmb250LXNpemU6IDEwcHg7XG59XG5cbi5kaWZmZXJlbnQtcHJlc2NyaXB0aW9ucyB7XG4gIGZvbnQtc2l6ZTogMTJweDtcbn1cblxuLnByZXNjcmlwdGlvbi10eXBlIHtcbiAgZm9udC1zaXplOiAxMnB4O1xufVxuXG4uZGlzY2hhcmdlTm90ZXMge1xuICBwYWRkaW5nLWxlZnQ6IDdweDtcbn1cblxuLnBhdGllbnQtZGV0YWlscy1tYXJnaW4ge1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xufVxuXG4uZG9jdG9yLWRldGFpbHMtbWFyZ2lue1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuXG5cbi8qIC0tLS0tLS0gdGhlcmFweSB0eXBlIGljb24gY3NzIC0tLS0tLS0tLS0tLS0tLS0qL1xuLnRoZXJhcHktdHlwZSB7XG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcbiAgd2lkdGg6IDQ1cHg7XG4gIGhlaWdodDogNDVweFxufVxuLkJhc2ljRmx1aWRzIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvdGhlcmFweS9CYXNpY19GbHVpZHMuc3ZnKTtcbn1cbi5CbG9vZFByb2R1Y3Qge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS90aGVyYXB5L0Jsb29kX1Byb2R1Y3Quc3ZnKTtcbn1cbi5JbmZ1c2lvbiB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL3RoZXJhcHkvSW5mdXNpb24uc3ZnKTtcbn1cbi5Db250aW51b3VzSW5mdXNpb24ge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS90aGVyYXB5L0NvbnRpbnVvdXNfSW5mdXNpb24uc3ZnKTtcbn1cbi5JbmZ1c2lvbiB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL3RoZXJhcHkvSW5mdXNpb24uc3ZnKTtcbn1cbi5JbmhhbGF0aW9uIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvdGhlcmFweS9JbmhhbGF0aW9uLnN2Zyk7XG59XG4uSW5qZWN0aW9uIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2VwbWEvdGhlcmFweS9JbmplY3Rpb24uc3ZnKTtcbn1cbi5NZW50YWxIZWFsdGgge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS90aGVyYXB5L01lbnRhbF9IZWFsdGguc3ZnKTtcbn1cbi5UYWJsZXRvckNhcHN1bGUge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS90aGVyYXB5L1RhYmxldF9Pcl9DYXBzdWxlLnN2Zyk7XG59XG4udGhlcmFweSB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvYXNzZXRzL2ltYWdlcy9lcG1hL3RoZXJhcHkvTWVkaWNhdGlvbl9UeXBlX05vdF9EZWZpbmVkLnN2Zyk7XG59XG4uY29udGludWVkLXRoZXJhcHkge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9pbWFnZXMvZXBtYS90aGVyYXB5L0NvbnRpbnVlZF9UaGVyYXB5LnN2Zyk7XG59XG5cbi5sYXllcnMtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmbG9hdDogcmlnaHQ7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgbWFyZ2luOiAwO1xuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLmNhcmQtaGVhZGVyLXBkZiB7XG4gIHBhZGRpbmc6IDByZW0sIDFyZW07XG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYzZjU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYzhjZWQzO1xufVxuXG4ucGF0aWVudC1kZXRhaWxzIHtcbiAgY29sb3I6IGRhcmtibHVlO1xufVxuXG4uaGVhZGVyLWhlaWdodCB7XG4gIGhlaWdodDogMjBweDtcbn1cblxuLnByZXNjcmlwdGlvbi1zcGFjZSB7XG4gIG1hcmdpbi10b3A6IDE1cHg7XG4gIG1hcmdpbi1ib3R0b206IDE1cHg7XG59XG5cbi5wYXRpZW50LW1hcmdpbiB7XG4gIG1hcmdpbi1sZWZ0OiA4MHB4O1xufVxuXG4uYm90dG9tLW1hcmdpbiB7XG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XG59XG5cbi50YWJsZS1kaW1lbnNpb25ze1xuICB3aWR0aDogNzAwcHg7XG4gIGZvbnQtc2l6ZTogMTBweDtcbn1cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9 */"]
  });
}

/***/ }),

/***/ 9865:
/*!*************************************************************************!*\
  !*** ./src/app/components/template-number/template-number.component.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TemplateNumberComponent: () => (/* binding */ TemplateNumberComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngx-bootstrap/modal */ 2457);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 316);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 4456);




function TemplateNumberComponent_div_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6)(1, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, " Please enter a value greater than 0 ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
}
function TemplateNumberComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6)(1, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, " Templates should be less than 50 ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
}
class TemplateNumberComponent {
  constructor(bsModalRef) {
    this.bsModalRef = bsModalRef;
    this.marType = 'empty';
    this.headerLabelText = 'Enter Number of templates';
    this.colFieldName = 'Number of Templates';
    this.noOfTemplates = 1;
    this.isTemplateNumber = true;
  }
  ngOnInit() {
    if (this.marType === 'active') {
      this.headerLabelText = 'Enter number of days - Past Recorded Administration';
      this.colFieldName = 'Days';
    }
  }
  getTemplates() {
    this.bsModalRef.content.saveDone(this.noOfTemplates);
    this.bsModalRef.hide();
  }
  checkTemplateNumber(event) {
    if (event.target.value > 50) {
      this.isTemplateNumber = false;
    } else {
      this.isTemplateNumber = true;
    }
  }
  checkDecimal(event) {
    return event.charCode >= 48 && event.charCode <= 57;
  }
  cancel() {
    this.bsModalRef.content.cancel();
    this.bsModalRef.hide();
  }
  static #_ = this.ɵfac = function TemplateNumberComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || TemplateNumberComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_1__.BsModalRef));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: TemplateNumberComponent,
    selectors: [["app-template-number"]],
    inputs: {
      marType: "marType"
    },
    decls: 24,
    vars: 6,
    consts: [[1, "modal-header", 2, "padding", "0.5rem 1rem", "background-color", "#E6E6E6"], ["id", "lblRecordWeight", 1, "modal-title"], ["type", "button", "aria-label", "Close", 1, "close", 3, "click"], ["aria-hidden", "true"], [1, "modal-body"], [1, "alert", "alert-light", "border", "border-secondary"], [1, "row"], [1, "col-4"], [1, "text-dark"], [1, "col-8"], ["type", "number", "min", "1", "step", "1", 1, "form-control", 3, "ngModelChange", "keyup", "keypress", "ngModel"], ["class", "row", 4, "ngIf"], [1, "modal-footer"], [1, "col-sm-6"], ["type", "button", 1, "btn", "btn-info", "btn-block", 3, "click", "disabled"], ["type", "button", 1, "btn", "btn-secondary", "btn-block", 3, "click"], [1, "col", "text-danger"]],
    template: function TemplateNumberComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "h6", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "button", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TemplateNumberComponent_Template_button_click_3_listener() {
          return ctx.cancel();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5, "\u00D7");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 4)(7, "div", 5)(8, "div", 6)(9, "div", 7)(10, "label", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 9)(13, "input", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtwoWayListener"]("ngModelChange", function TemplateNumberComponent_Template_input_ngModelChange_13_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtwoWayBindingSet"](ctx.noOfTemplates, $event) || (ctx.noOfTemplates = $event);
          return $event;
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keyup", function TemplateNumberComponent_Template_input_keyup_13_listener($event) {
          return ctx.checkTemplateNumber($event);
        })("keypress", function TemplateNumberComponent_Template_input_keypress_13_listener($event) {
          return ctx.checkDecimal($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, TemplateNumberComponent_div_14_Template, 3, 0, "div", 11)(15, TemplateNumberComponent_div_15_Template, 3, 0, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 12)(17, "div", 6)(18, "div", 13)(19, "button", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TemplateNumberComponent_Template_button_click_19_listener() {
          return ctx.getTemplates();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20, "Confirm");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 13)(22, "button", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TemplateNumberComponent_Template_button_click_22_listener() {
          return ctx.cancel();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](23, "Cancel");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()()()();
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.headerLabelText);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](9);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.colFieldName);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtwoWayProperty"]("ngModel", ctx.noOfTemplates);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.noOfTemplates);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.isTemplateNumber);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx.noOfTemplates || !ctx.isTemplateNumber);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel],
    styles: ["/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 2324:
/*!****************************************************!*\
  !*** ./src/app/directives/number-to-words.pipe.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NumberToWordsPipe: () => (/* binding */ NumberToWordsPipe)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 7580);

class NumberToWordsPipe {
  transform(value) {
    if (value && isInteger(value)) return "(" + numToWords(value).trim() + ")";else return "";
  }
  static #_ = this.ɵfac = function NumberToWordsPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || NumberToWordsPipe)();
  };
  static #_2 = this.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "numberToWords",
    type: NumberToWordsPipe,
    pure: true
  });
}
const isInteger = function (x) {
  return x % 1 === 0;
};
const arr = x => Array.from(x);
const num = x => Number(x) || 0;
const str = x => String(x);
const isEmpty = xs => xs.length === 0;
const take = n => xs => xs.slice(0, n);
const drop = n => xs => xs.slice(n);
const reverse = xs => xs.slice(0).reverse();
const comp = f => g => x => f(g(x));
const not = x => !x;
const chunk = n => xs => isEmpty(xs) ? [] : [take(n)(xs), ...chunk(n)(drop(n)(xs))];
// numToWords :: (Number a, String a) => a -> String
let numToWords = n => {
  let a = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  let b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
  let g = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion'];
  // this part is really nasty still
  // it might edit this again later to show how Monoids could fix this up
  let makeGroup = ([ones, tens, huns]) => {
    return [num(huns) === 0 ? '' : a[huns] + ' hundred ', num(ones) === 0 ? b[tens] : b[tens] && b[tens] + '-' || '', a[tens + ones] || a[ones]].join('');
  };
  // "thousands" constructor; no real good names for this, i guess
  let thousand = (group, i) => group === '' ? group : `${group} ${g[i]}`;
  // execute !
  if (typeof n === 'number') return numToWords(String(n));
  if (n === '0') return 'zero';
  return comp(chunk(3))(reverse)(arr(n)).map(makeGroup).map(thousand).filter(comp(not)(isEmpty)).reverse().join(' ');
};

/***/ }),

/***/ 7318:
/*!********************************!*\
  !*** ./src/app/models/EPMA.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdministerMedication: () => (/* binding */ AdministerMedication),
/* harmony export */   AdministerMedicationcodes: () => (/* binding */ AdministerMedicationcodes),
/* harmony export */   AdministerMedicationingredients: () => (/* binding */ AdministerMedicationingredients),
/* harmony export */   AdministrationWitness: () => (/* binding */ AdministrationWitness),
/* harmony export */   Bannerwarningoverrides: () => (/* binding */ Bannerwarningoverrides),
/* harmony export */   ComplianceAid: () => (/* binding */ ComplianceAid),
/* harmony export */   DSMedSupplyRequiredStatus: () => (/* binding */ DSMedSupplyRequiredStatus),
/* harmony export */   Dose: () => (/* binding */ Dose),
/* harmony export */   DoseEvents: () => (/* binding */ DoseEvents),
/* harmony export */   DrugChart: () => (/* binding */ DrugChart),
/* harmony export */   EmailModel: () => (/* binding */ EmailModel),
/* harmony export */   Epma_Dischargesummarry: () => (/* binding */ Epma_Dischargesummarry),
/* harmony export */   Epma_Medsonadmission: () => (/* binding */ Epma_Medsonadmission),
/* harmony export */   Epma_Medsondischarge: () => (/* binding */ Epma_Medsondischarge),
/* harmony export */   Epma_Moaprescriptions: () => (/* binding */ Epma_Moaprescriptions),
/* harmony export */   Epma_Modprescriptions: () => (/* binding */ Epma_Modprescriptions),
/* harmony export */   FormularyDescendent: () => (/* binding */ FormularyDescendent),
/* harmony export */   InfusionEvents: () => (/* binding */ InfusionEvents),
/* harmony export */   Medication: () => (/* binding */ Medication),
/* harmony export */   Medicationadministration: () => (/* binding */ Medicationadministration),
/* harmony export */   Medicationcodes: () => (/* binding */ Medicationcodes),
/* harmony export */   Medicationingredients: () => (/* binding */ Medicationingredients),
/* harmony export */   Medicationroutes: () => (/* binding */ Medicationroutes),
/* harmony export */   Medicationsummary: () => (/* binding */ Medicationsummary),
/* harmony export */   Medreconciliation: () => (/* binding */ Medreconciliation),
/* harmony export */   MetaComplianceAid: () => (/* binding */ MetaComplianceAid),
/* harmony export */   MetaPrescriptionadditionalcondition: () => (/* binding */ MetaPrescriptionadditionalcondition),
/* harmony export */   MetaPrescriptioncontext: () => (/* binding */ MetaPrescriptioncontext),
/* harmony export */   MetaPrescriptionduration: () => (/* binding */ MetaPrescriptionduration),
/* harmony export */   MetaPrescriptionstatus: () => (/* binding */ MetaPrescriptionstatus),
/* harmony export */   MetaReviewstatus: () => (/* binding */ MetaReviewstatus),
/* harmony export */   NursingInstruction: () => (/* binding */ NursingInstruction),
/* harmony export */   NursingInstructions: () => (/* binding */ NursingInstructions),
/* harmony export */   Opnotes: () => (/* binding */ Opnotes),
/* harmony export */   Opprescriptiontherapies: () => (/* binding */ Opprescriptiontherapies),
/* harmony export */   Orderset: () => (/* binding */ Orderset),
/* harmony export */   OrdersetPrescription: () => (/* binding */ OrdersetPrescription),
/* harmony export */   Outpatientprescriptions: () => (/* binding */ Outpatientprescriptions),
/* harmony export */   Oxygendevices: () => (/* binding */ Oxygendevices),
/* harmony export */   PersonAwayPeriod: () => (/* binding */ PersonAwayPeriod),
/* harmony export */   Posology: () => (/* binding */ Posology),
/* harmony export */   Prescription: () => (/* binding */ Prescription),
/* harmony export */   PrescriptionEvent: () => (/* binding */ PrescriptionEvent),
/* harmony export */   PrescriptionIndication: () => (/* binding */ PrescriptionIndication),
/* harmony export */   PrescriptionMedicaitonSupply: () => (/* binding */ PrescriptionMedicaitonSupply),
/* harmony export */   PrescriptionSource: () => (/* binding */ PrescriptionSource),
/* harmony export */   Prescriptionnursinginstructions: () => (/* binding */ Prescriptionnursinginstructions),
/* harmony export */   Prescriptionreminders: () => (/* binding */ Prescriptionreminders),
/* harmony export */   Prescriptionreviewstatus: () => (/* binding */ Prescriptionreviewstatus),
/* harmony export */   Prescriptionroutes: () => (/* binding */ Prescriptionroutes),
/* harmony export */   ProtocalDose: () => (/* binding */ ProtocalDose),
/* harmony export */   Remindersack: () => (/* binding */ Remindersack),
/* harmony export */   SupplyRequest: () => (/* binding */ SupplyRequest),
/* harmony export */   SupplyRequestMedications: () => (/* binding */ SupplyRequestMedications)
/* harmony export */ });
class DrugChart {}
class Prescription {}
class Medicationsummary {
  constructor() {
    this.protocoldose = [];
  }
}
class ProtocalDose {}
class Posology {}
class Dose {}
class Medicationadministration {}
class Medication {}
class Medicationcodes {}
class Medicationingredients {}
class Prescriptionroutes {}
class Medicationroutes {}
class MetaPrescriptioncontext {}
class MetaPrescriptionstatus {}
class MetaReviewstatus {}
class Oxygendevices {}
class MetaPrescriptionduration {}
class MetaPrescriptionadditionalcondition {}
class DoseEvents {}
class InfusionEvents {}
class PrescriptionSource {}
class Orderset {}
class OrdersetPrescription {}
class FormularyDescendent {}
class AdministerMedication {}
class AdministerMedicationcodes {}
class AdministerMedicationingredients {}
class ComplianceAid {}
class PrescriptionMedicaitonSupply {}
class PrescriptionEvent {}
class SupplyRequest {}
class Prescriptionnursinginstructions {}
class Prescriptionreviewstatus {}
class Prescriptionreminders {}
class Remindersack {}
class Epma_Medsonadmission {}
class Epma_Dischargesummarry {}
class Epma_Medsondischarge {}
class Epma_Moaprescriptions {}
class Epma_Modprescriptions {}
class PrescriptionIndication {}
class Medreconciliation {}
class NursingInstruction {
  constructor(date, category, instruction) {
    this.date = date;
    this.category = category;
    this.instruction = instruction;
  }
}
class AdministrationWitness {}
class Bannerwarningoverrides {}
class Outpatientprescriptions {}
class Opprescriptiontherapies {}
class DSMedSupplyRequiredStatus {}
class SupplyRequestMedications {}
class Opnotes {}
class EmailModel {}
class PersonAwayPeriod {}
class MetaComplianceAid {}
class NursingInstructions {}

/***/ }),

/***/ 7269:
/*!***********************************************!*\
  !*** ./src/app/models/WarningServiceModal.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Allergens: () => (/* binding */ Allergens),
/* harmony export */   Conditions: () => (/* binding */ Conditions),
/* harmony export */   PatientInfo: () => (/* binding */ PatientInfo),
/* harmony export */   WarningContext: () => (/* binding */ WarningContext),
/* harmony export */   WarningContexts: () => (/* binding */ WarningContexts),
/* harmony export */   WarningService: () => (/* binding */ WarningService)
/* harmony export */ });
class WarningService {
  resetWarningService() {}
  GetExistingWarnings(refreshfromdb, cb) {}
  RefreshCurrentMedicationWarnings(CurrentPrescriptions, patientInfo, cb) {}
  UpdateOverrideMsg(comments, cb) {}
  GetNewWarnings(ProspectivePrescriptions, CurrentPrescriptions, patientInfo, cb, isEdit = false) {}
  CommitNewWarningsToDB(cb) {}
  SetExistingWarningStatus() {}
  SetNewWarningStatus() {}
  ClearNewWarnings() {}
}
class WarningContexts {
  constructor() {
    this.contexts = [];
  }
  GetWarningsInstanceWithCreate(context) {}
  GetWarningsInstance(context) {}
}
var WarningContext;
(function (WarningContext) {
  WarningContext["ip"] = "ip";
  WarningContext["mod"] = "mod";
  WarningContext["op"] = "op";
})(WarningContext || (WarningContext = {}));
class PatientInfo {}
class Allergens {}
class Conditions {}

/***/ }),

/***/ 6:
/*!*****************************************!*\
  !*** ./src/app/models/allergy.model.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Allergyintolerance: () => (/* binding */ Allergyintolerance),
/* harmony export */   Personwarningupdate: () => (/* binding */ Personwarningupdate)
/* harmony export */ });
class Allergyintolerance {}
class Personwarningupdate {}

/***/ }),

/***/ 4123:
/*!*******************************************!*\
  !*** ./src/app/models/encounter.model.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Encounter: () => (/* binding */ Encounter),
/* harmony export */   TimelineZoomLevel: () => (/* binding */ TimelineZoomLevel)
/* harmony export */ });
class Encounter {}
class TimelineZoomLevel {
  constructor() {
    this.animation = false;
  }
}

/***/ }),

/***/ 3060:
/*!****************************************!*\
  !*** ./src/app/models/filter.model.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataContract: () => (/* binding */ DataContract),
/* harmony export */   action: () => (/* binding */ action),
/* harmony export */   filter: () => (/* binding */ filter),
/* harmony export */   filterParams: () => (/* binding */ filterParams),
/* harmony export */   filterparam: () => (/* binding */ filterparam),
/* harmony export */   filters: () => (/* binding */ filters),
/* harmony export */   orderbystatement: () => (/* binding */ orderbystatement),
/* harmony export */   selectstatement: () => (/* binding */ selectstatement)
/* harmony export */ });
class filter {
  constructor(c) {
    this.filterClause = c;
  }
}
class filters {
  constructor() {
    this.filters = [];
  }
}
class filterparam {
  constructor(name, value) {
    this.paramName = name;
    this.paramValue = value;
  }
}
class filterParams {
  constructor() {
    this.filterparams = [];
  }
}
class selectstatement {
  constructor(selectstatement) {
    this.selectstatement = selectstatement;
  }
}
class orderbystatement {
  constructor(orderbystatement) {
    this.ordergroupbystatement = orderbystatement;
  }
}
class action {}
class DataContract {}

/***/ }),

/***/ 5351:
/*!************************************************!*\
  !*** ./src/app/services/apirequest.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApirequestService: () => (/* binding */ ApirequestService)
/* harmony export */ });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ 6443);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 5429);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 6196);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/environments/environment */ 5312);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var _authentication_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./authentication.service */ 9214);
/* harmony import */ var _app_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app.service */ 529);







class ApirequestService {
  constructor(httpClient, authService, appService) {
    this.httpClient = httpClient;
    this.authService = authService;
    this.appService = appService;
    this.sequencenumber = null;
  }
  SynchronousPost(endpoint, synapsenamespace, synapseentityname, postdata, sequence, sequenceoperation) {
    let data = new SynchronusPostData();
    data.endpoint = endpoint;
    data.modulename = this.appService.modulename;
    data.person_id = this.appService.personId;
    data.postdata = postdata;
    data.synapseentityname = synapseentityname;
    data.synapsenamespace = synapsenamespace;
    data.version = this.appService.dataversion;
    if (src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.production) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.postRequest(this.appService.baseURI + "/SynchronousPost", JSON.stringify(data)));
    } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.authService.getToken().then(token => {
      return this.callApiPost(token, this.appService.baseURI + "/SynchronousPost", JSON.stringify(data));
    }));
  }
  getRequest(uri) {
    if (src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.production) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.appService.apiService.getRequest(uri));
    } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.authService.getToken().then(token => {
      return this.callApiGet(token, uri);
    }));
  }
  postRequest(uri, body, synchronouspost = true, sequence = false, sequenceoperation = "") {
    if (!uri.includes("PostObject")) {
      synchronouspost = false;
    }
    if (synchronouspost) {
      if (uri.endsWith("PostObjectsInTransaction")) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.SynchronousPost("PostObjectsInTransaction", null, null, body, sequence, sequenceoperation));
      }
      if (uri.includes("PostObjectArray")) {
        let x = uri.split('?')[1];
        let y = x.split('&');
        let namespace = y[0].split("=")[1];
        let entityname = y[1].split("=")[1];
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.SynchronousPost("PostObjectArray", namespace, entityname, body, sequence, sequenceoperation));
      } else {
        let x = uri.split('?')[1];
        let y = x.split('&');
        let namespace = y[0].split("=")[1];
        let entityname = y[1].split("=")[1];
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.SynchronousPost("PostObject", namespace, entityname, body, sequence, sequenceoperation));
      }
    } else {
      if (src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.production) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.appService.apiService.postRequest(uri, body));
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.authService.getToken().then(token => {
        return this.callApiPost(token, uri, body);
      }));
    }
  }
  deleteRequest(uri) {
    if (src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.production) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.appService.apiService.deleteRequest(uri));
    } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.authService.getToken().then(token => {
      return this.callApiDelete(token, uri);
    }));
  }
  getRequestWithoutAuth(uri) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(this.callApiGetWithoutAuth(uri));
  }
  callApiGetWithoutAuth(uri) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.firstValueFrom)(this.httpClient.get(uri)).catch(result => {
      if (result.status === 401) {}
      throw result;
    });
  }
  callApiGet(token, uri) {
    let headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpHeaders({
      'Accept': 'application/json',
      'Authorization': 'Bearer ' + token
    });
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.firstValueFrom)(this.httpClient.get(uri, {
      headers: headers
    })).catch(result => {
      if (result.status === 401) {}
      throw result;
    });
  }
  callApiPost(token, uri, body) {
    let headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpHeaders({
      'Content-Type': 'application/json; charset=utf-8',
      'Authorization': 'Bearer ' + token
    });
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.firstValueFrom)(this.httpClient.post(uri, body, {
      headers: headers
    })).catch(result => {
      this.appService.logToConsole(result);
      if (result.status === 401) {}
      throw result;
    });
  }
  callApiDelete(token, uri) {
    let headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpHeaders({
      'Accept': 'application/json',
      'Authorization': 'Bearer ' + token
    });
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.firstValueFrom)(this.httpClient.delete(uri, {
      headers: headers
    })).catch(result => {
      if (result.status === 401) {}
      throw result;
    });
  }
  static #_ = this.ɵfac = function ApirequestService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || ApirequestService)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_authentication_service__WEBPACK_IMPORTED_MODULE_1__.AuthenticationService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_app_service__WEBPACK_IMPORTED_MODULE_2__.AppService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"]({
    token: ApirequestService,
    factory: ApirequestService.ɵfac,
    providedIn: 'root'
  });
}
class SynchronusPostData {}

/***/ }),

/***/ 529:
/*!*****************************************!*\
  !*** ./src/app/services/app.service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppService: () => (/* binding */ AppService)
/* harmony export */ });
/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ 4751);
/* harmony import */ var src_app_models_EPMA__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/models/EPMA */ 7318);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enum */ 6134);
/* harmony import */ var _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/WarningServiceModal */ 7269);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ 2550);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var _subjects_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./subjects.service */ 3939);








class AppService {
  // AddToOPWarningContext(opid: string, service: WarningService) {
  //   let i = this.warningServiceOPContext.find(x => x.opid == opid);
  //   if (i) {
  //     i.warningservice = service;
  //   } else {
  //     this.warningServiceOPContext.push({ "opid": opid, "warningservice": service });
  //   }
  // }
  // GetOPWarningContext(opid) {
  //   return this.warningServiceOPContext.find(o => o.opid == opid);
  // }
  GetCurrentPrescriptionsForWarnings(wc = _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.ip) {
    if (wc == _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.ip) {
      return this.Prescription.filter(p => (p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.active).prescriptionstatus_id || p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.modified).prescriptionstatus_id || p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.restarted).prescriptionstatus_id) && p.prescriptioncontext_id == this.MetaPrescriptioncontext.find(pc => pc.context === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionContext.Inpatient).prescriptioncontext_id && p.__completed != true);
    } else if (wc == _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.mod) {
      return this.Prescription.filter(p => (p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.active).prescriptionstatus_id || p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.modified).prescriptionstatus_id || p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.restarted).prescriptionstatus_id) && p.prescriptioncontext_id == this.MetaPrescriptioncontext.find(pc => pc.context === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionContext.Discharge).prescriptioncontext_id);
    } else if (wc.startsWith(_models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.op)) {
      let opid = wc.split('_')[1];
      let opp = this.optherapies.find(x => x.opid == opid);
      if (opp && opp.opprescriptions.length > 0) {
        return this.Prescription.filter(p => (p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.active).prescriptionstatus_id || p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.modified).prescriptionstatus_id || p.prescriptionstatus_id == this.MetaPrescriptionstatus.find(mp => mp.status === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionStatus.restarted).prescriptionstatus_id) && p.prescriptioncontext_id == this.MetaPrescriptioncontext.find(pc => pc.context === _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionContext.Outpatient).prescriptioncontext_id && opp.opprescriptions.filter(x => x == p.prescription_id).length != 0);
      } else {
        return [];
      }
    }
  }
  constructor(subject) {
    this.subject = subject;
    // warningServiceOPContext: Array<{ "opid": string, "warningservice": WarningService }>;
    this.bannerWarningStatus = true;
    this.showDischargeSummaryNotes = true;
    this.modulename = "app-epma";
    this.dataversion = null;
    this.oxygenprescriptionadditionalinfo = [];
    this.isreportview = false;
    this.reportData = [];
    this.batchIndex = 0;
    this.linkedBatchArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    this.enableLogging = true;
    this.isCurrentEncouner = false;
    this.isTCI = false;
    this.isTCICancelled = false;
    this.isTitrationPopOverOpen = false;
    this.optherapies = [];
    this.currentBasket = [];
    this.events = [];
    this.CurrentReminderevents = [];
    this.AllReminderevents = [];
    this.oxygenDevices = [];
    this.openPrescriptionHistory = false;
    this.openAdditionalAdministration = false;
    this.roleActions = [];
    this.loggedInUserName = null;
    this.obsScales = [];
    this.observation = [];
    this.personscale = null;
    this.isWeightCaptured = false;
    this.isWeightCapturedForToday = false;
    this.isHeightCaptured = false;
    this.SupplyRequest = [];
    this.loggedInUserRoles = [];
    this.pleaseResupplyStockValidation = false;
    this.remainingEvents = [];
    this.prescriptionHistory = [];
    this.stackButtons = [];
    this.arrPrescriptionCurrentFlowRate = [];
    this.isReasonForChangeReuired = false;
    this.administrationWitness = [];
    this.prescriptionEvent = [];
    this.PrescriptionMedicaitonSupply = [];
    this.medReconcelationCompleteStatus = "not reviewed by pharmacy";
    this.PersonAwayPeriod = [];
    this.PatientDrugHistory = [];
    this.currentTerminusModle = "";
    this.outpatientPrescribingMode = false;
    this.isOP = false;
    this.chartScrolled = false;
    this.disabledatechange = true;
  }
  reset() {
    this.disabledatechange = true;
    this.chartScrolled = false;
    this.stackButtons = [];
    this.arrPrescriptionCurrentFlowRate = [];
    this.PersonAwayPeriod = [];
    this.currentBasket = [];
    this.warningServiceIPContextInitComplete = false;
    this.dataversion = null;
    this.personId = null;
    this.encounter = null;
    this.isCurrentEncouner = null;
    this.isTCI = null;
    this.isTCICancelled = null;
    this.apiService = null;
    this.baseURI = null;
    this.loggedInUserName = null;
    this.enableLogging = true;
    this.roleActions = [];
    this.personDOB = null;
    this.personAgeAtAdmission = null;
    this.personAgeToday = null;
    this.personAgeInDays = null;
    this.personscale = null;
    this.currentEWSScale = null;
    this.obsScales = [];
    this.optherapies = [];
    this.prescriptionId = null;
    this.outPatientPrescriptionSelected = null;
    if (this.Prescription) this.Prescription.forEach(p => {
      p.__posology.forEach(pos => {
        pos.__dose = null;
        pos = null;
      });
      p.__medications.forEach(m => {
        m.__codes.forEach(c => {
          c = null;
        });
        m.__ingredients.forEach(i => {
          i = null;
        });
        m = null;
      });
      p.__medications = null;
      p.__routes.forEach(r => {
        r = null;
      });
      p.__routes = null;
      p.__editingprescription = null;
      p.__editingreviewstatus = null;
      p.__initialreminder = null;
    });
    this.MetaPrescriptionstatus = [];
    this.MetaReviewstatus = [];
    this.Prescription = [];
    this.FilteredPrescription = [];
    this.TherapyPrescription = [];
    this.isWeightCaptured = false;
    this.isHeightCaptured = false;
    this.isWeightCapturedForToday = false;
    this.InfusionEvents = [];
    this.DoseEvents = [];
    //this.Prescriptionroutes = [];
    // this.Posology = [];
    //this.Dose = [];
    this.events = null;
    ;
    this.DoseEvents = [];
    this.InfusionEvents = [];
    // this.Medication = [];
    this.Medicationadministration = [];
    //this.Medicationingredients = [];
    //this.Medicationroutes = [];
    //this.Prescriptionroutes = [];
    this.MetaPrescriptionDuration = [];
    // this.Medicationcodes = [];
    this.DrugeGroupsType = [];
    this.TimelineArray = [];
    this.VtmUnits = [];
    this.PrescriptionBag = [];
    this.MetaPrescriptionadditionalcondition = [];
    this.openPrescriptionHistory = null;
    this.openAdditionalAdministration = null;
    this.MetaPrescriptionSource = [];
    this.Prescriptionreminders = [];
    this.roleActions = [];
    this.loggedInUserName = null;
    this.obsScales = [];
    this.observation = [];
    this.personDOB = null;
    this.personscale = null;
    this.currentEWSScale = null;
    this.isWeightCaptured = null;
    this.isWeightCapturedForToday = null;
    this.refWeightValue = null;
    this.idealWeightValue = null;
    this.refWeightRecordedOn = null;
    this.isHeightCaptured = null;
    this.refHeightValue = null;
    this.bodySurfaceArea = null;
    this.therapyCurrentDate = null;
    this.therapyNoOfDays = null;
    this.drugGroupOption = null;
    this.drugRouteOption = null;
    this.drugSortOrder = null;
    this.SupplyRequest = [];
    this.oxygenDevices = [];
    this.oxygenprescriptionadditionalinfo = [];
    this.isAppDataReady = false;
    this.batchIndex = 0;
    this.Prescriptionreviewstatus = [];
    this.loggedInUserRoles = [];
    this.pleaseResupplyStockValidation = false;
    this.allergyintolerance = [];
    this.gender = null;
    this.isReasonForChangeReuired = false;
    this.administrationWitness = [];
    this.platfromServiceURI = null;
    this.prescriptionEvent = [];
    this.warningServiceIPContext = null;
    this.warningServiceMODContext = null;
    this.warningService = null;
    this.bannerWarningStatus = true;
    this.refWeightType = null;
    this.PrescriptionMedicaitonSupply = [];
    this.administrationTimeDiffInMinute = null;
    this.DoseEventsHistory = [];
    this.InfusionEventsHistory = [];
    this.MedicationadministrationHistory = [];
    this.AdministermedicationHistory = [];
    this.MetaComplianceAid = [];
    this.PatientDrugHistory = [];
    this.NursingInstructions = [];
    this.currentTerminusModle = "";
    this.outpatientPrescribingMode = false;
    this.isOP = false;
  }
  decodeAccessToken(token) {
    try {
      return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__.jwtDecode)(token);
    } catch (Error) {
      this.logToConsole(`Error: ${Error}`);
      return null;
    }
  }
  AuthoriseAction(action) {
    if (this.appConfig && this.appConfig.AppSettings.enableRBAC) return this.roleActions.filter(x => x.actionname.toLowerCase().trim() == action.toLowerCase()).length > 0;else return true;
  }
  getPrescriptionBags() {
    this.batchIndex = 0;
    this.PrescriptionBag = [];
    let allprescriptionbatches = this.Prescription.slice();
    allprescriptionbatches.sort((a, b) => new Date(a.createdon).getTime() - new Date(b.createdon).getTime());
    for (let prescription of allprescriptionbatches) {
      if (this.PrescriptionBag.find(x => x.prescriptionid == prescription.prescription_id)) {
        continue;
      }
      if (prescription.linkedinfusionid) {
        let letterBatch = "";
        if (this.PrescriptionBag.find(x => x.prescriptionid == prescription.linkedinfusionid)) {
          let temp = this.PrescriptionBag.find(x => x.prescriptionid == prescription.linkedinfusionid).Batch;
          letterBatch = temp.split("-")[0];
          letterBatch = letterBatch + "-" + (+temp.split("-")[1] + 1).toString();
          this.PrescriptionBag.push({
            prescriptionid: prescription.prescription_id,
            Batch: letterBatch
          });
        } else {
          let batchletter = this.getlinkedArrayLetter();
          this.PrescriptionBag.push({
            prescriptionid: prescription.linkedinfusionid,
            Batch: batchletter + "-0"
          });
          this.PrescriptionBag.push({
            prescriptionid: prescription.prescription_id,
            Batch: batchletter + "-1"
          });
        }
      }
    }
  }
  getMultilinkPrescriptionBags() {
    this.batchIndex = 0;
    this.PrescriptionBag = [];
    let allprescriptionbatches = this.Prescription.slice();
    allprescriptionbatches.sort((a, b) => new Date(a.createdon).getTime() - new Date(b.createdon).getTime());
    for (let prescription of allprescriptionbatches) {
      if (this.PrescriptionBag.find(x => x.prescriptionid == prescription.prescription_id)) {
        continue;
      }
      if (prescription.linkedinfusionid) {
        let letterBatch = "";
        if (this.PrescriptionBag.find(x => x.prescriptionid == prescription.linkedinfusionid)) {
          let parentbag = this.PrescriptionBag.find(x => x.prescriptionid == prescription.linkedinfusionid).Batch;
          let count = 1;
          let multilink = allprescriptionbatches.filter(x => x.linkedinfusionid == prescription.linkedinfusionid);
          for (let linkprescri of multilink) {
            letterBatch = parentbag + "." + count;
            this.PrescriptionBag.push({
              prescriptionid: linkprescri.prescription_id,
              Batch: letterBatch
            });
            count++;
          }
        } else {
          let batchletter = this.getlinkedArrayLetter();
          this.PrescriptionBag.push({
            prescriptionid: prescription.linkedinfusionid,
            Batch: batchletter
          });
          let count = 1;
          let multilink = allprescriptionbatches.filter(x => x.linkedinfusionid == prescription.linkedinfusionid);
          for (let linkprescri of multilink) {
            letterBatch = batchletter + "." + count;
            this.PrescriptionBag.push({
              prescriptionid: linkprescri.prescription_id,
              Batch: letterBatch
            });
            count++;
          }
        }
      }
    }
  }
  getlinkedArrayLetter() {
    this.batchIndex++;
    return this.linkedBatchArray.charAt(this.batchIndex - 1);
  }
  getDateTimeinISOFormat(date) {
    var time = date;
    var hours = time.getHours();
    var s = time.getSeconds();
    var m = time.getMilliseconds();
    var minutes = time.getMinutes();
    date.setHours(hours);
    date.setMinutes(minutes);
    //date.setSeconds(s);
    //date.setMilliseconds(m);
    //this.appService.logToConsole(date);
    let year = date.getFullYear();
    let month = date.getMonth() + 1;
    let dt = date.getDate();
    let hrs = date.getHours();
    let mins = date.getMinutes();
    let secs = date.getSeconds();
    let msecs = date.getMilliseconds();
    let returndate = year + "-" + (month < 10 ? "0" + month : month) + "-" + (dt < 10 ? "0" + dt : dt) + "T" + (hrs < 10 ? "0" + hrs : hrs) + ":" + (mins < 10 ? "0" + mins : mins) + ":" + (secs < 10 ? "0" + secs : secs) + "." + (msecs < 10 ? "00" + msecs : msecs < 100 ? "0" + msecs : msecs);
    //this.appService.logToConsole(returndate);
    return returndate;
  }
  setPatientAgeAtAdmission(setAgeAtEarliestPosologyStartDate = null) {
    console.log("setAgeAtEarliestPosologyStartDate" + setAgeAtEarliestPosologyStartDate);
    this.personAgeAtAdmission = moment__WEBPACK_IMPORTED_MODULE_2__(this.encounter.sortdate ?? moment__WEBPACK_IMPORTED_MODULE_2__(), moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601).diff(moment__WEBPACK_IMPORTED_MODULE_2__(this.personDOB, moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601), "years");
    this.personAgeToday = moment__WEBPACK_IMPORTED_MODULE_2__(moment__WEBPACK_IMPORTED_MODULE_2__(), moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601).diff(moment__WEBPACK_IMPORTED_MODULE_2__(this.personDOB, moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601), "years");
    if (setAgeAtEarliestPosologyStartDate) {
      this.personAgeInDays = moment__WEBPACK_IMPORTED_MODULE_2__(setAgeAtEarliestPosologyStartDate ?? moment__WEBPACK_IMPORTED_MODULE_2__(), moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601).diff(moment__WEBPACK_IMPORTED_MODULE_2__(this.personDOB, moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601), "days");
    } else {
      this.personAgeInDays = moment__WEBPACK_IMPORTED_MODULE_2__(moment__WEBPACK_IMPORTED_MODULE_2__(), moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601).diff(moment__WEBPACK_IMPORTED_MODULE_2__(this.personDOB, moment__WEBPACK_IMPORTED_MODULE_2__.ISO_8601), "days");
    }
    console.log(this.personAgeInDays);
  }
  logToConsole(msg) {
    if (this.enableLogging) {
      console.log(msg);
    }
  }
  setCurrentScale() {
    let scale = "";
    if (this.personAgeAtAdmission < 19) {
      if (this.personAgeAtAdmission <= 0) scale = "PEWS-0To11Mo";else if (this.personAgeAtAdmission >= 1 && this.personAgeAtAdmission <= 4) scale = "PEWS-1To4Yrs";else if (this.personAgeAtAdmission >= 5 && this.personAgeAtAdmission <= 12) scale = "PEWS-5To12Yrs";else if (this.personAgeAtAdmission >= 13 && this.personAgeAtAdmission <= 18) scale = "PEWS-13To18Yrs";
    } else if (this.personscale) {
      scale = this.obsScales.filter(x => x.observationscaletype_id == this.personscale.observationscaletype_id)[0].scaletypename;
    } else {
      scale = "NEWS2-Scale1";
    }
    this.currentEWSScale = scale;
    return scale;
  }
  GetIndication(p) {
    if (p.indication && p.indication.indexOf("indication") != -1 && p.indication.indexOf("code") != -1) {
      let ind = JSON.parse(p.indication);
      if (ind.code == "other") return ind.indication + " - " + p.otherindications;else return ind.indication;
    } else return p.indication;
  }
  checkMedicineTypeForMoa(prescription, getchangestatus = false) {
    let ismoa = prescription.prescriptioncontext_id == this.MetaPrescriptioncontext.find(x => x.context == _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionContext.Admission).prescriptioncontext_id;
    if (ismoa) {
      return getchangestatus ? 0 : true;
    } else {
      let medcode = prescription.__medications.find(m => m.isprimary).__codes.find(c => c.terminology == "formulary").code;
      let codeobject = this.Prescription.find(p => p.prescription_id != prescription.prescription_id && p.prescriptioncontext_id == this.MetaPrescriptioncontext.find(w => w.context == _enum__WEBPACK_IMPORTED_MODULE_3__.PrescriptionContext.Admission).prescriptioncontext_id && p.__medications.find(m => m.isprimary).__codes.find(c => c.terminology == "formulary").code == medcode);
      if (getchangestatus) {
        if (codeobject) {
          let issame = this.ComparePrescriptions(prescription, codeobject);
          return issame ? 0 : 1; //1= orange 0= blue
        } else {
          return -1; // -1 = no icon
        }
      } else {
        if (codeobject) {
          return true; // MOA match and no need to show
        } else {
          return false; // Code not found and MOA prescription not prescribed
        }
      }
    }
  }
  UpdatePrescriptionWarningSeverity(parray, cb, ws = this.warningServiceIPContext) {
    ws.GetExistingWarnings(false, data => {
      parray.forEach(p => {
        const highwarnings = data.filter(x => (x.primaryprescriptionid == p.prescription_id || x.secondaryprescriptionid == p.prescription_id) && x.severity == 4);
        if (highwarnings && highwarnings.length > 0) {
          p.__severityWarning = highwarnings[0].severity;
          p.__warningOverrideREQ = highwarnings.filter(w => w.overriderequired).length > 0;
        }
      });
      cb();
    });
  }
  RefreshWarningsFromApi(cb, ws = this.warningServiceIPContext) {
    if (this.isTCI && !this.encounter.sortdate) {
      let minposologystartdateexisting = moment__WEBPACK_IMPORTED_MODULE_2__.min([].concat(...this.GetCurrentPrescriptionsForWarnings(ws.context).map(p => p.__posology)).map(pos => moment__WEBPACK_IMPORTED_MODULE_2__(pos.prescriptionstartdate)));
      this.setPatientAgeAtAdmission(minposologystartdateexisting);
    }
    this.logToConsole("Refreshing warnigns from api");
    ws.existingWarningsStatus = false;
    ws.RefreshCurrentMedicationWarnings(this.GetCurrentPrescriptionsForWarnings(ws.context), this.patientInfo, (status, data, version = "") => {
      this.logToConsole("Refreshing warnigns from api - complete");
      if (status == "success") {
        if (version) {
          this.UpdateDataVersionNumber({
            "version": version
          });
        }
        this.UpdatePrescriptionWarningSeverity(this.Prescription, () => {
          this.subject.refreshTemplate.next(undefined);
          cb();
        });
      } else {
        cb();
        this.subject.closeWarnings.next(undefined);
        if (this.IsDataVersionStaleError(data)) {
          this.subject.ShowRefreshPageMessage.next(data);
        }
      }
    });
    this.subject.refreshTemplate.next(undefined);
  }
  distinct(value, index, self) {
    return self.indexOf(value) === index;
  }
  MedicationHasFlag(flag, m) {
    return flag == "clinicaltrial" && m.detail.clinicalTrialMedication && +m.detail.clinicalTrialMedication == 1 || flag == "controlled" && m.detail.isCustomControlledDrug || flag == "blacktriangle" && (m.detail.emaAdditionalMonitoring == "1" || m.detail.blackTriangle && +m.detail.blackTriangle == 1) || flag == "critical" && m.detail.criticalDrug && +m.detail.criticalDrug == 1 || flag == "expensive" && m.detail.expensiveMedication && +m.detail.expensiveMedication == 1 || flag == "highalert" && m.detail.highAlertMedication && +m.detail.highAlertMedication == 1 || flag == "nonformulary" && m.detail.rnohFormularyStatuscd == "002" || flag == "unlicenced" && m.detail.unlicensedMedicationCd && +m.detail.unlicensedMedicationCd == 1 || flag == "bloodproduct" && m.detail.isBloodProduct == true;
  }
  GetCurrentPosology(p, pos_id = null) {
    if (pos_id) {
      return p.__posology.find(p => p.posology_id == pos_id);
    } else return p.__posology.find(p => p.iscurrent == true);
  }
  ComparePrescriptions(p, p1) {
    //compare interval
    if (this.GetCurrentPosology(p).frequency != this.GetCurrentPosology(p1).frequency) {
      return false;
    }
    if (this.GetCurrentPosology(p).frequencysize != this.GetCurrentPosology(p1).frequencysize) {
      return false;
    }
    if (this.GetCurrentPosology(p).dosetype != this.GetCurrentPosology(p1).dosetype) {
      return false;
    }
    if (this.GetCurrentPosology(p).__dose.length != this.GetCurrentPosology(p1).__dose.length) {
      return false;
    }
    //compare dose
    for (var i = 0; i < this.GetCurrentPosology(p).__dose.length; i++) {
      const d = this.GetCurrentPosology(p).__dose[i];
      const d1 = this.GetCurrentPosology(p1).__dose[i];
      if (this.GetCurrentPosology(p).dosetype == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.descriptive && d.descriptivedose != d1.descriptivedose) {
        return false;
      } else if (this.GetCurrentPosology(p).dosetype == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.strength && (d.strengthneumerator != d1.strengthneumerator || d.strengthdenominator != d1.strengthdenominator)) {
        return false;
      } else if (this.GetCurrentPosology(p).dosetype == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units && (d.doseunit != d1.doseunit || d.dosesize != d1.dosesize)) {
        return false;
      }
    }
    //compare routes
    if (p.__routes.length != p1.__routes.length) {
      return false;
    } else {
      //compare primary routes
      const rp = p.__routes.find(r => r.isdefault);
      const rp1 = p1.__routes.find(r => r.isdefault);
      if (rp && rp1 && rp.routecode != rp1.routecode) {
        return false;
      } else if (rp && !rp1 || rp1 && !rp) {
        return false;
      }
      //compare discretionary
      var diff = p.__routes.find(r => p1.__routes.filter(r1 => r1.routecode == r.routecode).length == 0);
      if (diff) return false;
    }
    //prn
    if (this.GetCurrentPosology(p).prn != this.GetCurrentPosology(p1).prn) return false;
    //do
    if (this.GetCurrentPosology(p).doctorsorder != this.GetCurrentPosology(p1).doctorsorder) return false;
    //chosendays
    if (this.GetCurrentPosology(p).daysofweek != this.GetCurrentPosology(p1).daysofweek) return false;
    //everyndays
    if (this.GetCurrentPosology(p).dosingdaysfrequency != this.GetCurrentPosology(p1).dosingdaysfrequency) return false;
    //everyndays
    if (this.GetCurrentPosology(p).dosingdaysfrequencysize != this.GetCurrentPosology(p1).dosingdaysfrequencysize) return false;
    //comments
    if ((p.comments ?? "").toLowerCase().trim() != (p1.comments ?? "").toLowerCase().trim()) return false;
    if (p.indication != p1.indication || p.otherindications != p1.otherindications) {
      return false;
    }
    // //additional conditions
    // if (p.prescriptionadditionalconditions_id != p1.prescriptionadditionalconditions_id)
    //   return false;
    return true;
  }
  setIdealBodyWeight() {
    if (!isNaN(this.refHeightValue) && +this.refHeightValue > 0 && +this.refHeightValue >= 152 && +this.personAgeToday >= 18) {
      if (this.gender == "M") {
        this.idealWeightValue = 50 + 0.9 * (+this.refHeightValue - 152);
      } else {
        this.idealWeightValue = 45.5 + 0.9 * (+this.refHeightValue - 152);
      }
    } else {
      this.idealWeightValue = -1;
    }
  }
  UpdateDataVersionNumber(saveResponse) {
    if (saveResponse.hasOwnProperty('version')) {
      this.dataversion = saveResponse["version"];
    }
  }
  IsDataVersionStaleError(error) {
    if (error.error) {
      if (error.error.includes("oldversion") || error.error.includes("noversion") || error.error.includes("cannotinitdataversion") || error.error.includes("otherongoingsequence") || error.error.includes("invalidsequenceoperation") || error.error.includes("sequenceexpired") || error.error.includes("otherprocesswriting")) {
        return true;
      } else return false;
    } else return false;
  }
  RefreshPageWithStaleError(error) {
    let refreshed = false;
    if (error.error) {
      if (error.error.includes("serverversion:")) {
        let splitmsg = error.error.split("serverversion:");
        if (Array.isArray(splitmsg) && splitmsg.length == 2) {
          let serverversion = splitmsg[1];
          if (serverversion) {
            let versionobject = JSON.parse(serverversion);
            let serverversion_userid = versionobject.createdby;
            refreshed = true;
            this.subject.ShowRefreshPageMessage.next(serverversion_userid);
          }
        }
      }
    }
    if (!refreshed) {
      this.subject.ShowRefreshPageMessage.next(undefined);
    }
  }
  GroupingBasics(val) {
    let dcgroup;
    let isIvFluid = false;
    if (val.__drugcodes) {
      const customrows = val.__drugcodes.filter(x => x.additionalCodeSystem.toLowerCase() == "custom");
      const ivfluids = customrows.filter(x => x.additionalCode.toUpperCase() == "BASIC_FLUID");
      if (ivfluids.length > 0) isIvFluid = true;else isIvFluid = false;
    }
    if (val.__posology.find(x => x.iscurrent == true).frequency == "stat") {
      dcgroup = {
        group: "Stat",
        prescriptionid: val.prescription_id
      };
      return dcgroup;
    } else {
      let codematteched = false;
      let Presindecation = JSON.parse(val.indication);
      let drug_bnf = "";
      if (val.__drugcodes) {
        const bnfrow = val.__drugcodes.filter(x => x.additionalCodeSystem == "BNF");
        if (bnfrow.length > 0) drug_bnf = bnfrow[0].additionalCode;
      }
      drug_bnf.padEnd(10, "0");
      for (let group of this.DCGroups) {
        let isbnfmatch = false;
        for (let arrcode of group.MatchConditions.ClassificationCodes) {
          let bnf = (arrcode.Code ?? "").replace(/\./g, "");
          if (bnf == drug_bnf.substring(0, bnf.length)) {
            isbnfmatch = true;
          }
        }
        let isindecationmatch = false;
        for (let arrindecation of group.MatchConditions.Indications) {
          if (Presindecation) {
            if (arrindecation.Code == Presindecation.code || arrindecation.Indication == Presindecation?.indication) {
              isindecationmatch = true;
            }
          }
        }
        let Indications = group.MatchConditions.Indications;
        if (group.MatchType == "AND") {
          if (isindecationmatch && isbnfmatch) {
            if (!this.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
              // checking is allready add this pres 47  4.0.1.0
              dcgroup = {
                group: group.GroupName,
                prescriptionid: val.prescription_id
              };
              return dcgroup;
            }
          }
        } else {
          if (isindecationmatch || isbnfmatch) {
            if (!this.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
              // checking is allready add this pres
              dcgroup = {
                group: group.GroupName,
                prescriptionid: val.prescription_id
              };
              return dcgroup;
            }
          }
        }
      }
      if (val.__posology.find(x => x.iscurrent == true).infusiontypeid == 'ci' || val.__posology.find(x => x.iscurrent == true).infusiontypeid == 'pca' || val.__posology.find(x => x.iscurrent == true).infusiontypeid == 'rate' && val.__posology.find(x => x.iscurrent == true).frequency == "variable") {
        if (!this.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          dcgroup = {
            group: "Variable/Continuous infusion",
            prescriptionid: val.prescription_id
          };
          return dcgroup;
        }
      } else if (val.__posology.find(x => x.iscurrent == true).prn == true) {
        if (!this.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          dcgroup = {
            group: "PRN",
            prescriptionid: val.prescription_id
          };
          return dcgroup;
        }
      } else if (isIvFluid) {
        if (!this.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          this.dcgroupadded.push({
            group: "IV Fluid",
            prescriptionid: val.prescription_id
          });
        }
      } else {
        if (!this.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          dcgroup = {
            group: "Regular drugs",
            prescriptionid: val.prescription_id
          };
          return dcgroup;
        }
      }
    }
    return dcgroup;
  }
  GetPRNMaxDoseDisplayString(prnmaxdose) {
    const prnMaxDoseObj = JSON.parse(prnmaxdose);
    if (prnMaxDoseObj) {
      if (prnMaxDoseObj.type == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units) {
        return prnMaxDoseObj.maxdenominator + " " + prnMaxDoseObj.d_units;
      } else if (prnMaxDoseObj.type == "numeratoronlystrength" || prnMaxDoseObj.type == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.strength) {
        return prnMaxDoseObj.maxnumerator + " " + prnMaxDoseObj.n_units + "/" + prnMaxDoseObj.maxdenominator + " " + prnMaxDoseObj.d_units;
      } else if (prnMaxDoseObj.type == "na") {
        return prnMaxDoseObj.maxtimes + " doses";
      }
    }
  }
  GetMostFrequentElementInArray(arr) {
    let compare = "";
    let mostFreq = "";
    arr.reduce((acc, val) => {
      if (val in acc) {
        // if key already exists
        acc[val]++; // then increment it by 1
      } else {
        acc[val] = 1; // or else create a key with value 1
      }
      if (acc[val] > compare) {
        // if value of that key is greater
        // than the compare value.
        compare = acc[val]; // than make it a new compare value.
        mostFreq = val; // also make that key most frequent.
      }
      return acc;
    }, {});
    this.logToConsole("Most Frequent Item is:" + mostFreq);
    return mostFreq;
  }
  HideWarning(context) {
    if (document.getElementById(context + "_ToggleShowLowPriorityWarnings").innerText == 'Hide all warnings') {
      document.getElementById(context + "_ToggleShowLowPriorityWarnings").click();
    }
  }
  UpdatePrescriptionCompletedStatus(p) {
    p.__completed = false;
    const currentposology = this.GetCurrentPosology(p);
    if (currentposology.prescriptionenddate) {
      let lastdosedate;
      let tempdose = [];
      let logical_ID;
      let iteration = 0;
      Object.assign(tempdose, currentposology.__dose);
      tempdose.sort((a, b) => new Date(b.dosestartdatetime).getTime() - new Date(a.dosestartdatetime).getTime());
      let enddate = moment__WEBPACK_IMPORTED_MODULE_2__(currentposology.prescriptionenddate);
      let cd_startdtm = moment__WEBPACK_IMPORTED_MODULE_2__(currentposology.prescriptionstartdate).clone().set("minute", 0).set("hour", 0).set("seconds", 0);
      let cd_enddtm = enddate.clone().set("minute", 0).set("hour", 0).set("seconds", 0);
      let chosendays_dose_dates = [];
      let days_of_week_selected = [];
      try {
        days_of_week_selected = JSON.parse(currentposology.daysofweek);
      } catch {}
      if (Array.isArray(days_of_week_selected) && days_of_week_selected.length != 0) {
        while (cd_startdtm.isSameOrBefore(cd_enddtm)) {
          if (days_of_week_selected.find(x => x.toLowerCase() == cd_enddtm.format('dddd').toLowerCase())) {
            chosendays_dose_dates.push(cd_enddtm.clone());
          }
          cd_enddtm.subtract(1, 'days');
        }
        chosendays_dose_dates.reverse(); //because we iterated last date first 
      } else if (currentposology.dosingdaysfrequencysize > 0) {
        while (cd_startdtm.isSameOrBefore(cd_enddtm)) {
          chosendays_dose_dates.push(cd_startdtm.clone());
          if (currentposology.dosingdaysfrequency == "days") {
            cd_startdtm.add(currentposology.dosingdaysfrequencysize, "days");
          } else if (currentposology.dosingdaysfrequency == "weeks") {
            cd_startdtm.add(currentposology.dosingdaysfrequencysize, "weeks");
          } else if (currentposology.dosingdaysfrequency == "months") {
            cd_startdtm.add(currentposology.dosingdaysfrequencysize, "months");
          }
        }
      }
      if (chosendays_dose_dates.length != 0)
        // chosen days has been selected in the prescription, last dose date might not be on the 
        // prescription end date use the last index of this prepared array as last date
        {
          const newenddate = chosendays_dose_dates[chosendays_dose_dates.length - 1];
          if (newenddate.format('LL') != enddate.format('LL')) {
            enddate.date(newenddate.date());
            enddate.month(newenddate.month());
            enddate.year(newenddate.year());
            //pick the last dose for the day 
            enddate.hour(moment__WEBPACK_IMPORTED_MODULE_2__(tempdose[0].dosestartdatetime).hour());
            enddate.minute(moment__WEBPACK_IMPORTED_MODULE_2__(tempdose[0].dosestartdatetime).minute());
          }
        }
      for (let startdate = moment__WEBPACK_IMPORTED_MODULE_2__(currentposology.prescriptionstartdate).clone().set("minute", 0).set("hour", 0).set("seconds", 0); enddate.isSameOrAfter(startdate); enddate.subtract(1, 'days')) {
        for (let i = 0; i < tempdose.length; i++) {
          let dose = tempdose[i];
          //to create logical id get last dose date and doseid
          //if start date is smaller than prescriptionenddate, last dose date = prescription end date 
          //if start date is bigger than prescriptionenddate, last dose date = start date of dose
          //logical id = lastdosedate plus doseid
          if (p.isinfusion && (p.infusiontype_id == _enum__WEBPACK_IMPORTED_MODULE_3__.InfusionType.ci || p.infusiontype_id == _enum__WEBPACK_IMPORTED_MODULE_3__.InfusionType.pca)) {
            if (dose.continuityid) logical_ID = "end_" + moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).format('YYYYMMDDHHmm') + "_" + dose.continuityid.toString();else logical_ID = "end_" + moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).format('YYYYMMDDHHmm') + "_" + dose.dose_id.toString();
            const endevent = this.InfusionEvents.find(x => x.logicalid == logical_ID);
            if (endevent) {
              p.__completed = true;
              p.__completedOn = moment__WEBPACK_IMPORTED_MODULE_2__(endevent.eventdatetime);
              return;
            } else {
              p.__completed = false;
              return;
            }
          } else if (p.isinfusion && currentposology.infusiontypeid == _enum__WEBPACK_IMPORTED_MODULE_3__.InfusionType.rate) {
            let lasteventstartdate = moment__WEBPACK_IMPORTED_MODULE_2__({
              year: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).year(),
              month: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).month(),
              day: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).date(),
              hour: moment__WEBPACK_IMPORTED_MODULE_2__(dose.dosestartdatetime).hour(),
              minute: moment__WEBPACK_IMPORTED_MODULE_2__(dose.dosestartdatetime).minute()
            });
            if (lasteventstartdate.isAfter(enddate) && iteration == 0) continue;
            logical_ID = moment__WEBPACK_IMPORTED_MODULE_2__(lasteventstartdate).format('YYYYMMDDHHmm') + "_" + dose.dose_id.toString();
            //check if this event is cancelled
            let infusionevent = this.InfusionEvents.find(de => de.eventtype.toLowerCase() == "cancel" && de.logicalid.includes(logical_ID));
            if (!infusionevent) {
              //this is the last dose now get the stop event logical id
              lastdosedate = moment__WEBPACK_IMPORTED_MODULE_2__({
                year: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).year(),
                month: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).month(),
                day: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).date(),
                hour: moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).hour(),
                minute: moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).minute()
              });
              if (moment__WEBPACK_IMPORTED_MODULE_2__(dose.dosestartdatetime).format("YYYYMMDD") != moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).format("YYYYMMDD"))
                // if end date is after start date. 
                lastdosedate = moment__WEBPACK_IMPORTED_MODULE_2__({
                  year: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).add(1, "day").year(),
                  month: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).add(1, "day").month(),
                  day: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).add(1, "day").date(),
                  hour: moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).hour(),
                  minute: moment__WEBPACK_IMPORTED_MODULE_2__(dose.doseenddatatime).minute()
                });
              logical_ID = "end_" + moment__WEBPACK_IMPORTED_MODULE_2__(lastdosedate).format('YYYYMMDDHHmm') + "_" + dose.dose_id.toString();
              const adminrecord = this.InfusionEvents.find(x => x.logicalid.includes(logical_ID));
              if (adminrecord) {
                p.__completed = true;
                p.__completedOn = moment__WEBPACK_IMPORTED_MODULE_2__(adminrecord.eventdatetime);
              } else {
                p.__completed = false;
              }
              return;
            }
          } else {
            if (moment__WEBPACK_IMPORTED_MODULE_2__(dose.dosestartdatetime).isAfter(moment__WEBPACK_IMPORTED_MODULE_2__(currentposology.prescriptionenddate))) lastdosedate = dose.dosestartdatetime;else {
              lastdosedate = moment__WEBPACK_IMPORTED_MODULE_2__({
                year: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).year(),
                month: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).month(),
                day: moment__WEBPACK_IMPORTED_MODULE_2__(enddate).date(),
                hour: moment__WEBPACK_IMPORTED_MODULE_2__(dose.dosestartdatetime).hour(),
                minute: moment__WEBPACK_IMPORTED_MODULE_2__(dose.dosestartdatetime).minute()
              });
              if (lastdosedate.isAfter(enddate) && iteration == 0) continue;
            }
            logical_ID = moment__WEBPACK_IMPORTED_MODULE_2__(lastdosedate).format('YYYYMMDDHHmm') + "_" + dose.dose_id.toString();
            //check if this event is cancelled
            let doseevent = this.DoseEvents.find(de => de.eventtype.toLowerCase() == "cancel" && de.logicalid.includes(logical_ID));
            if (!doseevent) {
              //this is the last dose 
              const adminrecord = this.Medicationadministration.find(x => x.logicalid.includes(logical_ID));
              if (adminrecord) {
                p.__completed = true;
                p.__completedOn = moment__WEBPACK_IMPORTED_MODULE_2__(adminrecord.administrationstartime);
              } else {
                p.__completed = false;
              }
              return;
            }
          }
        }
        iteration++;
      }
    } else {
      p.__completed = false;
      return;
    }
  }
  GetDefaultSupplyRequestObject(prescription, doseSize, strengthneumerator, strengthdenominator) {
    let supplyRequest = new src_app_models_EPMA__WEBPACK_IMPORTED_MODULE_1__.SupplyRequest();
    let primaryMed = prescription.__medications.find(m => m.isprimary == true);
    if (primaryMed && primaryMed.producttype.toLocaleLowerCase() != "custom") {
      let medicationCode = primaryMed.__codes.find(c => c.terminology == 'formulary').code;
      let isFormulary = !primaryMed.isformulary;
      prescription.__medications[0].producttype;
      let requests = this.SupplyRequest.filter(s => s.prescription_id == prescription.prescription_id && s.medication_id == medicationCode && (s.requeststatus == 'Incomplete' || s.requeststatus == 'Pending'));
      if (requests.length == 0) {
        supplyRequest.epma_supplyrequest_id = (0,uuid__WEBPACK_IMPORTED_MODULE_6__["default"])();
        supplyRequest.requeststatus = 'Incomplete';
        supplyRequest.lastmodifiedby = '';
        supplyRequest.requestedon = this.getDateTimeinISOFormat(moment__WEBPACK_IMPORTED_MODULE_2__().toDate());
        ;
        supplyRequest.requestedby = this.loggedInUserName;
      } else {
        supplyRequest.epma_supplyrequest_id = requests[0].epma_supplyrequest_id;
        supplyRequest.requeststatus = requests[0].requeststatus;
        supplyRequest.lastmodifiedby = this.loggedInUserName;
        supplyRequest.lastmodifiedon = this.getDateTimeinISOFormat(moment__WEBPACK_IMPORTED_MODULE_2__().toDate());
        ;
        supplyRequest.requestedon = requests[0].requestedon;
        supplyRequest.requestedby = requests[0].requestedby;
      }
      supplyRequest.prescription_id = prescription.prescription_id;
      supplyRequest.medication_id = medicationCode;
      supplyRequest.personid = this.personId;
      supplyRequest.encounterid = this.encounter.encounter_id;
      supplyRequest.requestednoofdays = null;
      let currentposology = this.GetCurrentPosology(prescription);
      if (currentposology.dosetype == 'units') {
        supplyRequest.requestquantity = doseSize;
        supplyRequest.requestedquantityunits = currentposology.__dose[0].doseunit;
      } else if (currentposology.dosetype == 'strength') {
        supplyRequest.requestquantity = (strengthneumerator / strengthdenominator).toFixed(2);
        supplyRequest.requestedquantityunits = currentposology.__dose[0].strengthdenominatorunit;
      }
      supplyRequest.daterequired = null;
      supplyRequest.labelinstructiosrequired = false;
      supplyRequest.additionaldirections = '';
      supplyRequest.isformulary = !isFormulary;
      supplyRequest.ordermessage = '';
      return supplyRequest;
    } else return null;
  }
  static IsNullOrEmpty(o) {
    if (o === undefined || o == null) return true;else if (o.trim() === "") return true;
    return false;
  }
  GetAdministrationDoseType(medication) {
    var m = medication;
    var doseFormType = m.detail.doseFormCd;
    var t = {};
    if (m.formularyIngredients.length == 1 && (m.formularyIngredients[0].ingredientName ?? "").toLowerCase() == "oxygen" && (doseFormType == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseForm.Continuous || doseFormType == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseForm.NA)) {
      t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units;
      t.dose_units = "L/min";
    } else if (m.productType.toLowerCase() == "vtm") {
      var ing = m.formularyIngredients;
      if (ing.length > 0) {
        //new logic - create an arry to bind to a dropdownlist of dose units
        t.vtm_dose_units = [...new Set(ing.map(ig => ig.strengthValueNumeratorUnitDesc))]; //get distinct values using Set 
        t.vtm_dose_units.sort();
        let emptyneumerators = t.vtm_dose_units.filter(x => AppService.IsNullOrEmpty(x) == true);
        if (t.vtm_dose_units.length != 0 && emptyneumerators.length == 0) {
          t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units;
        } else
          // there is at least one ingredient with value for no strength neumerator  - use unit dose form units if available 
          if (!AppService.IsNullOrEmpty(m.detail.unitDoseFormUnitsDesc))
            //units available
            {
              t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units;
              t.vtm_dose_units = [];
              t.vtm_dose_units.push(m.detail.unitDoseFormUnitsDesc);
            } else t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.descriptive;
      }
    } else if (doseFormType == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseForm.NA) {
      t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.descriptive;
    } else if (doseFormType == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseForm.Continuous) {
      t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.descriptive;
    } else if (doseFormType == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseForm.Discrete) {
      //whenever there is strength denomninator unit - and there is one ingredient -  use dose/volume - if not  - use quantity/units
      var ingredients = m.formularyIngredients;
      if (ingredients && ingredients.length == 1)
        // one ingredient 
        {
          var strength_value_denominatorunits = ingredients[0].strengthValueDenominatorUnitDesc;
          var strength_value_neumeratorunits = ingredients[0].strengthValueNumeratorUnitDesc;
          var strength_value_denominator = ingredients[0].strengthValueDenominator;
          var strength_value_neumerator = ingredients[0].strengthValueNumerator;
          if (!AppService.IsNullOrEmpty(strength_value_denominatorunits) && strength_value_denominatorunits.toLowerCase() == "ml" && !this.IsBasicFluid(m) && !(m.detail.formDesc ?? "").toLowerCase().includes("oral solution"))
            //one ingredient and strength denominator units available
            {
              t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.strength;
              t.dose_strength_neumerator_units = strength_value_neumeratorunits;
              t.dose_strength_denominator_units = strength_value_denominatorunits;
              t.dose_strength_neumerator = +strength_value_neumerator;
              t.dose_strength_denominator = +strength_value_denominator;
            } else if (!AppService.IsNullOrEmpty(m.detail.unitDoseFormUnitsDesc))
            //one ingredient and units available
            {
              t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units;
              t.dose_units = m.detail.unitDoseFormUnitsDesc;
            } else
            //discrete and one ingredient and strength and units not available
            t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.descriptive;
        } else
        // more than one ingredient
        if (!AppService.IsNullOrEmpty(m.detail.unitDoseFormUnitsDesc))
          //multiple ingredients and units available
          {
            t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units;
            t.dose_units = m.detail.unitDoseFormUnitsDesc;
          } else
          //discrete and multiple ingredienst and strength and units not available
          t.dose_type = _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.descriptive;
    }
    return t;
  }
  IsBasicFluid(medication) {
    return medication.formularyAdditionalCodes && medication.formularyAdditionalCodes.filter(x => x.additionalCodeSystem == "Custom" && x.additionalCode == "BASIC_FLUID").length != 0;
  }
  JSONTryParse(jsonstring) {
    try {
      return JSON.parse(jsonstring);
    } catch (e) {
      return null;
    }
  }
  CalculatePrescribedConcentration(p) {
    const primaryPosology = this.GetCurrentPosology(p);
    const vtmstyle = p.orderformtype == "vtmstyle";
    const dose_type = primaryPosology.dosetype;
    const primaryMed = p.__medications.find(x => x.isprimary == true);
    let productType = null;
    if (primaryMed) productType = primaryMed.producttype;
    let dose = 0;
    let units = "";
    let prescribedConcentration = "";
    const totalvolume = primaryPosology.totalinfusionvolume;
    let diluents = p.__medications.filter(x => x.isprimary != true);
    if (primaryPosology.__dose.length != 0) {
      if (vtmstyle && productType.toLowerCase() != 'vtm') {
        dose = +primaryPosology.__dose[0].dosesize; //+this.prescription.get('posology.strength.dose_size').value; 
        units = primaryPosology.__dose[0].doseunit; // this.formsettings.dose_units;
      } else if (dose_type == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.units && +primaryPosology.__dose[0].dosestrength) {
        dose = +primaryPosology.__dose[0].dosestrength; //+this.prescription.get("posology.strength.totalstrength").value;
        units = primaryPosology.__dose[0].dosestrengthunits; //this.formsettings.singleIngredientStrength;
      } else if (dose_type == _enum__WEBPACK_IMPORTED_MODULE_3__.DoseType.strength) {
        dose = +primaryPosology.__dose[0].strengthneumerator; //+this.prescription.get("posology.strength.dose_strength_neumerator").value;
        units = primaryPosology.__dose[0].strengthneumeratorunit; //this.formsettings.dose_strength_neumerator_units; 
      }
      let concentration = this.FixToDecimalPlaces(dose / totalvolume, 2);
      if (concentration == 0 || diluents.length != 0) concentration = this.FixToDecimalPlaces(dose / totalvolume, 7);
      prescribedConcentration = +dose > 0 && +totalvolume > 0 ? [concentration, " ", units, "/ml"].join("") : "";
    }
    return prescribedConcentration;
  }
  FixToDecimalPlaces(input, n = 2) {
    if (!isNaN(input)) {
      if (input % 1 != 0) return +(+input).toFixed(n).replace(/\.0+$/g, '');else return input;
    } else if (input.toString().indexOf('-') != -1) {
      let components = input.toString().split('-');
      let comp1 = components[0];
      let comp2 = components[1];
      if (!isNaN(+comp1) && +comp1 > 0 && +comp1 != Infinity && !isNaN(+comp2) && +comp2 > 0 && +comp2 != Infinity) {
        comp1 = (+comp1).toFixed(n).replace(/\.0+$/g, '');
        comp2 = (+comp2).toFixed(n).replace(/\.0+$/g, '');
        return comp1 + "-" + comp2;
      } else {
        return input;
      }
    } else return input;
  }
  GetDurationBetweenDates(from, to) {
    const fromdate = moment__WEBPACK_IMPORTED_MODULE_2__(from);
    const enddate = moment__WEBPACK_IMPORTED_MODULE_2__(to);
    const duration = moment__WEBPACK_IMPORTED_MODULE_2__.duration(enddate.diff(fromdate));
    // Get the individual components (days, hours, minutes)
    const days = Math.floor(duration.asDays());
    const hours = duration.hours();
    const minutes = duration.minutes();
    let finalstringarray = [];
    if (days) finalstringarray.push(`${days} day(s)`);
    if (hours) finalstringarray.push(`${hours} hour(s)`);
    if (minutes) finalstringarray.push(`${minutes} minute(s)`);
    return finalstringarray.join(" ");
  }
  static #_ = this.ɵfac = function AppService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || AppService)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_subjects_service__WEBPACK_IMPORTED_MODULE_5__.SubjectsService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
    token: AppService,
    factory: AppService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 9214:
/*!****************************************************!*\
  !*** ./src/app/services/authentication.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthenticationService: () => (/* binding */ AuthenticationService)
/* harmony export */ });
/* harmony import */ var _Users_rahulkishore_BitBucket_StandaloneEPMA_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 9204);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ 6443);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 7580);




class AuthenticationService {
  constructor(httpClient) {
    this.httpClient = httpClient;
    this.token = "empty";
    this.nextrefresh = 0;
  }
  getToken() {
    var _this = this;
    return (0,_Users_rahulkishore_BitBucket_StandaloneEPMA_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var currentDate = new Date();
      var currentDateMs = currentDate.setSeconds(currentDate.getSeconds());
      if (_this.nextrefresh < currentDateMs) {
        yield _this.requestToken();
      }
      return _this.token;
    })();
  }
  requestToken() {
    var _this2 = this;
    return (0,_Users_rahulkishore_BitBucket_StandaloneEPMA_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__.HttpHeaders({
        'Content-Type': 'application/x-www-form-urlencoded'
      });
      yield _this2.httpClient.post("https://synapseidentityserver.dev.interneuron.io/connect/token", "grant_type=client_credentials&client_id=client&client_secret=secret&scope=dynamicapi.read terminologyapi.read terminologyapi.write", {
        headers: headers
      }).toPromise().then(resp => {
        _this2.token = resp.access_token;
        let currentDateTime = new Date();
        _this2.nextrefresh = currentDateTime.setSeconds(currentDateTime.getSeconds() + parseInt(resp.expires_in) - 120);
      }).catch(result => {
        throw result;
      });
    })();
  }
  static #_ = this.ɵfac = function AuthenticationService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || AuthenticationService)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_1__.HttpClient));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
    token: AuthenticationService,
    factory: AuthenticationService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 8698:
/*!*****************************************!*\
  !*** ./src/app/services/datarequest.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataRequest: () => (/* binding */ DataRequest),
/* harmony export */   SearchFormulary_PostData: () => (/* binding */ SearchFormulary_PostData)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 2510);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 1873);
/* harmony import */ var _models_EPMA__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/EPMA */ 7318);
/* harmony import */ var src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/models/filter.model */ 3060);
/* harmony import */ var _models_allergy_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/allergy.model */ 6);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/WarningServiceModal */ 7269);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! uuid */ 2550);
/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./enum */ 6134);
/* harmony import */ var src_app_services_upsert_transaction_manager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/upsert-transaction-manager.service */ 9862);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var _apirequest_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./apirequest.service */ 5351);
/* harmony import */ var _app_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.service */ 529);
/* harmony import */ var _subjects_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./subjects.service */ 3939);













class DataRequest {
  constructor(apiRequest, appService, subjects) {
    this.apiRequest = apiRequest;
    this.appService = appService;
    this.subjects = subjects;
    this.subscriptions = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subscription();
  }
  getSupplyRequest(cb) {
    this.appService.SupplyRequest = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetListByPost?synapsenamespace=local&synapseentityname=epma_supplyrequest", this.createSupplyRequestFilter()).subscribe(response => {
      let responseArray = response;
      this.appService.SupplyRequest = responseArray; //.filter(s => s.requeststatus == SupplyRequestStatus.Incomplete || s.requeststatus == SupplyRequestStatus.Pending || s.requeststatus == SupplyRequestStatus.Approved);
      cb();
    }));
  }
  createSupplyRequestFilter() {
    let condition = "encounterid = @encounterid or encounterid = @op_encounterid";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("encounterid", this.appService.encounter.encounter_id));
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("op_encounterid", _enum__WEBPACK_IMPORTED_MODULE_5__.Common.op_encounter_placeholder));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY lastmodifiedon DESC");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  getDSMedSupplyRequest(pId, cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_dsmedsupplyrequiredstatus&synapseattributename=prescription_id&attributevalue=" + pId).subscribe(response => {
      let responseArray = JSON.parse(response);
      cb(responseArray);
    }));
  }
  getSupplyRequestMedication(srId, cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_supplyrequestmedications&synapseattributename=epma_supplyrequest_id&attributevalue=" + srId).subscribe(response => {
      let responseArray = JSON.parse(response);
      cb(responseArray);
    }));
  }
  getReminders(cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_prescriptionreminders&synapseattributename=encounterid&attributevalue=" + this.appService.encounter.encounter_id).subscribe(reminders => {
      let responseArray = JSON.parse(reminders);
      this.appService.Prescriptionreminders = [];
      for (let r of responseArray) {
        this.appService.Prescriptionreminders.push(r);
      }
      this.getRemindersAck(() => {
        cb();
      });
    }));
  }
  getRemindersAck(cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_remindersack&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(reminders => {
      let responseArray = JSON.parse(reminders);
      this.appService.remindersack = [];
      for (let r of responseArray) {
        let reminder = this.appService.Prescriptionreminders.find(x => x.epma_prescriptionreminders_id == r.epma_prescriptionreminders_id);
        r.__remindertext = reminder.message;
        r.__lastmodifiedby = reminder.lastmodifiedby;
        this.appService.remindersack.push(r);
      }
      cb();
    }));
  }
  getPharmacyReviewStatus(cb) {
    this.appService.Prescriptionreviewstatus = [];
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_prescriptionreviewstatus&synapseattributename=person_id&attributevalue=" + this.appService.personId).subscribe(response => {
      let responseArray = JSON.parse(response);
      for (let r of responseArray) {
        this.appService.Prescriptionreviewstatus.push(r);
      }
      cb();
    }));
  }
  // initialize application data
  getAdminstrations(cb) {
    this.appService.Medicationadministration = [];
    this.appService.DoseEvents = [];
    this.appService.InfusionEvents = [];
    if (this.appService.Prescription && this.appService.Prescription.length != 0) {
      let medicationAdministration = this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=core&synapseentityname=medicationadministration&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id);
      let medicationAdministration_op = this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=core&synapseentityname=medicationadministration&synapseattributename=encounter_id&attributevalue=" + _enum__WEBPACK_IMPORTED_MODULE_5__.Common.op_encounter_placeholder);
      let doseEvent = this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_doseevents", this.createEventsFilter());
      let infusionEvent = this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_infusionevents", this.createEventsFilter());
      this.subscriptions.add((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.forkJoin)([medicationAdministration, doseEvent, infusionEvent, medicationAdministration_op]).subscribe(([medicationadministration, doseevent, infusionevent, medicationAdministration_op]) => {
        // initialize medication administration data
        let responseArrayMed = JSON.parse(medicationadministration);
        for (let r of responseArrayMed) {
          this.appService.Medicationadministration.push(r);
        }
        let responseArrayMed_op = JSON.parse(medicationAdministration_op);
        for (const r of responseArrayMed_op) {
          this.appService.Medicationadministration.push(r);
        }
        // initialize dose event data
        let responseArrayDose = doseevent;
        for (let r of responseArrayDose) {
          this.appService.DoseEvents.push(r);
        }
        this.appService.DoseEvents.sort((a, b) => b._sequenceid - a._sequenceid);
        for (let dose of [].concat(...this.appService.Prescription.map(p => p.__posology.map(pos => pos.__dose)))) {
          dose.__doseEvent = this.appService.DoseEvents.filter(x => x.dose_id == dose.dose_id);
        }
        // initialize infusion event data
        let responseArrayInfusion = infusionevent;
        for (let r of responseArrayInfusion) {
          this.appService.InfusionEvents.push(r);
        }
        this.appService.InfusionEvents.sort((a, b) => b._sequenceid - a._sequenceid);
        cb();
      }));
    } else {
      cb();
    }
  }
  PharmacyReviewReset(prescriptioncurrent, event_id, cb) {
    let prescriptionreviewstatus = new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.Prescriptionreviewstatus();
    prescriptionreviewstatus.epma_prescriptionreviewstatus_id = (0,uuid__WEBPACK_IMPORTED_MODULE_12__["default"])();
    prescriptionreviewstatus.person_id = prescriptioncurrent.person_id;
    prescriptionreviewstatus.prescription_id = prescriptioncurrent.prescription_id;
    prescriptionreviewstatus.precriptionedited = false;
    prescriptionreviewstatus.prescriptionstatuschange = true;
    prescriptionreviewstatus.epma_prescriptionevent_id = event_id;
    prescriptionreviewstatus.modifiedby = this.appService.loggedInUserName;
    prescriptionreviewstatus.modifiedon = this.appService.getDateTimeinISOFormat(moment__WEBPACK_IMPORTED_MODULE_3___default()().toDate());
    prescriptionreviewstatus.modifieddatetime = this.appService.getDateTimeinISOFormat(moment__WEBPACK_IMPORTED_MODULE_3___default()().toDate());
    prescriptionreviewstatus.reviewcomments = "";
    prescriptionreviewstatus.status = 'd219dd6d-aafc-4aa3-bad0-5ffcc87d0134';
    prescriptionreviewstatus.oldcorrelationid = null;
    prescriptionreviewstatus.newcorrelationid = null;
    Object.keys(prescriptionreviewstatus).map(e => {
      if (e.startsWith('_')) delete prescriptionreviewstatus[e];
    });
    var upsertManager = new src_app_services_upsert_transaction_manager_service__WEBPACK_IMPORTED_MODULE_6__.UpsertTransactionManager();
    upsertManager.beginTran(this.appService.baseURI, this.apiRequest);
    upsertManager.addEntity('local', 'epma_prescriptionreviewstatus', JSON.parse(JSON.stringify(prescriptionreviewstatus)));
    upsertManager.save(resp => {
      this.appService.UpdateDataVersionNumber(resp);
      this.appService.Prescriptionreviewstatus.push(prescriptionreviewstatus);
      this.subjects.refreshTemplate.next(prescriptioncurrent.prescription_id);
      upsertManager.destroy();
      cb();
    }, error => {
      this.appService.logToConsole(error);
      upsertManager.destroy();
      cb();
      if (this.appService.IsDataVersionStaleError(error)) {
        this.appService.RefreshPageWithStaleError(error);
      }
    });
  }
  SendEmailForNonFormularyRequest(MedicationName, Quantity, dateRequired) {
    let Model = new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.EmailModel();
    Model.Username = this.appService.appConfig.AppSettings.EmailSettings.Username;
    Model.emailFrom = this.appService.appConfig.AppSettings.EmailSettings.emailFrom;
    Model.fromName = this.appService.appConfig.AppSettings.EmailSettings.fromName;
    Model.emailTo = this.appService.appConfig.AppSettings.EmailSettings.emailTo;
    Model.subject = "Non-formulary request";
    Model.password = this.appService.appConfig.AppSettings.EmailSettings.password;
    let nhsnumber = this.appService.patientDetails.nhsnumber ? this.appService.patientDetails.nhsnumber.replaceAll(" ", "").toString() : "";
    Model.body = "A non-formulary request has been created for " + this.appService.patientDetails.fullname + ", " + this.appService.patientDetails.hospitalnumber + " " + nhsnumber + ", who is under the care of " + this.appService.encounterDetails.consultingdoctortext + ".  <br> <br>";
    for (let name of MedicationName) {
      Model.body = Model.body + "The request is for the supply of " + name + " " + Quantity + " is required by " + moment__WEBPACK_IMPORTED_MODULE_3___default()(dateRequired).format("DD-MM-YYYY") + ".<br> <br>  The request was created by " + this.appService.loggedInUserName + "<br><br>";
    }
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.platfromServiceURI + "/Email/SendEmail", JSON.stringify(JSON.stringify(Model))).subscribe(response => {
      console.log(response);
    }));
  }
  UndoTransfer(dose, cb) {
    let doselist = [];
    let existingDoseEvent = new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.DoseEvents();
    let pres = this.appService.Prescription.find(p => p.prescription_id == dose.prescription_id).__posology.find(po => po.posology_id == dose.posology_id);
    if (pres.infusiontypeid == "ci" || pres.infusiontypeid == _enum__WEBPACK_IMPORTED_MODULE_5__.InfusionType.pca || pres.infusiontypeid == "rate" && pres.frequency == "variable") {
      doselist = this.appService.events.sort((a, b) => new Date(a.eventStart).getTime() - new Date(b.eventStart).getTime()).filter(e => e.posology_id == dose.posology_id && !e.dose_id.includes("dur") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent"));
    } else {
      let alldoselist = this.appService.events.sort((a, b) => new Date(a.eventStart).getTime() - new Date(b.eventStart).getTime()).filter(e => e.posology_id == dose.posology_id && !e.dose_id.includes("dur") && !e.dose_id.includes("restart") && !e.dose_id.includes("pause") && !e.dose_id.includes("addadjust") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent"));
      var index = alldoselist.findIndex(x => x.dose_id == dose.dose_id);
      doselist.push(dose);
      let currentend = alldoselist[index + 1];
      if (currentend.dose_id.includes("start")) {
        currentend = this.createEndevent(dose, pres);
      }
      doselist.push(currentend);
    }
    var upsertManager = new src_app_services_upsert_transaction_manager_service__WEBPACK_IMPORTED_MODULE_6__.UpsertTransactionManager();
    upsertManager.beginTran(this.appService.baseURI, this.apiRequest);
    for (let admindose of doselist) {
      existingDoseEvent = this.appService.DoseEvents.find(e => e.logicalid == admindose.dose_id && e.posology_id == dose.posology_id && e.eventtype == "AdminTransfer" && e.iscancelled == false);
      if (existingDoseEvent) {
        upsertManager.addEntity('core', 'doseevents', existingDoseEvent.doseevents_id, 'del');
      }
    }
    if (upsertManager.entities.length > 0) {
      upsertManager.save(resp => {
        this.appService.UpdateDataVersionNumber(resp);
        this.appService.logToConsole(resp);
        upsertManager.destroy();
        cb();
      }, error => {
        upsertManager.destroy();
        cb();
        // this.appService.logToConsole(error);
        upsertManager.destroy();
        if (this.appService.IsDataVersionStaleError(error)) {
          this.appService.RefreshPageWithStaleError(error);
        }
      });
    } else {
      cb();
    }
  }
  transferCIAndRatevariable(doses, startDate, startTime, transferStart, cb) {
    let Transfertype = "";
    if (transferStart) {
      Transfertype = "AdminTransfer";
    } else {
      Transfertype = "Transfer";
    }
    var upsertManager = new src_app_services_upsert_transaction_manager_service__WEBPACK_IMPORTED_MODULE_6__.UpsertTransactionManager();
    upsertManager.beginTran(this.appService.baseURI, this.apiRequest);
    let newDoseDateTime = moment__WEBPACK_IMPORTED_MODULE_3___default()(new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), +startTime.split(':')[0], +startTime.split(':')[1]));
    let timediffback = moment__WEBPACK_IMPORTED_MODULE_3___default()(newDoseDateTime).diff(doses[0].eventStart, 'minutes');
    for (let dose of doses) {
      let newDoseEventId = '';
      let newDoseId = '';
      let existingDoseEvent = new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.DoseEvents();
      existingDoseEvent = this.appService.DoseEvents.find(e => e.logicalid == dose.dose_id && e.posology_id == dose.posology_id && e.eventtype == Transfertype && e.iscancelled == false);
      if (existingDoseEvent) {
        newDoseEventId = existingDoseEvent.doseevents_id;
      } else {
        newDoseEventId = (0,uuid__WEBPACK_IMPORTED_MODULE_12__["default"])();
      }
      newDoseId = dose.dose_id.split('_')[2];
      let startDateTime = dose.isinfusion == true ? dose.dose_id.split('_')[1] : dose.dose_id.split('_')[0];
      let dosedatetime = new Date(new Date(dose.eventStart).getTime() + timediffback * 60000);
      var d = new Date();
      var v = new Date();
      v.setMinutes(d.getMinutes() + 30);
      console.log(v);
      let doseEvents = {};
      let fromDate = moment__WEBPACK_IMPORTED_MODULE_3___default()(startDateTime.slice(0, 4) + "-" + startDateTime.slice(4, 6) + "-" + startDateTime.slice(6, 8) + "T" + startDateTime.slice(8, 10) + ":" + startDateTime.slice(10, 12), "YYYY-MM-DDTHH:mm").toDate();
      doseEvents = {
        doseevents_id: newDoseEventId,
        dose_id: newDoseId,
        posology_id: dose.posology_id,
        startdatetime: this.appService.getDateTimeinISOFormat(fromDate),
        eventtype: Transfertype,
        dosedatetime: this.appService.getDateTimeinISOFormat(dosedatetime),
        iscancelled: false,
        logicalid: dose.dose_id,
        createdon: this.appService.getDateTimeinISOFormat(moment__WEBPACK_IMPORTED_MODULE_3___default()().toDate()),
        modifiedon: this.appService.getDateTimeinISOFormat(moment__WEBPACK_IMPORTED_MODULE_3___default()().toDate()),
        createdby: this.appService.loggedInUserName,
        modifiedby: this.appService.loggedInUserName
      };
      upsertManager.addEntity('core', 'doseevents', JSON.parse(JSON.stringify(doseEvents)));
    }
    upsertManager.save(resp => {
      this.appService.UpdateDataVersionNumber(resp);
      this.appService.logToConsole(resp);
      upsertManager.destroy();
      cb("success");
    }, error => {
      upsertManager.destroy();
      // this.appService.logToConsole(error);
      upsertManager.destroy();
      cb("error");
      if (this.appService.IsDataVersionStaleError(error)) {
        this.appService.RefreshPageWithStaleError(error);
      }
    });
  }
  createEndevent(dose, pres) {
    let originalDoseStartTime = this.appService.Prescription.find(x => x.prescription_id == pres.prescription_id).__posology.find(y => y.posology_id == dose.posology_id).__dose.find(z => z.dose_id == dose.dose_id.split("_")[2]).dosestartdatetime;
    let originalDoseEndTime = this.appService.Prescription.find(x => x.prescription_id == pres.prescription_id).__posology.find(y => y.posology_id == dose.posology_id).__dose.find(z => z.dose_id == dose.dose_id.split("_")[2]).doseenddatatime;
    var a = moment__WEBPACK_IMPORTED_MODULE_3___default()(originalDoseEndTime); //now
    var b = moment__WEBPACK_IMPORTED_MODULE_3___default()(originalDoseStartTime);
    var convertToMinites = a.diff(b, 'minutes');
    let splitLogicalId = dose.dose_id.split('_');
    let date = moment__WEBPACK_IMPORTED_MODULE_3___default()();
    date.set({
      'year': splitLogicalId[1].substring(0, 4),
      'month': splitLogicalId[1].substring(4, 6) - 1,
      'date': splitLogicalId[1].substring(6, 8),
      'hour': splitLogicalId[1].substring(8, 10),
      'minute': splitLogicalId[1].substring(10, 12),
      'second': 0
    });
    let originalLogicid = moment__WEBPACK_IMPORTED_MODULE_3___default()(date).add(convertToMinites, "minutes");
    let endtDatetemp = moment__WEBPACK_IMPORTED_MODULE_3___default()(dose.eventStart).add(convertToMinites, "minutes");
    let endaddedtime = 'end_' + moment__WEBPACK_IMPORTED_MODULE_3___default()(originalLogicid).format('YYYYMMDDHHmm') + "_" + dose.dose_id.split("_")[2];
    return {
      "prescription_id": dose.prescription_id,
      "posology_id": dose.posology_id,
      "dose_id": endaddedtime,
      "eventStart": endtDatetemp,
      "eventEnd": null,
      "prn": false,
      "iscancel": false,
      "doctorsorder": false,
      "isinfusion": true,
      "content": "<div class='InfusionCompleteoverdue'></div>",
      "title": "Infusion Complete overdue",
      "admitdone": false,
      "opacityclass": "",
      "diffrence": 0,
      "stackclass": false
    };
  }
  transferRateInfution(dose, startDate, startTime, transferStart, cb) {
    let doselist = [];
    doselist = this.appService.events.sort((a, b) => new Date(a.eventStart).getTime() - new Date(b.eventStart).getTime()).filter(e => e.posology_id == dose.posology_id && !e.dose_id.includes("dur") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent"));
    // if (this.appService.Prescription.find(p => p.__posology[0].posology_id == dose.posology_id && p.__posology[0].infusiontypeid == "ci")) {
    let pres = this.appService.Prescription.find(p => p.prescription_id == dose.prescription_id).__posology.find(po => po.posology_id == dose.posology_id);
    if (pres.infusiontypeid == "ci" || pres.infusiontypeid == _enum__WEBPACK_IMPORTED_MODULE_5__.InfusionType.pca || pres.infusiontypeid == "rate" && pres.frequency == "variable") {
      this.transferCIAndRatevariable(doselist, startDate, startTime, transferStart, message => {
        cb(message);
      });
    } else {
      let newDoseDateTime = moment__WEBPACK_IMPORTED_MODULE_3___default()(new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), +startTime.split(':')[0], +startTime.split(':')[1]));
      // for (let dose of doselist)
      //  var index = doselist.indexOf(dose);
      var index = doselist.findIndex(x => x.dose_id == dose.dose_id);
      let nextstartItem;
      let lastenditem;
      let currentend;
      let nexttime;
      let endtime;
      let currentendtime;
      if (doselist.length == 1 && doselist[0].dose_id.includes("start")) {
        currentend = this.createEndevent(dose, pres);
        let dosesrate = [];
        dosesrate.push(dose);
        dosesrate.push(currentend);
        this.transferCIAndRatevariable(dosesrate, startDate, startTime, transferStart, message => {
          cb(message);
        });
      }
      if (index >= 0 && index < doselist.length - 1) {
        currentend = doselist[index + 1];
        nextstartItem = doselist[index + 2];
        if (currentend.dose_id.includes("start")) {
          currentend = this.createEndevent(dose, pres);
          nextstartItem = doselist[index + 1];
          let testcurrenttime = moment__WEBPACK_IMPORTED_MODULE_3___default()(currentend.eventStart).clone();
          testcurrenttime.add(this.appService.administrationTimeDiffInMinute, 'minutes');
          testcurrenttime = moment__WEBPACK_IMPORTED_MODULE_3___default()(currentend.eventStart).add(moment__WEBPACK_IMPORTED_MODULE_3___default()(newDoseDateTime).diff(dose.eventStart, 'minutes'), 'minutes');
          if (testcurrenttime.isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_3___default()(nextstartItem.eventStart))) {
            cb("The administration event cannot be administered at a time after the next administration event.");
            return;
          }
        }
        lastenditem = doselist[index - 1];
        if (nextstartItem) {
          nexttime = moment__WEBPACK_IMPORTED_MODULE_3___default()(nextstartItem.eventStart).clone();
        } else {
          // if (this.appService.Prescription.find(p => p.prescription_id == dose.prescription_id).__posology.find(po => po.posology_id == dose.posology_id).prescriptionenddate) {
          //     nexttime = moment(this.appService.Prescription.find(p => p.prescription_id == dose.prescription_id).__posology.find(po => po.posology_id == dose.posology_id).prescriptionenddate).clone();
          // }
          // else {
          nexttime = moment__WEBPACK_IMPORTED_MODULE_3___default()().add(8, 'days');
          // }
        }
        if (index == 0) {
          // endtime = moment(this.appService.Prescription.find(x => x.prescription_id == dose.prescription_id).startdatetime)
          endtime = moment__WEBPACK_IMPORTED_MODULE_3___default()(this.appService.encounter.sortdate);
        } else {
          endtime = moment__WEBPACK_IMPORTED_MODULE_3___default()(lastenditem.eventStart).clone();
        }
        currentendtime = moment__WEBPACK_IMPORTED_MODULE_3___default()(currentend.eventStart).add(moment__WEBPACK_IMPORTED_MODULE_3___default()(newDoseDateTime).diff(dose.eventStart, 'minutes'), 'minutes');
        nexttime.add(-this.appService.administrationTimeDiffInMinute, 'minutes');
        if (index != 0) {
          endtime.add(this.appService.administrationTimeDiffInMinute, 'minutes');
        }
      }
      let timediffback = moment__WEBPACK_IMPORTED_MODULE_3___default()(newDoseDateTime).diff(dose.eventStart, 'minutes');
      let timediffForword = moment__WEBPACK_IMPORTED_MODULE_3___default()(newDoseDateTime).diff(nexttime, 'minutes');
      if (timediffback < 0) {
        //  let dif=moment(lastenditem.eventStart).diff(moment(newDoseDateTime),'minutes')
        if (moment__WEBPACK_IMPORTED_MODULE_3___default()(endtime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_3___default()(newDoseDateTime))) {
          if (index == 0) {
            cb("The time of transfer cannot be earlier than the admission date/time");
          } else {
            if (transferStart) cb("The administration event cannot be administered at a time before the previous administration event.");else cb("The administration event cannot be transferred to a time before the previous administration event.");
          }
        } else {
          let dosesrate = [];
          dosesrate.push(dose);
          dosesrate.push(currentend);
          this.transferCIAndRatevariable(dosesrate, startDate, startTime, transferStart, message => {
            cb(message);
          });
        }
      } else if (timediffback > 0) {
        if (moment__WEBPACK_IMPORTED_MODULE_3___default()(currentendtime).isSameOrAfter(moment__WEBPACK_IMPORTED_MODULE_3___default()(nexttime))) {
          if (transferStart) cb("The administration event cannot be administered at a time after the next administration event.");else cb("The administration event cannot be transferred to a time after the next administration event.");
        } else {
          let dosesrate = [];
          dosesrate.push(dose);
          dosesrate.push(currentend);
          this.transferCIAndRatevariable(dosesrate, startDate, startTime, transferStart, message => {
            cb(message);
          });
        }
      } else {
        cb("success");
      }
    }
  }
  getmedreconciliaCompletedobject() {
    this.appService.medReconcelationCompleteStatus = "Pharmacy_To_Review";
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_medreconciliation&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(response => {
      let medreconciliationobject = JSON.parse(response);
      if (medreconciliationobject[0]) {
        this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetObjectHistory?synapsenamespace=local&synapseentityname=epma_medreconciliation&id=" + medreconciliationobject[0].epma_medreconciliation_id).subscribe(response => {
          let medreconciliationhistory = JSON.parse(response);
          let iscomplete = false;
          if (medreconciliationhistory.find(x => x.status == "Medicines Reconciliation completed")) {
            iscomplete = true;
          }
          let str = moment__WEBPACK_IMPORTED_MODULE_3___default()().format("YYYYMMDD");
          let teckObject = medreconciliationhistory.find(x => x.role == "EPMA Pharmacy tech" && moment__WEBPACK_IMPORTED_MODULE_3___default()(x.modifiedon).format("YYYYMMDD") == moment__WEBPACK_IMPORTED_MODULE_3___default()().format("YYYYMMDD"));
          let pharmacistObject = medreconciliationhistory.find(x => x.role == "EPMA Pharmacist" && moment__WEBPACK_IMPORTED_MODULE_3___default()(x.modifiedon).format("YYYYMMDD") == moment__WEBPACK_IMPORTED_MODULE_3___default()().format("YYYYMMDD"));
          if (iscomplete) {
            if (teckObject && pharmacistObject) {
              this.appService.medReconcelationCompleteStatus = "Pharmacy_Reviewed_Medrec_Done";
            } else if (teckObject && !pharmacistObject) {
              this.appService.medReconcelationCompleteStatus = "Pharmacy_Technician_Reviewed_Medrec_Done";
            } else if (!teckObject && pharmacistObject) {
              this.appService.medReconcelationCompleteStatus = "Pharmacist_Reviewed_Medrec_Done";
            } else if (!teckObject && !pharmacistObject) {
              this.appService.medReconcelationCompleteStatus = "Pharmacy_To_Review_Medrec_Done";
            }
          } else {
            if (teckObject && !pharmacistObject) {
              this.appService.medReconcelationCompleteStatus = "Pharmacy_Technician_Reviewed";
            }
            // else if (!teckObject && pharmacistObject) {
            //     this.appService.medReconcelationCompleteStatus = "reviewed by pharmacist only"
            // }
            else if (!teckObject && !pharmacistObject) {
              this.appService.medReconcelationCompleteStatus = "Pharmacy_To_Review";
            }
          }
        }));
      }
    }));
  }
  // get all prescription
  getAllPrescription(cb) {
    this.GetManageAwayPeriod(() => {});
    this.getmedreconciliaCompletedobject();
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_prescriptiondetail", this.createPrescriptionFilter()).subscribe(response => {
      this.appService.Prescription = [];
      // this.appService.Medication = [];
      for (let prescription of response) {
        if (prescription.correlationid) {
          prescription.__posology = JSON.parse(prescription.__posology);
          prescription.__routes = JSON.parse(prescription.__routes).sort((x, y) => y.isdefault - x.isdefault);
          prescription.__medications = JSON.parse(prescription.__medications);
          this.appService.Prescription.push(prescription);
        }
      }
      this.GetNursingInstructionsAndCustomWarnings(this.appService.Prescription, () => {
        this.subjects.refreshTemplate.next(undefined);
        cb();
      });
    }));
  }
  // get all metadata
  getAllPrescriptionMeta(cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetBaseViewList/epma_prescriptionmeta").subscribe(response => {
      this.appService.oxygenDevices = [];
      this.appService.oxygenprescriptionadditionalinfo = [];
      this.appService.obsScales = [];
      this.appService.MetaReviewstatus = [];
      this.appService.MetaPrescriptionstatus = [];
      this.appService.MetaPrescriptionDuration = [];
      this.appService.MetaPrescriptionadditionalcondition = [];
      this.appService.MetaPrescriptionSource = [];
      this.appService.MetaPrescriptioncontext = [];
      this.appService.MetaComplianceAid = [];
      for (let meta of JSON.parse(response)) {
        switch (meta.field) {
          case "oxygendevices":
            this.appService.oxygenDevices = JSON.parse(meta.data);
            break;
          case "oxygenprescriptionadditionalinfo":
            this.appService.oxygenprescriptionadditionalinfo = JSON.parse(meta.data);
            break;
          case "observationscaletype":
            this.appService.obsScales = JSON.parse(meta.data);
            break;
          case "reviewstatus":
            this.appService.MetaReviewstatus = JSON.parse(meta.data);
            break;
          case "prescriptionstatus":
            this.appService.MetaPrescriptionstatus = JSON.parse(meta.data);
            break;
          case "prescriptionduration":
            this.appService.MetaPrescriptionDuration = JSON.parse(meta.data);
            break;
          case "prescriptionadditionalconditions":
            this.appService.MetaPrescriptionadditionalcondition = JSON.parse(meta.data);
            break;
          case "prescriptionsource":
            this.appService.MetaPrescriptionSource = JSON.parse(meta.data);
            break;
          case "prescriptioncontext":
            this.appService.MetaPrescriptioncontext = JSON.parse(meta.data);
            break;
          case "complianceaid":
            this.appService.MetaComplianceAid = JSON.parse(meta.data);
        }
      }
      cb();
    }));
  }
  // get medication administration
  getMedicationAdministration(cb) {
    this.appService.Medicationadministration = [];
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=core&synapseentityname=medicationadministration&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(response => {
      let responseArray = JSON.parse(response);
      for (let r of responseArray) {
        this.appService.Medicationadministration.push(r);
      }
      cb();
    }));
  }
  updateDoseForPrescription(pid, cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=core&synapseentityname=dose&synapseattributename=prescription_id&attributevalue=" + pid).subscribe(response => {
      let responseArray = JSON.parse(response);
      let p = this.appService.Prescription.find(x => x.prescription_id == pid);
      if (p) {
        p.__posology.forEach(pos => {
          pos.__dose = responseArray.filter(d => d.posology_id == pos.posology_id);
        });
        // p.__posology.__dose = responseArray;
      }
      cb();
    }));
  }
  // get dose event
  getDoseEvents(cb) {
    this.appService.DoseEvents = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_doseevents", this.createEventsFilter()).subscribe(response => {
      let responseArray = response;
      for (let r of responseArray) {
        this.appService.DoseEvents.push(r);
      }
      this.appService.DoseEvents.sort((a, b) => b._sequenceid - a._sequenceid);
      cb();
    }));
  }
  // get infusion event
  getInfusionEvents(cb) {
    this.appService.InfusionEvents = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_infusionevents", this.createEventsFilter()).subscribe(response => {
      let responseArray = response;
      for (let r of responseArray) {
        this.appService.InfusionEvents.push(r);
      }
      this.appService.InfusionEvents.sort((a, b) => b._sequenceid - a._sequenceid);
      cb();
    }));
  }
  // get medication administration history
  getMedicationAdministrationHistory(id, cb) {
    this.appService.MedicationadministrationHistory = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_medicationadministrationhistory", this.createAdministrationHistoryFilter(id)).subscribe(response => {
      let responseArray = response.sort((a, b) => b._sequenceid - a._sequenceid);
      for (let r of responseArray) {
        this.appService.MedicationadministrationHistory.push(r);
      }
      if (this.appService.MedicationadministrationHistory.length > 0) {
        this.getProductHistory(this.appService.MedicationadministrationHistory, () => {
          this.getWitnessAuthHistory(this.appService.MedicationadministrationHistory, data => {
            cb(data);
          });
        });
      } else {
        cb([]);
      }
    }));
  }
  getProductHistory(administration, cb) {
    this.appService.AdministermedicationHistory = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_administeredmedhistory", this.createAdministerMedHistoryFilter(administration)).subscribe(response => {
      let responseArray = response.sort((a, b) => b._sequenceid - a._sequenceid);
      ;
      if (responseArray.length > 0) {
        for (let r of responseArray) {
          this.appService.AdministermedicationHistory.push(r);
        }
      }
      cb();
    }));
  }
  getWitnessAuthHistory(administration, cb) {
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_administrationwitnesshistory", this.createAdministerMedHistoryFilter(administration)).subscribe(response => {
      let responseArray = response.sort((a, b) => b._sequenceid - a._sequenceid);
      ;
      cb(responseArray);
    }));
  }
  getPrescriptionAdministrationHistory(id, cb) {
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_prescriptionadministrationhistory", this.createPrescriptionAdministrationHistoryFilter(id)).subscribe(response => {
      let responseArray = response; //.sort((a, b) => b._sequenceid - a._sequenceid);;
      cb(responseArray);
    }));
  }
  createAdministrationHistoryFilter(id) {
    let condition = "logicalid = @logicalid";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("logicalid", id));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY 2");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  createPrescriptionAdministrationHistoryFilter(id) {
    let condition = "prescription_id = @prescription_id";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("prescription_id", id));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  // get dose event history
  getDoseEventsHistory(id, cb) {
    this.appService.DoseEventsHistory = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_doseeventshistory", this.createAdministrationHistoryFilter(id)).subscribe(response => {
      let responseArray = response;
      for (let r of responseArray) {
        this.appService.DoseEventsHistory.push(r);
      }
      this.appService.DoseEventsHistory.sort((a, b) => b._sequenceid - a._sequenceid);
      cb();
    }));
  }
  // get infusion event history
  getInfusionEventsHistory(id, cb) {
    this.appService.InfusionEventsHistory = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_infusioneventshistory", this.createAdministrationHistoryFilter(id)).subscribe(response => {
      let i = 0;
      let responseArray = response.sort((a, b) => b._sequenceid - a._sequenceid);
      for (let r of responseArray) {
        r._index = i++;
        this.appService.InfusionEventsHistory.push(r);
      }
      cb();
    }));
  }
  getAllergy(cb) {
    this.appService.allergyintolerance = [];
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=core&synapseentityname=allergyintolerance&synapseattributename=person_id&attributevalue=" + this.appService.personId).subscribe(response => {
      let responseArray = JSON.parse(response);
      this.appService.allergyintolerance = responseArray;
      this.appService.patientInfo.allergens = this.appService.allergyintolerance.filter(x => x.causativeagentcodesystem.toLowerCase() == "SNOMED CT".toLowerCase() && x.clinicalstatusvalue.toLowerCase() == "Active".toLowerCase()).map(r => {
        return {
          uname: r.causativeagentdescription,
          code: r.causativeagentcode,
          type: 1
        };
      });
      this.GetDiagnosis(() => {
        cb();
      });
    }));
  }
  GetDiagnosis(cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=core&synapseentityname=diagnosis&synapseattributename=person_id&attributevalue=" + this.appService.personId).subscribe(response => {
      let responseArray = JSON.parse(response);
      this.appService.patientInfo.conditions = responseArray.filter(x => x.clinicalstatus.toLowerCase() == "Active".toLowerCase()).map(r => {
        return {
          uname: r.diagnosistext,
          code: r.diagnosiscode,
          type: 1
        };
      });
      cb();
    }));
  }
  TriggerWarningUpdateOnChanges(cb, wc = _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.ip) {
    //get new allergies and diagnoses from entity
    this.getAllergy(() => {
      this.appService.patientInfo.allergens.sort((a, b) => a.code.localeCompare(b.code));
      this.appService.patientInfo.conditions.sort((a, b) => a.code.localeCompare(b.code));
      //get new height weight from entity
      this.getHeightWeight(() => {
        this.appService.patientInfo.age = this.appService.personAgeInDays;
        this.appService.patientInfo.bsa = this.appService.bodySurfaceArea;
        this.appService.patientInfo.gender = this.appService.gender.toLowerCase() == 'm' ? 1 : this.appService.gender.toLowerCase() == 'f' ? 2 : 3;
        this.appService.patientInfo.weight = +this.appService.refWeightValue;
        this.appService.patientInfo.height = +this.appService.refHeightValue;
        let warningcontextid = this.appService.encounter.encounter_id + '_' + wc;
        let wservice = wc == _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.mod ? this.appService.warningServiceMODContext : this.appService.warningServiceIPContext;
        if (wc.startsWith(_models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.WarningContext.op)) {
          wservice = this.appService.warningService.GetWarningsInstance(wc);
        }
        //get current/lastrecorded allergies and height and weight from epma warningupdate entity
        this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_personwarningupdate&synapseattributename=warningcontextid&attributevalue=" + warningcontextid).subscribe(response => {
          let curr_warningupdate = JSON.parse(response);
          let curr_dbWarningUpdate = new _models_allergy_model__WEBPACK_IMPORTED_MODULE_2__.Personwarningupdate();
          let curr_patientInfo = new _models_WarningServiceModal__WEBPACK_IMPORTED_MODULE_4__.PatientInfo();
          if (curr_warningupdate.length > 0) {
            curr_dbWarningUpdate = curr_warningupdate[0];
            if (curr_dbWarningUpdate.allergens == 'null') curr_dbWarningUpdate.allergens = '[]';
            if (curr_dbWarningUpdate.conditions == 'null') curr_dbWarningUpdate.conditions = '[]';
            curr_patientInfo.age = this.appService.personAgeInDays;
            curr_patientInfo.allergens = JSON.parse(curr_dbWarningUpdate.allergens ?? "[]");
            curr_patientInfo.conditions = JSON.parse(curr_dbWarningUpdate.conditions ?? "[]");
            curr_patientInfo.bsa = curr_dbWarningUpdate.bsa;
            curr_patientInfo.gender = this.appService.gender.toLowerCase() == 'm' ? 1 : this.appService.gender.toLowerCase() == 'f' ? 2 : 3;
            curr_patientInfo.height = curr_dbWarningUpdate.height;
            curr_patientInfo.weight = curr_dbWarningUpdate.weight;
            curr_patientInfo.allergens.sort((a, b) => a.code.localeCompare(b.code));
            curr_patientInfo.conditions.sort((a, b) => a.code.localeCompare(b.code));
          } else {
            curr_dbWarningUpdate.epma_personwarningupdate_id = (0,uuid__WEBPACK_IMPORTED_MODULE_12__["default"])();
          }
          if (this.appService.warningService) {
            let c1 = this.ComparePatientInfoObjects(curr_patientInfo, this.appService.patientInfo);
            let c2 = JSON.stringify(curr_patientInfo.allergens) == JSON.stringify(this.appService.patientInfo.allergens);
            let c3 = JSON.stringify(curr_patientInfo.conditions) == JSON.stringify(this.appService.patientInfo.conditions);
            if (!c1 || !c2 || !c3) {
              // call to refresh the warning from fdb
              this.appService.RefreshWarningsFromApi(() => {
                cb();
              }, wservice);
              // insert/update epma_personwarningupdate if does not exist and anything chnage
              curr_dbWarningUpdate.allergens = JSON.stringify(this.appService.patientInfo.allergens);
              curr_dbWarningUpdate.conditions = JSON.stringify(this.appService.patientInfo.conditions);
              curr_dbWarningUpdate.height = +this.appService.patientInfo.height;
              curr_dbWarningUpdate.weight = +this.appService.patientInfo.weight;
              curr_dbWarningUpdate.bsa = +this.appService.patientInfo.bsa; //+(Math.sqrt(+this.appService.refWeightValue * + this.appService.patientInfo.weight) / 60).toFixed(2);
              curr_dbWarningUpdate.person_id = this.appService.personId;
              curr_dbWarningUpdate.encounter_id = this.appService.encounter.encounter_id;
              curr_dbWarningUpdate.warningcontextid = warningcontextid;
              if (curr_dbWarningUpdate.allergens == 'null') curr_dbWarningUpdate.allergens = '[]';
              if (curr_dbWarningUpdate.conditions == 'null') curr_dbWarningUpdate.conditions = '[]';
              this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/PostObject?synapsenamespace=local&synapseentityname=epma_personwarningupdate", curr_dbWarningUpdate, false).subscribe(saveResponse => {}));
            } else {
              cb();
            }
          }
        }));
      });
    });
  }
  ComparePatientInfoObjects(obj_1, obj_2) {
    for (var key in obj_1) {
      if (obj_1.hasOwnProperty(key)) {
        if (typeof obj_1[key] != "object") {
          if (obj_2.hasOwnProperty(key) && obj_1[key] == obj_2[key]) {} else {
            return false;
          }
        }
      }
    }
    return true;
  }
  getHeightWeight(cb) {
    this.appService.observation = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_getweightobservations", this.createWeightFilter()).subscribe(response => {
      if (response.length > 0) {
        for (let r of response) {
          this.appService.observation.push(r);
        }
        if (response[0].value != "" || response[0].value != null) {
          let today = new Date();
          let lastObservedDate = new Date(response[0].observationeventdatetime);
          this.appService.refWeightValue = response[0].value;
          this.appService.refWeightType = (response[0].method ?? "").indexOf("258083009") >= 0 ? _enum__WEBPACK_IMPORTED_MODULE_5__.RefWeightType.estimated : (response[0].method ?? "").indexOf("115341008") >= 0 ? _enum__WEBPACK_IMPORTED_MODULE_5__.RefWeightType.actual : null;
          this.appService.refWeightRecordedOn = moment__WEBPACK_IMPORTED_MODULE_3___default()(new Date(response[0].observationeventdatetime)).format('DD-MMM-yyyy');
          this.appService.logToConsole(`Weight: ${this.appService.refWeightValue} kg (${this.appService.refWeightRecordedOn})`);
          let todayMoment = moment__WEBPACK_IMPORTED_MODULE_3___default()([today.getFullYear(), today.getMonth(), today.getDate()]);
          let lastObservedMoment = moment__WEBPACK_IMPORTED_MODULE_3___default()([lastObservedDate.getFullYear(), lastObservedDate.getMonth(), lastObservedDate.getDate()]);
          const diffDays = todayMoment.diff(lastObservedMoment, 'days');
          this.appService.logToConsole(diffDays);
          if (diffDays == 0) {
            this.appService.isWeightCapturedForToday = true;
          } else {
            this.appService.isWeightCapturedForToday = false;
          }
        } else {
          this.appService.isWeightCapturedForToday = false;
        }
      } else {
        this.appService.isWeightCapturedForToday = false;
        this.appService.refWeightValue = undefined;
        this.appService.refWeightType = null;
        this.appService.refWeightRecordedOn = "";
      }
      this.appService.logToConsole(this.appService.isWeightCapturedForToday);
      this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_getheightobservations", this.createHeightFilter()).subscribe(response => {
        if (response.length > 0) {
          if (response[0].value != "" || response[0].value != null) {
            this.appService.isHeightCaptured = true;
            this.appService.refHeightValue = response[0].value;
            if (!isNaN(+this.appService.refWeightValue) && +this.appService.refWeightValue > 0) {
              this.appService.bodySurfaceArea = +(Math.sqrt(+this.appService.refWeightValue * +response[0].value) / 60).toFixed(2);
            }
          } else {
            this.appService.isHeightCaptured = false;
          }
        } else {
          this.appService.isHeightCaptured = false;
          this.appService.refHeightValue = undefined;
          this.appService.bodySurfaceArea = undefined;
        }
        cb();
      }));
    }));
  }
  createWeightFilter() {
    // let condition = "person_id = @person_id and encounter_id = @encounter_id";
    let condition = "person_id = @person_id";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("person_id", this.appService.personId));
    // pm.filterparams.push(new filterparam("encounter_id", this.appService.encounter.encounter_id));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY observationeventdatetime desc");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  createHeightFilter() {
    // let condition = "person_id = @person_id and encounter_id = @encounter_id";
    let condition = "person_id = @person_id";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("person_id", this.appService.personId));
    // pm.filterparams.push(new filterparam("encounter_id", this.appService.encounter.encounter_id));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY observationeventdatetime desc");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  // get prescription route
  // getPriscriptionRoutes() {
  //     this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_prescriptionroutes", this.createPrescriptionRoutesFilter()).subscribe(
  //         (response) => {
  //             let responseArray = (response);
  //             for (let r of responseArray) {
  //                 this.appService.Prescriptionroutes.push(<Prescriptionroutes>r);
  //             }
  //         }));
  // }
  createEventsFilter() {
    if (this.appService.Prescription.length == 0) {
      return;
    }
    let index = 0;
    const pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    const condition = [];
    for (let pos of this.appService.Prescription.map(p => p.__posology)) {
      pos.forEach(pos1 => {
        let para = this.makeId(5);
        if (index === 0) condition.push("posology_id =@" + para);else condition.push(" or posology_id =@" + para);
        pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("@" + para, pos1.posology_id));
        index = index + 1;
      });
    }
    const f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition.join('')));
    const select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT * ");
    const orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY 1");
    const body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    let jsonobj = JSON.stringify(body);
    return jsonobj;
  }
  createPrescriptionRoutesFilter() {
    if (this.appService.Prescription.length == 0) {
      return;
    }
    let index = 0;
    const pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    const condition = [];
    for (let prescription of this.appService.Prescription) {
      let para = this.makeId(5);
      if (index === 0) condition.push("prescription_id =@" + para);else condition.push(" or prescription_id =@" + para);
      pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("@" + para, prescription.prescription_id));
      index = index + 1;
    }
    const f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition.join('')));
    const select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT * ");
    const orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY 1");
    const body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    let jsonobj = JSON.stringify(body);
    return jsonobj;
  }
  createPrescriptionFilter() {
    let condition = "person_id = @person_id and (encounter_id = @encounter_id or prescriptioncontext_id = @prescriptioncontext_id)";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("person_id", this.appService.personId));
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("encounter_id", this.appService.encounter.encounter_id));
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("prescriptioncontext_id", this.appService.MetaPrescriptioncontext.find(x => x.context == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Outpatient).prescriptioncontext_id));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY prescription_id desc");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  makeId(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
  ngOnDestroy() {
    this.subscriptions.unsubscribe();
  }
  // GetNursingInstructionsAndCustomWarnings(parray: Array<Prescription>, cb: Function) {
  //     let i = 0;
  //     let inpatientid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == PrescriptionContext.Inpatient).prescriptioncontext_id;
  //     let dischargeid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == PrescriptionContext.Discharge).prescriptioncontext_id;
  //     let ordersetid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == PrescriptionContext.Orderset).prescriptioncontext_id;
  //     let opid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == PrescriptionContext.Outpatient).prescriptioncontext_id;
  //     let filtered = parray.filter(p => p.prescriptioncontext_id == inpatientid || p.prescriptioncontext_id == ordersetid || p.prescriptioncontext_id == dischargeid || p.prescriptioncontext_id == opid);
  //     if (filtered.length == 0) {
  //         cb();
  //     }
  //     else {
  //         let medcodes = [];
  //         filtered.forEach(p => {
  //             const m = p.__medications.find(x => x.isprimary && x.producttype != "custom");
  //             if (m) {
  //                 const code = m.__codes.find(x => x.terminology == "formulary");
  //                 if (code && !medcodes.includes(code.code)) {
  //                     medcodes.push(code.code);
  //                 }
  //             }
  //         });
  //         if (medcodes.length == 0) {
  //             cb();
  //         }
  //         else {
  //             medcodes.forEach(async (mc) => {
  //                 var endpoint = this.appService.appConfig.uris.terminologybaseuri + "/Formulary/getformularydetailruleboundbycode";
  //                 this.subscriptions.add(this.apiRequest.getRequest(`${endpoint}/${mc}?api-version=1.0`)
  //                     .subscribe((response) => {
  //                         i++;
  //                         if (response && response.length != 0) {
  //                             let fp = filtered.filter(p => p.__medications.find(m => m.isprimary == true).__codes.find(x => x.terminology == "formulary").code == mc);
  //                             fp.forEach(p => {
  //                                 p.__nursinginstructions = [];
  //                                 p.__customWarning = [];
  //                                 p.__drugcodes = [];
  //                                 p.__drugindications = [];
  //                                 console.log(response.detail);
  //                                 p.__ignoreDuplicateWarnings = response.detail.ignoreDuplicateWarnings;
  //                                 if (response.detail.customWarnings)
  //                                     p.__customWarning = Object.assign(response.detail.customWarnings);
  //                                 else
  //                                     p.__customWarning = [];
  //                                 if (response.detail.titrationTypes && response.detail.titrationTypes.length > 0) {
  //                                     p.titrationtype = response.detail.titrationTypes[0].desc;
  //                                     p.titrationtypecode = response.detail.titrationTypes[0].cd;
  //                                 }
  //                                 response.detail.endorsements.forEach(e => {
  //                                     p.__nursinginstructions.push(new NursingInstruction(null, "Endorsement", e));
  //                                 });
  //                                 response.detail.medusaPreparationInstructions.forEach(e => {
  //                                     p.__nursinginstructions.push(new NursingInstruction(null, "Medusa Instructions", e));
  //                                 });
  //                                 if (response.formularyAdditionalCodes)
  //                                     p.__drugcodes = Object.assign(response.formularyAdditionalCodes);
  //                                 else
  //                                     p.__drugcodes = null;
  //                                 if (response.detail.licensedUses)
  //                                     response.detail.licensedUses.forEach(u => {
  //                                         p.__drugindications.push(u);
  //                                     });
  //                                 if (response.detail.unLicensedUses)
  //                                     response.detail.unLicensedUses.forEach(u => {
  //                                         p.__drugindications.push(u);
  //                                     });
  //                             });
  //                         }
  //                         if (i == medcodes.length)
  //                             cb();
  //                     }, (error) => {
  //                         i++;
  //                         this.appService.logToConsole(error);
  //                         console.log("no response for medication:" + mc)
  //                         if (i == medcodes.length)
  //                             cb();
  //                     }));
  //             });
  //         }
  //     }
  // }
  GetNursingInstructionsAndCustomWarnings(parray, cb) {
    let inpatientid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Inpatient).prescriptioncontext_id;
    let dischargeid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Discharge).prescriptioncontext_id;
    let ordersetid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Orderset).prescriptioncontext_id;
    let opid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Outpatient).prescriptioncontext_id;
    let moaid = this.appService.MetaPrescriptioncontext.find(pc => pc.context == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Admission).prescriptioncontext_id;
    let filtered = parray.filter(p => p.prescriptioncontext_id == inpatientid || p.prescriptioncontext_id == ordersetid || p.prescriptioncontext_id == dischargeid || p.prescriptioncontext_id == opid || p.prescriptioncontext_id == moaid);
    if (filtered.length == 0) {
      cb();
    } else {
      let medcodes = [];
      let unprocessedCodes = [];
      filtered.forEach(p => {
        const m = p.__medications.find(x => x.isprimary && x.producttype != "custom");
        if (m) {
          const code = m.__codes.find(x => x.terminology == "formulary");
          if (code && !medcodes.includes(code.code)) {
            medcodes.push(code.code);
          }
        }
      });
      if (medcodes.length > 0) {
        // medcodes = []
        // medcodes.push("test");
        // medcodes.push("323739006");
        let exitcounter = 0;
        let splitrequests = this.appService.appConfig.AppSettings.SplitOnLoadRuleBoundReqs;
        const triggercount = this.appService.appConfig.AppSettings.SplitOnLoadRuleBoundReqsTrigger;
        const endpoint = this.appService.appConfig.uris.terminologybaseuri + "/Formulary/getformularybasicdetailruleboundbycodes";
        splitrequests = medcodes.length > triggercount ? splitrequests : 1;
        const perreq_count = Math.floor(medcodes.length / splitrequests);
        const lastreq_count = perreq_count + medcodes.length % splitrequests;
        for (let i = 0; i < splitrequests; i++) {
          const st = i == 0 ? 0 : i * perreq_count;
          const ed = i == splitrequests - 1 ? st + lastreq_count : st + perreq_count;
          this.subscriptions.add(this.apiRequest.postRequest(endpoint, medcodes.slice(st, ed), false).subscribe(response => {
            exitcounter++;
            if (response && response.length != 0) {
              filtered.forEach(p => {
                const primarymedication = p.__medications.find(x => x.isprimary);
                const dmd = primarymedication.__codes.find(x => x.terminology == "formulary");
                if (dmd && primarymedication.producttype != 'custom') {
                  const formulary = response.find(x => x.code == dmd.code);
                  if (formulary) {
                    p.__nursinginstructions = [];
                    p.__customWarning = [];
                    p.__drugcodes = [];
                    p.__drugindications = [];
                    if (formulary.detail.ignoreDuplicateWarnings) p.__ignoreDuplicateWarnings = formulary.detail.ignoreDuplicateWarnings;
                    if (formulary.detail.customWarnings) p.__customWarning = Object.assign(formulary.detail.customWarnings);else p.__customWarning = [];
                    if (formulary.detail.titrationTypes && formulary.detail.titrationTypes.length > 0) {
                      p.titrationtype = formulary.detail.titrationTypes[0].desc;
                      p.titrationtypecode = formulary.detail.titrationTypes[0].cd;
                    }
                    formulary.detail.endorsements.forEach(e => {
                      p.__nursinginstructions.push(new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.NursingInstruction(null, "Endorsement", e));
                    });
                    formulary.detail.medusaPreparationInstructions.forEach(e => {
                      p.__nursinginstructions.push(new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.NursingInstruction(null, "Medusa Instructions", e));
                    });
                    if (formulary.formularyAdditionalCodes) p.__drugcodes = Object.assign(formulary.formularyAdditionalCodes);else p.__drugcodes = null;
                    if (formulary.detail.licensedUses) formulary.detail.licensedUses.forEach(u => {
                      p.__drugindications.push(u);
                    });
                    if (formulary.detail.unLicensedUses) formulary.detail.unLicensedUses.forEach(u => {
                      p.__drugindications.push(u);
                    });
                  }
                }
              });
            }
            if (exitcounter == splitrequests) {
              filtered.filter(x => !x.__drugcodes).forEach(p => {
                const m = p.__medications.find(x => x.isprimary && x.producttype != "custom");
                if (m) {
                  const code = m.__codes.find(x => x.terminology == "formulary");
                  if (code) {
                    if (!unprocessedCodes.find(x => x.code == code.code)) {
                      unprocessedCodes.push({
                        "code": code.code,
                        "name": m.name,
                        "type": m.producttype
                      });
                    }
                  }
                }
              });
              if (unprocessedCodes.length != 0) {
                this.GetNewCodeForChangedDMDCodes(unprocessedCodes, filtered, cb);
              } else {
                cb();
              }
              // cb();
            }
          }, error => {
            exitcounter++;
            this.appService.logToConsole(error);
            console.log("Error loading formulary details by codes");
            if (exitcounter == splitrequests) {
              filtered.filter(x => !x.__drugcodes).forEach(p => {
                const m = p.__medications.find(x => x.isprimary && x.producttype != "custom");
                if (m) {
                  const code = m.__codes.find(x => x.terminology == "formulary");
                  if (code) {
                    if (!unprocessedCodes.find(x => x.code == code.code)) {
                      unprocessedCodes.push({
                        "code": code.code,
                        "name": m.name,
                        "type": m.producttype
                      });
                    }
                  }
                }
              });
              if (unprocessedCodes.length != 0) {
                this.GetNewCodeForChangedDMDCodes(unprocessedCodes, filtered, cb);
              } else {
                cb();
              }
              // cb();                               
            }
            // if (error.status == 404) //single medication, // or all medications  404
            // {
            //         cb();
            // }
          }));
        }
      } else {
        cb();
      }
    }
  }
  GetNewCodeForChangedDMDCodes(unprocessedCodes, filtered, callback) {
    let counter = 0;
    let newcodes = [];
    for (let i = 0; i < unprocessedCodes.length; i++) {
      //foreach unprocessed code search formulary 
      this.SearchFormulary(unprocessedCodes[i].name, unprocessedCodes[i].type, unprocessedCodes[i].code, (results, name, oldcode) => {
        counter++;
        if (results && results.data.length > 0) {
          let allmatches = results.data.filter(x => x.name === name && x.code != oldcode);
          // let mostrecentmatch = allmatches.length ? allmatches[allmatches.length - 1] : null;
          // if (mostrecentmatch)
          // {
          //     newcodes.push(mostrecentmatch.code);
          // }
          allmatches.forEach(m => {
            newcodes.push({
              "newcode": m.code,
              "oldcode": oldcode
            });
          });
        }
        if (counter == unprocessedCodes.length) {
          // console.log("newcodes");
          // console.log(newcodes);
          const endpoint = this.appService.appConfig.uris.terminologybaseuri + "/Formulary/getformularybasicdetailruleboundbycodes";
          this.subscriptions.add(this.apiRequest.postRequest(endpoint, newcodes.map(x => x.newcode), false).subscribe(response => {
            if (response && response.length != 0) {
              filtered.filter(x => !x.__drugcodes).forEach(p => {
                const primarymedication = p.__medications.find(x => x.isprimary);
                const dmd = primarymedication.__codes.find(x => x.terminology == "formulary");
                if (dmd && primarymedication.producttype != 'custom') {
                  //get first new code response for the old code //there should alwasy be one // code picks first one if there ever is more than one
                  const formulary = response.find(x => newcodes.filter(y => y.oldcode == dmd.code).map(n => n.newcode).includes(x.code));
                  if (formulary) {
                    p.__nursinginstructions = [];
                    p.__customWarning = [];
                    p.__drugcodes = [];
                    p.__drugindications = [];
                    if (formulary.detail.ignoreDuplicateWarnings) p.__ignoreDuplicateWarnings = formulary.detail.ignoreDuplicateWarnings;
                    if (formulary.detail.customWarnings) p.__customWarning = Object.assign(formulary.detail.customWarnings);else p.__customWarning = [];
                    if (formulary.detail.titrationTypes && formulary.detail.titrationTypes.length > 0) {
                      p.titrationtype = formulary.detail.titrationTypes[0].desc;
                      p.titrationtypecode = formulary.detail.titrationTypes[0].cd;
                    }
                    formulary.detail.endorsements.forEach(e => {
                      p.__nursinginstructions.push(new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.NursingInstruction(null, "Endorsement", e));
                    });
                    formulary.detail.medusaPreparationInstructions.forEach(e => {
                      p.__nursinginstructions.push(new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.NursingInstruction(null, "Medusa Instructions", e));
                    });
                    if (formulary.formularyAdditionalCodes) p.__drugcodes = Object.assign(formulary.formularyAdditionalCodes);
                    // else
                    //     p.__drugcodes = null;
                    p.__drugcodes.push({
                      "additionalCode": `${formulary.code}`,
                      "additionalCodeSystem": "dmd"
                    });
                    if (formulary.detail.licensedUses) formulary.detail.licensedUses.forEach(u => {
                      p.__drugindications.push(u);
                    });
                    if (formulary.detail.unLicensedUses) formulary.detail.unLicensedUses.forEach(u => {
                      p.__drugindications.push(u);
                    });
                  }
                }
              });
            }
            callback();
          }, error => {
            this.appService.logToConsole(error);
            console.log("Error loading formulary details by new codes");
            callback();
          }));
        }
      });
    }
  }
  SearchFormulary(searthTerm, producttype, code, cb) {
    var p = new SearchFormulary_PostData();
    p.searchTerm = searthTerm;
    if (p.searchTerm == "") {
      cb(null, searthTerm, code);
      return;
    }
    p.formularyStatusCd = [];
    p.formularyStatusCd.push("001");
    p.formularyStatusCd.push("002");
    p.productType = producttype;
    const postdata = JSON.stringify(p);
    if (postdata) {
      this.subscriptions.add(this.apiRequest.postRequest(this.appService.appConfig.uris.terminologybaseuri + "/Formulary/searchformularies?api-version=1.0", postdata).subscribe(response => {
        if (response && response.data && response.data.length != 0) {
          cb(response, searthTerm, code);
        } else {
          cb(null, searthTerm, code);
        }
      }, error => {
        this.appService.logToConsole(error);
        console.log("Error searching formulary details for new codes");
        cb(null, searthTerm, code);
      }));
    }
  }
  GetWitnesAuthentication(cb) {
    this.appService.administrationWitness = [];
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_administrationwitness&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(response => {
      let responseArray = JSON.parse(response);
      this.appService.administrationWitness = responseArray;
      cb();
    }));
  }
  GetPrescriptionEvent(cb) {
    this.appService.prescriptionEvent = [];
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_prescriptionevent&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(response => {
      let responseArray = JSON.parse(response);
      this.appService.prescriptionEvent = responseArray.sort((a, b) => moment__WEBPACK_IMPORTED_MODULE_3___default()(a.datetime) > moment__WEBPACK_IMPORTED_MODULE_3___default()(b.datetime) ? -1 : 0);
      cb();
    }));
  }
  GetMedicationSupply(cb) {
    this.appService.PrescriptionMedicaitonSupply = [];
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_prescriptionmedicaitonsupply&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(response => {
      this.appService.PrescriptionMedicaitonSupply = JSON.parse(response);
      cb();
    }));
  }
  GetMedicationSupplyHistory(id, cb) {
    this.appService.PatientDrugHistory = [];
    this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/GetBaseViewListByPost/epma_medicationsupplyhistory", this.createMedicationSupplyHistoryFilter(id)).subscribe(response => {
      let data = response;
      this.appService.PatientDrugHistory = data;
      cb(data);
    }));
  }
  createMedicationSupplyHistoryFilter(prescriptionid) {
    let condition = "prescriptionid = @prescriptionid";
    let f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition));
    let pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("prescriptionid", prescriptionid));
    let select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT *");
    let orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY _createddate desc");
    let body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    return JSON.stringify(body);
  }
  RefreshIfDataVersionChanged(cb) {
    if (!this.nextRefresh || moment__WEBPACK_IMPORTED_MODULE_3___default()().isAfter(this.nextRefresh)) {
      this.apiRequest.getRequest(`${this.appService.baseURI}/GetSynchronousPostVersion/?personId=${this.appService.personId}&moduleName=${this.appService.modulename}`).subscribe(version => {
        this.nextRefresh = moment__WEBPACK_IMPORTED_MODULE_3___default()().add(5, "seconds");
        if (version) {
          let versionobject = JSON.parse(version);
          let serverversion_versionid = versionobject.moduleDataVersion.versionid;
          let serverversion_userid = versionobject.createdby;
          if (this.appService.dataversion && this.appService.dataversion != serverversion_versionid) {
            cb(true);
            this.subjects.ShowRefreshPageMessage.next(serverversion_userid);
            return;
          } else {
            cb(false);
          }
        } else {
          cb(false);
        }
      });
    } else {
      cb(false);
    }
  }
  GetManageAwayPeriod(cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_personawayperiod&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(response => {
      let responseArray = JSON.parse(response);
      let data = responseArray.sort((a, b) => moment__WEBPACK_IMPORTED_MODULE_3___default()(a.modifiedon) > moment__WEBPACK_IMPORTED_MODULE_3___default()(b.modifiedon) ? -1 : 0);
      this.appService.PersonAwayPeriod = data;
      cb();
    }));
  }
  createAdministerMedHistoryFilter(administration) {
    let index = 0;
    const pm = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterParams();
    const condition = [];
    for (let d of administration) {
      let para = this.makeId(5);
      if (index === 0) condition.push("correlationid =@" + para);else condition.push(" or correlationid =@" + para);
      pm.filterparams.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filterparam("@" + para, d.correlationid));
      index = index + 1;
    }
    const f = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filters();
    f.filters.push(new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.filter(condition.join('')));
    const select = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.selectstatement("SELECT * ");
    const orderby = new src_app_models_filter_model__WEBPACK_IMPORTED_MODULE_1__.orderbystatement("ORDER BY 1");
    const body = [];
    body.push(f);
    body.push(pm);
    body.push(select);
    body.push(orderby);
    let jsonobj = JSON.stringify(body);
    return jsonobj;
  }
  SetUnits(code, cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetBaseViewListObjectByAttribute/epma_frequentvtmunit?&synapseattributename=code&attributevalue=" + code).subscribe(response => {
      let units;
      let responseArray = JSON.parse(response);
      if (responseArray && responseArray.doseunit) {
        units = responseArray.doseunit.toString().trim();
        cb(units);
      } else {
        this.getProductDetail(code, data => {
          if (data.formularyIngredients) {
            var ing = data.formularyIngredients;
            units = this.appService.GetMostFrequentElementInArray(ing.map(ig => ig.strengthValueNumeratorUnitDesc));
            cb(units);
          }
        });
      }
    }));
  }
  getProductDetail(code, cb) {
    var endpoint = this.appService.appConfig.uris.terminologybaseuri + "/Formulary/getformularydetailruleboundbycode";
    this.subscriptions.add(this.apiRequest.getRequest(`${endpoint}/${code}?api-version=1.0`).subscribe(response => {
      if (response) {
        cb(response);
      } else {
        cb({});
      }
    }));
  }
  GetAwayPeriodHistory(id, cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetObjectHistory?synapsenamespace=local&synapseentityname=epma_personawayperiod&id=" + id).subscribe(response => {
      cb(response);
    }));
  }
  GetNursingInstruction(cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_nursinginstructions&synapseattributename=encounter_id&attributevalue=" + this.appService.encounter.encounter_id).subscribe(nursing => {
      let responseArray = JSON.parse(nursing);
      this.appService.NursingInstructions = [];
      for (let r of responseArray) {
        this.appService.NursingInstructions.push(r);
      }
      cb();
    }));
  }
  GetNursingInstructionHistory(id, cb) {
    this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + "/GetObjectHistory?synapsenamespace=local&synapseentityname=epma_nursinginstructions&id=" + id).subscribe(history => {
      var historyData = JSON.parse(history).sort((a, b) => moment__WEBPACK_IMPORTED_MODULE_3___default()(a.modifiedon) > moment__WEBPACK_IMPORTED_MODULE_3___default()(b.modifiedon) ? -1 : 0);
      cb(historyData);
    }));
  }
  CopyPatientDrugsFromIPToDischarge(prescriptionBasket) {
    //copy patient drugs from moa to ip
    let modcontextid = this.appService.MetaPrescriptioncontext.find(x => x.context.toLowerCase() == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Discharge.toLowerCase()).prescriptioncontext_id;
    let ipcontextid = this.appService.MetaPrescriptioncontext.find(x => x.context.toLowerCase() == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionContext.Inpatient.toLowerCase()).prescriptioncontext_id;
    let stoppedid = this.appService.MetaPrescriptionstatus.find(x => x.status == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionStatus.stopped).prescriptionstatus_id;
    let cancelledid = this.appService.MetaPrescriptionstatus.find(x => x.status == _enum__WEBPACK_IMPORTED_MODULE_5__.PrescriptionStatus.cancelled).prescriptionstatus_id;
    let mods = this.appService.Prescription.filter(p => p.prescriptioncontext_id == modcontextid);
    let ips = this.appService.Prescription.filter(p => p.prescriptioncontext_id == ipcontextid && p.prescriptionstatus_id != stoppedid && p.prescriptionstatus_id != cancelledid);
    prescriptionBasket.forEach(p => {
      //if not editing
      if (!p.__editingprescription) {
        //and if there is only one mod for this dmd code
        let medcode = p.__medications.find(m => m.isprimary == true).__codes.find(c => c.terminology == "formulary").code;
        let p_mods = mods.filter(mp => mp.__medications.find(m => m.isprimary == true).__codes.find(c => c.terminology == "formulary").code == medcode);
        if (p_mods && p_mods.length == 1) {
          let p_ip = ips.filter(mp => mp.__medications.find(m => m.isprimary == true).__codes.find(c => c.terminology == "formulary").code == medcode);
          //and if this drug been prescribed only once
          if (p_ip && p_ip.length == 1) {
            //copy patient drugs over to discharge prescription
            // get current patient drugs for prescription
            this.subscriptions.add(this.apiRequest.getRequest(this.appService.baseURI + '/GetListByAttribute?synapsenamespace=local&synapseentityname=epma_prescriptionmedicaitonsupply&synapseattributename=prescriptionid' + '&attributevalue=' + p_ip[0].prescription_id).subscribe(response => {
              let responseArray = JSON.parse(response);
              if (responseArray.length != 0) {
                let patientDrugs = new _models_EPMA__WEBPACK_IMPORTED_MODULE_0__.PrescriptionMedicaitonSupply();
                patientDrugs.epma_prescriptionmedicaitonsupply_id = (0,uuid__WEBPACK_IMPORTED_MODULE_12__["default"])();
                patientDrugs.prescriptionid = p.prescription_id;
                patientDrugs.noofdays = responseArray[0].noofdays;
                ;
                patientDrugs.availablequantity = responseArray[0].availablequantity;
                patientDrugs.quantityunits = responseArray[0].quantityunits;
                patientDrugs.complianceaid = responseArray[0].complianceaid;
                patientDrugs.selectedproductcode = responseArray[0].selectedproductcode;
                patientDrugs.selectproductcodetype = responseArray[0].selectproductcodetype;
                patientDrugs.ownsupplyathome = responseArray[0].ownsupplyathome;
                patientDrugs.resupplyfrom = responseArray[0].resupplyfrom;
                patientDrugs.lastmodifiedby = responseArray[0].lastmodifiedby;
                patientDrugs.updatesouce = responseArray[0].updatesouce;
                patientDrugs.prescribedmedicationid = responseArray[0].prescribedmedicationid;
                patientDrugs.person_id = responseArray[0].person_id;
                patientDrugs.encounter_id = responseArray[0].encounter_id;
                patientDrugs.quantityentrydate = responseArray[0].quantityentrydate;
                patientDrugs.createdby = responseArray[0].createdby;
                patientDrugs.createdon = responseArray[0].createdon;
                patientDrugs.modifiedon = responseArray[0].modifiedon;
                //marked for syncpost
                this.subscriptions.add(this.apiRequest.postRequest(this.appService.baseURI + "/PostObject?synapsenamespace=local&synapseentityname=epma_prescriptionmedicaitonsupply", JSON.stringify(patientDrugs), false).subscribe(saveResponse => {
                  this.GetMedicationSupply(() => {});
                }));
              }
            }));
          }
        }
      }
    });
  }
  static #_ = this.ɵfac = function DataRequest_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || DataRequest)(_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵinject"](_apirequest_service__WEBPACK_IMPORTED_MODULE_7__.ApirequestService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵinject"](_app_service__WEBPACK_IMPORTED_MODULE_8__.AppService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵinject"](_subjects_service__WEBPACK_IMPORTED_MODULE_9__.SubjectsService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdefineInjectable"]({
    token: DataRequest,
    factory: DataRequest.ɵfac,
    providedIn: 'root'
  });
}
class SearchFormulary_PostData {}

/***/ }),

/***/ 6134:
/*!**********************************!*\
  !*** ./src/app/services/enum.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdministrationStatus: () => (/* binding */ AdministrationStatus),
/* harmony export */   AdministrationStatusReason: () => (/* binding */ AdministrationStatusReason),
/* harmony export */   AdministrationType: () => (/* binding */ AdministrationType),
/* harmony export */   ChangeInfusion: () => (/* binding */ ChangeInfusion),
/* harmony export */   ChosenDays: () => (/* binding */ ChosenDays),
/* harmony export */   Common: () => (/* binding */ Common),
/* harmony export */   DaysOfWeek: () => (/* binding */ DaysOfWeek),
/* harmony export */   DoseForm: () => (/* binding */ DoseForm),
/* harmony export */   DoseType: () => (/* binding */ DoseType),
/* harmony export */   FormContext: () => (/* binding */ FormContext),
/* harmony export */   FrequencyType: () => (/* binding */ FrequencyType),
/* harmony export */   InfusionType: () => (/* binding */ InfusionType),
/* harmony export */   IntervalType: () => (/* binding */ IntervalType),
/* harmony export */   LevelOfSelfAdmin: () => (/* binding */ LevelOfSelfAdmin),
/* harmony export */   OpDispensing: () => (/* binding */ OpDispensing),
/* harmony export */   OpPrescriptionCategory: () => (/* binding */ OpPrescriptionCategory),
/* harmony export */   OpPrescriptionType: () => (/* binding */ OpPrescriptionType),
/* harmony export */   PrescriptionContext: () => (/* binding */ PrescriptionContext),
/* harmony export */   PrescriptionDuration: () => (/* binding */ PrescriptionDuration),
/* harmony export */   PrescriptionStatus: () => (/* binding */ PrescriptionStatus),
/* harmony export */   ReconciliationListActions: () => (/* binding */ ReconciliationListActions),
/* harmony export */   RefWeightType: () => (/* binding */ RefWeightType),
/* harmony export */   RoleAction: () => (/* binding */ RoleAction),
/* harmony export */   SupplyRequestStatus: () => (/* binding */ SupplyRequestStatus),
/* harmony export */   contents: () => (/* binding */ contents),
/* harmony export */   modules: () => (/* binding */ modules),
/* harmony export */   popovers: () => (/* binding */ popovers),
/* harmony export */   title: () => (/* binding */ title)
/* harmony export */ });
var title;
(function (title) {
  title["Administer_PRN"] = "PRN";
  title["Administration_Completed_early"] = "Completed early";
  title["Administration_Completed_late"] = "Completed late";
  title["Administration_Defered"] = "Defered";
  title["Administration_Deferedinfusion"] = "Defered";
  title["Administration_Failed"] = "Failed";
  title["EnterInError"] = "Enter In Error";
  title["AdministrationInfution_Failed"] = "Failed";
  title["Due_Administration"] = "Due";
  title["Late_Administration"] = "Missed";
  title["Planned_Administration"] = "Planned";
  title["Administration_withheld_by_doctor"] = "Withheld by doctor";
  title["Administration_withheld_by_doctor_Infution"] = "Withheld by doctor";
  title["Completed_Administration"] = "Completed";
  title["Dose_Administered_Is_A_Different_Product_From_Prescribed"] = "Dose Administered Is A Different Product";
  title["Dose_Administered_Late_Is_A_Different_Product_From_Prescribed"] = "Dose Administered Late Is A Different Product From Prescribed";
  title["Dose_Administered_Early_Is_A_Different_Product_From_Prescribed"] = "Dose Administered Early Is A Different Product From Prescribed";
  title["Dose_administered_is_differnt_from_prescribed"] = "Dose administered is differnt from prescribed";
  title["Dose_administered_early_is_differnt_from_prescribed"] = "Dose administered early is differnt from prescribed";
  title["Dose_administered_late_is_differnt_from_prescribed"] = "Dose administered late is differnt from prescribed";
  title["Administration_requires_doctors_confirmation_Planned"] = "Planned: requires prescriber to confirm";
  title["Administration_requires_doctors_confirmation_Late"] = "Administration requires doctors confirmation Missed";
  title["Administration_requires_doctors_confirmation_Due"] = "Administration requires doctors confirmation Due";
  title["Infusionplanned"] = "Infusion planned";
  title["Infusiondue"] = "Infusion due";
  title["InfusionLate"] = "Infusion Missed";
  title["Infusioncompletionplanned"] = "Infusion completion planned";
  title["InfusionCompletiondue"] = "Infusion completion due";
  title["InfusionCompleteoverdue"] = "Infusion Complete overdue";
  title["durationline"] = "";
  title["PRNRange"] = "PRN";
  title["IncreaseInfusionRatePlanned"] = "Increase Infusion Rate Planned";
  title["IncreaseInfusionRateDue"] = "Increase Infusion Rate Due";
  title["IncreaseInfusionRateLate"] = "Increase Infusion Rate Missed";
  title["DecreaseInfusionRateLate"] = "Decrease Infusion Rate Missed";
  title["DecreaseInfusionRateDue"] = "Decrease Infusion Rate Due";
  title["DecreaseInfusionRatePlanned"] = "Decrease Infusion Rate Planned";
  title["BolusAdministrationCompleted"] = "Bolus Administration Completed";
  title["additionaladministration"] = "Additional Administration";
  title["Infusiondone"] = "Infusion done";
  title["InfusionCompletedEarly"] = "Infusion Completed Early";
  title["InfusionCompletedLate"] = "Infusion Completed Late";
  title["IncreaseInfusionRatedone"] = "Increase Infusion Rate done";
  title["IncreaseInfusionRatedonelate"] = "Increase Infusion Rate done late";
  title["IncreaseInfusionRatedoneearly"] = "Increase Infusion Rate done early";
  title["DecreaseInfusionRatedone"] = "Decrease Infusion Rate done";
  title["DecreaseInfusionRatedonelate"] = "Decrease Infusion Rate done late";
  title["DecreaseInfusionRatedoneearly"] = "Decrease Infusion Rate done early";
  title["InfusionCompleteddone"] = "Infusion Completed done";
  title["InfusionCompletedEarly2"] = "Infusion Completed Early";
  title["InfusionCompletedLate2"] = "Infusion Completed Late";
  title["AdjustedIncreaseInfusionRatedonelate"] = "Adjusted Increase Infusion Rate done late";
  title["AdjustedIncreaseInfusionRatedoneearly"] = "Adjusted Increase Infusion Rate done early";
  title["AdjustedDecreaseInfusionRatedone"] = "Adjusted Decrease Infusion Rate done";
  title["AdjustedDecreaseInfusionRatedonelate"] = "Adjusted Decrease Infusion Rate done late";
  title["AdjustedDecreaseInfusionRatedoneearly"] = "Adjusted Decrease Infusion Rate done early";
  title["AdjustedIncreaseInfusionRatedone"] = "Adjusted Increase Infusion Rate done";
  title["MaintainInfusionRatedoneearly"] = "Adjusted Increase Infusion Rate done";
  title["MaintainInfusionRatedonelate"] = "Maintain Infusion Rate done late";
  title["AdjustedsameInfusionRatedone"] = "Adjusted same Infusion Rate done";
  title["FaliedtoAdjustInfusionRatedonelate"] = "Falied to Adjust Infusion Rate done late";
  title["FaliedtoAdjustInfusionRatedoneearly"] = "Falied to Adjust Infusion Rate done early'></div>";
  title["InfusionRatePaused"] = "Paused";
  title["ContinuousInfusionSetChanged"] = "Set Changed";
  title["Continuousinfusionsyringeorbagchange"] = "syringe or bag change";
  title["Maintain_Infusion_Rate_done"] = "Maintain Infusion Rate done";
  title["Adjusted_Decrease_Infusion_Rate_Done_Kit_Change"] = "Decrease Infusion Rate and Kit Change";
  title["Adjusted_Increase_Infusion_Rate_Done_Kit_Change"] = "Increase Infusion Rate and Kit Change";
  title["Adjusted_Maintain_Infusion_Rate_Done_Kit_Change"] = "Maintain Infusion Rate and Kit Change";
  title["Maintain_Infusion_Rate_Late"] = "Maintain Infusion Rate Missed";
  title["Maintain_Infusion_Rate_Planned"] = "Maintain Infusion Rate Planned";
  title["Maintain_Infusion_Rate_Due"] = "Maintain Infusion Rate Due";
  title["Cancelled"] = "Cancelled";
  title["Recordadditionaladministration"] = "Record Additional Administration";
  title["resupply"] = "Resupply";
  title["ComplianceAid"] = "Compliance Aid";
  title["Highalertmedication"] = "High alert medication";
  title["NursingInstruction"] = "Nursing Instruction";
  title["pharmacyreview"] = "Pharmacy Review";
  title["critialdrug"] = "Critial Drug";
  title["nonformularymedication"] = "NoN Formulary Medication";
  title["clinicaltrialmedicine"] = "Clinical Trial Medicine";
  title["expensivemedication"] = "Expensive Medication";
  title["highalertmedication"] = "Highalert Medication";
  title["unlicencedmedicine"] = "Unlicenced Medicine";
})(title || (title = {}));
var contents;
(function (contents) {
  contents["Administer_PRN"] = "<div  class='Administer_PRN'></div>";
  contents["Administration_Completed_early"] = "<div class='Administration_Completed_early'></div>";
  contents["Administration_Completed_late"] = "<div class='Administration_Completed_late'></div>";
  contents["Administration_Defered"] = "<div class='Administration_Defered'></div>";
  contents["Administration_Deferedinfusion"] = "<div class='Administration_Deferedinfusion'></div>";
  contents["Administration_Failed"] = "<div class='Administration_Failed'></div>";
  contents["AdministrationInfution_Failed"] = "<div class='AdministrationInfution_Failed'></div>";
  contents["Due_Administration"] = "<div class='Due_Administration'></div>";
  contents["Late_Administration"] = "<div class='Late_Administration'></div>";
  contents["Planned_Administration"] = "<div class='Planned_Administration'></div>";
  contents["Administration_withheld_by_doctor"] = "<div class='Administration_withheld_by_doctor'></div>";
  contents["Administration_withheld_by_doctor_Infution"] = "<div class='Administration_withheld_by_doctor_Infution'></div>";
  contents["Dose_Administered_Early_Is_A_Different_Product_From_Prescribed"] = "<div class='Dose_Administered_Early_Is_A_Different_Product_From_Prescribed'></div>";
  contents["Dose_Administered_Is_A_Different_Product_From_Prescribed"] = "<div class='Dose_Administered_Is_A_Different_Product_From_Prescribed'></div>";
  contents["Dose_Administered_Late_Is_A_Different_Product_From_Prescribed"] = "<div class='Dose_Administered_Late_Is_A_Different_Product_From_Prescribed'></div>";
  contents["Completed_Administration"] = "<div class='Completed_Administration'></div>";
  contents["Dose_administered_is_differnt_from_prescribed"] = "<div class='Dose_administered_is_differnt_from_prescribed'></div>";
  contents["Dose_administered_early_is_differnt_from_prescribed"] = "<div class='Dose_administered_early_is_differnt_from_prescribed'></div>";
  contents["Dose_administered_late_is_differnt_from_prescribed"] = "<div class='Dose_administered_late_is_differnt_from_prescribed'></div>";
  contents["Administration_requires_doctors_confirmation_Planned"] = "<div class='Administration_requires_doctors_confirmation_Planned'></div>";
  contents["Administration_requires_doctors_confirmation_Late"] = "<div class='Administration_requires_doctors_confirmation_Late'></div>";
  contents["Administration_requires_doctors_confirmation_Due"] = "<div class='Administration_requires_doctors_confirmation_Due'></div>";
  contents["Infusionplanned"] = "<div class='Infusionplanned'></div>";
  contents["Infusiondue"] = "<div class='Infusiondue'></div>";
  contents["InfusionLate"] = "<div class='InfusionLate'></div>";
  contents["Infusioncompletionplanned"] = "<div class='Infusioncompletionplanned'></div>";
  contents["InfusionCompletiondue"] = "<div class='InfusionCompletiondue'></div>";
  contents["InfusionCompleteoverdue"] = "<div class='InfusionCompleteoverdue'></div>";
  contents["durationline"] = "<div></div>";
  contents["PRNRange"] = "<div class='PRNRange'></div>";
  contents["ReminderAcknowledged"] = "<div class='ReminderAcknowledged'></div>";
  contents["Reminder"] = "<div class='Reminder'></div>";
  contents["Reminderdue"] = "<div class='Reminderdue'></div>";
  contents["Reminderoverdue"] = "<div class='Reminderoverdue'></div>";
  contents["Multiple_Reminders"] = "<div class='Multiple_Reminders'></div>";
  contents["IncreaseInfusionRatePlanned"] = "<div class='IncreaseInfusionRatePlanned'></div>";
  contents["IncreaseInfusionRateDue"] = "<div class='IncreaseInfusionRateDue'></div>";
  contents["IncreaseInfusionRateLate"] = "<div class='IncreaseInfusionRateLate'></div>";
  contents["DecreaseInfusionRateLate"] = "<div class='DecreaseInfusionRateLate'></div>";
  contents["DecreaseInfusionRateDue"] = "<div class='DecreaseInfusionRateDue'></div>";
  contents["DecreaseInfusionRatePlanned"] = "<div class='DecreaseInfusionRatePlanned'></div>";
  contents["BolusAdministrationCompleted"] = "<div class='BolusAdministrationCompleted'></div>";
  contents["additionaladministration"] = "<div class='additionaladministration'></div>";
  contents["Multiple_Reminders_With_The_Date"] = "<div class='Multiple_Reminders_With_The_Date'></div>";
  contents["Multiple_Reminders_One_Day_Has_Passed"] = "<div class='Multiple_Reminders_One_Day_Has_Passed'></div>";
  contents["Multiple_Reminders_Has_Been_Acknowledged"] = "<div class='Multiple_Reminders_Has_Been_Acknowledged'></div>";
  contents["Infusiondone"] = "<div class='Infusiondone'></div>";
  contents["EnterInError"] = "<div class='EnterInError'></div>";
  contents["EnterInErrorbolus"] = "<div class='EnterInErrorbolus'></div>";
  contents["InfusionCompletedEarly"] = "<div class='InfusionCompletedEarly'></div>";
  contents["InfusionCompletedLate"] = "<div class='InfusionCompletedLate'></div>";
  contents["IncreaseInfusionRatedone"] = "<div class='IncreaseInfusionRatedone'></div>";
  contents["IncreaseInfusionRatedonelate"] = "<div class='IncreaseInfusionRatedonelate'></div>";
  contents["IncreaseInfusionRatedoneearly"] = "<div class='IncreaseInfusionRatedoneearly'></div>";
  contents["DecreaseInfusionRatedone"] = "<div class='DecreaseInfusionRatedone'></div>";
  contents["DecreaseInfusionRatedonelate"] = "<div class='DecreaseInfusionRatedonelate'></div>";
  contents["DecreaseInfusionRatedoneearly"] = "<div class='DecreaseInfusionRatedoneearly'></div>";
  contents["InfusionCompleteddone"] = "<div class='InfusionCompleteddone'></div>";
  contents["InfusionCompletedEarly2"] = "<div class='InfusionCompletedEarly2'></div>";
  contents["InfusionCompletedLate2"] = "<div class='InfusionCompletedLate2'></div>";
  contents["AdjustedIncreaseInfusionRatedonelate"] = "<div class='AdjustedIncreaseInfusionRatedonelate'></div>";
  contents["AdjustedIncreaseInfusionRatedoneearly"] = "<div class='AdjustedIncreaseInfusionRatedoneearly'></div>";
  contents["AdjustedDecreaseInfusionRatedone"] = "<div class='AdjustedDecreaseInfusionRatedone'></div>";
  contents["AdjustedDecreaseInfusionRatedonelate"] = "<div class='AdjustedDecreaseInfusionRatedonelate'></div>";
  contents["AdjustedDecreaseInfusionRatedoneearly"] = "<div class='AdjustedDecreaseInfusionRatedoneearly'></div>";
  contents["AdjustedIncreaseInfusionRatedone"] = "<div class='AdjustedIncreaseInfusionRatedone'></div>";
  contents["MaintainInfusionRatedoneearly"] = "<div class='AdjustedIncreaseInfusionRatedone'></div>";
  contents["MaintainInfusionRatedonelate"] = "<div class='MaintainInfusionRatedonelate'></div>";
  contents["AdjustedsameInfusionRatedone"] = "<div class='AdjustedsameInfusionRatedone'></div>";
  contents["FaliedtoAdjustInfusionRatedonelate"] = "<div class='FaliedtoAdjustInfusionRatedonelate'></div>";
  contents["FaliedtoAdjustInfusionRatedoneearly"] = "<div class='FaliedtoAdjustInfusionRatedoneearly'></div>";
  contents["InfusionRatePaused"] = "<div class='InfusionRatePaused'></div>";
  contents["ContinuousInfusionSetChanged"] = "<div class='ContinuousInfusionSetChanged'></div>";
  contents["Continuousinfusionsyringeorbagchange"] = "<div class='Continuousinfusionsyringeorbagchange'></div>";
  contents["Maintain_Infusion_Rate_done"] = "<div class='Maintain_Infusion_Rate_done'></div>";
  contents["Maintain_Infusion_Rate_Late"] = "<div class='Maintain_Infusion_Rate_Late'></div>";
  contents["Maintain_Infusion_Rate_Planned"] = "<div class='Maintain_Infusion_Rate_Planned'></div>";
  contents["Maintain_Infusion_Rate_Due"] = "<div class='Maintain_Infusion_Rate_Due'></div>";
  contents["Cancelled"] = "<div title='Cancelled' class='Cancelled'></div>";
  contents["Recordadditionaladministration"] = "<div  class='Recordadditionaladministration'></div>";
  contents["Adjusted_Maintain_Infusion_Rate_Done_Kit_Change"] = "<div class='Adjusted_Maintain_Infusion_Rate_Done_Kit_Change'></div>";
  contents["Adjusted_Increase_Infusion_Rate_Done_Kit_Change"] = "<div class='Adjusted_Increase_Infusion_Rate_Done_Kit_Change'></div>";
  contents["Adjusted_Decrease_Infusion_Rate_Done_Kit_Change"] = "<div class='Adjusted_Decrease_Infusion_Rate_Done_Kit_Change'></div>";
})(contents || (contents = {}));
var OpPrescriptionType;
(function (OpPrescriptionType) {
  OpPrescriptionType["NHS"] = "NHS";
  OpPrescriptionType["Private"] = "Private";
})(OpPrescriptionType || (OpPrescriptionType = {}));
var OpPrescriptionCategory;
(function (OpPrescriptionCategory) {
  OpPrescriptionCategory["Outpatient"] = "Outpatient";
  OpPrescriptionCategory["Homecare"] = "Homecare";
  OpPrescriptionCategory["Clinicaltrial"] = "Clinical trial";
})(OpPrescriptionCategory || (OpPrescriptionCategory = {}));
var OpDispensing;
(function (OpDispensing) {
  OpDispensing["Radiology"] = "Radiology";
  OpDispensing["OutpatientStanmore"] = "Outpatient Stanmore";
  OpDispensing["Outpatient Bolsover"] = "Outpatient Bolsover";
  OpDispensing["OPAT"] = "OPAT";
  OpDispensing["POA"] = "POA";
  OpDispensing["Orthotics"] = "Orthotics";
  OpDispensing["PhilipNewmanWard"] = "Philip Newman Ward";
  OpDispensing["Patient/Relative/StaffCollecting"] = "Patient/Relative/Staff Collecting";
})(OpDispensing || (OpDispensing = {}));
var DoseType;
(function (DoseType) {
  DoseType["units"] = "units";
  DoseType["strength"] = "strength";
  DoseType["descriptive"] = "descriptive";
})(DoseType || (DoseType = {}));
var FrequencyType;
(function (FrequencyType) {
  FrequencyType["stat"] = "stat";
  FrequencyType["mor"] = "mor";
  FrequencyType["mid"] = "mid";
  FrequencyType["eve"] = "eve";
  FrequencyType["night"] = "night";
  FrequencyType["x"] = "x";
  FrequencyType["h"] = "h";
})(FrequencyType || (FrequencyType = {}));
var IntervalType;
(function (IntervalType) {
  IntervalType["standard"] = "standard";
  IntervalType["variable"] = "variable";
  IntervalType["protocol"] = "protocol";
})(IntervalType || (IntervalType = {}));
var InfusionType;
(function (InfusionType) {
  InfusionType["ci"] = "ci";
  InfusionType["bolus"] = "bolus";
  InfusionType["rate"] = "rate";
  InfusionType["pca"] = "pca";
})(InfusionType || (InfusionType = {}));
var DoseForm;
(function (DoseForm) {
  DoseForm["Discrete"] = "1";
  DoseForm["Continuous"] = "2";
  DoseForm["NA"] = "3";
})(DoseForm || (DoseForm = {}));
var PrescriptionDuration;
(function (PrescriptionDuration) {
  PrescriptionDuration["hours"] = "hours";
  PrescriptionDuration["days"] = "days";
  PrescriptionDuration["weeks"] = "weeks";
  PrescriptionDuration["months"] = "months";
  PrescriptionDuration["untilcancelled"] = "until cancelled";
  PrescriptionDuration["enddate"] = "end date";
})(PrescriptionDuration || (PrescriptionDuration = {}));
var DaysOfWeek;
(function (DaysOfWeek) {
  DaysOfWeek["mon"] = "Monday";
  DaysOfWeek["tue"] = "Tuesday";
  DaysOfWeek["wed"] = "Wednesday";
  DaysOfWeek["thu"] = "Thursday";
  DaysOfWeek["fri"] = "Friday";
  DaysOfWeek["sat"] = "Saturday";
  DaysOfWeek["sun"] = "Sunday";
})(DaysOfWeek || (DaysOfWeek = {}));
var ChosenDays;
(function (ChosenDays) {
  ChosenDays["all"] = "all";
  ChosenDays["chosen"] = "chosen";
  ChosenDays["skip"] = "skip";
})(ChosenDays || (ChosenDays = {}));
var FormContext;
(function (FormContext) {
  FormContext["moa"] = "moa";
  FormContext["mod"] = "mod";
  FormContext["ip"] = "ip";
  FormContext["op"] = "op";
})(FormContext || (FormContext = {}));
var PrescriptionContext;
(function (PrescriptionContext) {
  PrescriptionContext["Inpatient"] = "Inpatient";
  PrescriptionContext["Outpatient"] = "Outpatient";
  PrescriptionContext["Orderset"] = "Orderset";
  PrescriptionContext["Admission"] = "Admission";
  PrescriptionContext["Discharge"] = "Discharge";
})(PrescriptionContext || (PrescriptionContext = {}));
var ReconciliationListActions;
(function (ReconciliationListActions) {
  ReconciliationListActions["start"] = "start";
  ReconciliationListActions["edit"] = "edit";
  ReconciliationListActions["complete"] = "complete";
  ReconciliationListActions["notes"] = "notes";
  ReconciliationListActions["resetcompletestatus"] = "resetcompletestatus";
})(ReconciliationListActions || (ReconciliationListActions = {}));
var modules;
(function (modules) {
  modules["app-drug-chart"] = "app-drug-chart";
  modules["app-therapy-overview"] = "app-therapy-overview";
  modules["app-inpatient-prescribing"] = "app-inpatient-prescribing";
  modules["app-reconciliation-lists"] = "app-reconciliation-lists";
  modules["app-inpatient-prescribing-edit"] = "app-inpatient-prescribing-edit";
  modules["app-oplist"] = "app-oplist";
})(modules || (modules = {}));
var popovers;
(function (popovers) {
  popovers["app-additional-administration"] = "app-additional-administration";
  popovers["app-add-bolus"] = "app-add-bolus";
  popovers["app-adjust-infusion"] = "app-adjust-infusion";
  popovers["app-change-infusion"] = "app-change-infusion";
  popovers["app-pause-infusion"] = "app-pause-infusion";
  popovers["app-restart-infusion"] = "app-restart-infusion";
  popovers["app-comments"] = "app-comments";
  popovers["app-nursing-instruction"] = "app-nursing-instruction";
  popovers["app-view-reminder"] = "app-view-reminder";
  popovers["app-record-patientdrug"] = "app-record-patientdrug";
  popovers["app-pharmacy-review"] = "app-pharmacy-review";
  popovers["app-supply-request"] = "app-supply-request";
  popovers["app-titration-chart"] = "app-titration-chart";
  popovers["app-end-infusion"] = "app-end-infusion";
  popovers["app-away-period"] = "app-away-period";
  popovers["app-prescription-history"] = "app-prescription-history";
  popovers["none"] = "";
})(popovers || (popovers = {}));
var AdministrationStatus;
(function (AdministrationStatus) {
  AdministrationStatus["given"] = "given";
  AdministrationStatus["defer"] = "defer";
  AdministrationStatus["selfadminister"] = "self-administer";
  AdministrationStatus["notgiven"] = "notgiven";
})(AdministrationStatus || (AdministrationStatus = {}));
var AdministrationStatusReason;
(function (AdministrationStatusReason) {
  AdministrationStatusReason["Patientunavailable"] = "Patient unavailable";
  AdministrationStatusReason["Nilbymouth"] = "Nil by mouth";
  AdministrationStatusReason["Patientrefused"] = "Patient refused";
  AdministrationStatusReason["Drugunavailable"] = "Drug unavailable";
  AdministrationStatusReason["Clinicalreason"] = "Clinical reason";
  AdministrationStatusReason["Other"] = "Other";
})(AdministrationStatusReason || (AdministrationStatusReason = {}));
var LevelOfSelfAdmin;
(function (LevelOfSelfAdmin) {
  LevelOfSelfAdmin["notwitnessedbynurse"] = "Not witnessed by nurse";
  LevelOfSelfAdmin["witnessedbynurse"] = "Witnessed by nurse";
})(LevelOfSelfAdmin || (LevelOfSelfAdmin = {}));
var AdministrationType;
(function (AdministrationType) {
  AdministrationType["record"] = "record";
  AdministrationType["schedule"] = "schedule";
})(AdministrationType || (AdministrationType = {}));
var ChangeInfusion;
(function (ChangeInfusion) {
  ChangeInfusion["changeinfusion"] = "changeinfusionset";
  ChangeInfusion["changeinfusionkit"] = "changeinfusionkit";
})(ChangeInfusion || (ChangeInfusion = {}));
var PrescriptionStatus;
(function (PrescriptionStatus) {
  PrescriptionStatus["active"] = "active";
  PrescriptionStatus["modified"] = "modified";
  PrescriptionStatus["suspended"] = "suspended";
  PrescriptionStatus["restarted"] = "restarted";
  PrescriptionStatus["stopped"] = "stopped";
  PrescriptionStatus["cancelled"] = "cancelled";
})(PrescriptionStatus || (PrescriptionStatus = {}));
var SupplyRequestStatus;
(function (SupplyRequestStatus) {
  SupplyRequestStatus["Incomplete"] = "Incomplete";
  SupplyRequestStatus["Pending"] = "Pending";
  SupplyRequestStatus["Approved"] = "Approved";
  SupplyRequestStatus["Rejected"] = "Rejected";
  SupplyRequestStatus["Fulfilled"] = "Dispensed";
  SupplyRequestStatus["OutpatientApproved"] = "Screened";
  SupplyRequestStatus["OutpatientChecked"] = "Checked";
})(SupplyRequestStatus || (SupplyRequestStatus = {}));
var RoleAction;
(function (RoleAction) {
  RoleAction["epma_access_inpatientprescribing"] = "epma_access_inpatientprescribing";
  RoleAction["epma_prescribe_new_ip"] = "epma_prescribe_new_ip";
  RoleAction["epma_access_amendprescription"] = "epma_access_amendprescription";
  RoleAction["epma_copy_ip"] = "epma_copy_ip";
  RoleAction["epma_edit_ip"] = "epma_edit_ip";
  RoleAction["epma_start_mod/epma_edit_mod"] = "epma_start_mod/epma_edit_mod";
  RoleAction["epma_schedule_additionaladministration"] = "epma_schedule_additionaladministration";
  RoleAction["epma_transfer_administrationevent"] = "epma_transfer_administrationevent";
  RoleAction["epma_view_ordersetlists"] = "epma_view_ordersetlists";
  RoleAction["epma_cancel_plannedevent"] = "epma_cancel_plannedevent";
  RoleAction["epma_add_pharmacyreviewcomments_ip"] = "epma_add_pharmacyreviewcomments_ip";
  RoleAction["epma_change_pharmacyreviewstatus"] = "epma_change_pharmacyreviewstatus";
  RoleAction["epma_access_patientdrugs_moa"] = "epma_access_patientdrugs_moa";
  RoleAction["epma_access_patientdrugs_ip"] = "epma_access_patientdrugs_ip";
  RoleAction["epma_access_supplyrequest_ip"] = "epma_access_supplyrequest_ip";
  RoleAction["epma_access_supplyrequest_mod"] = "epma_access_supplyrequest_mod";
  RoleAction["epma_create_supplyrequest_fromadministration"] = "epma_create_supplyrequest_fromadministration";
  RoleAction["epma_approve_formulary_supplyequest"] = "epma_approve_formulary_supplyequest";
  RoleAction["epma_reject_formulary_supplyequest"] = "epma_reject_formulary_supplyequest";
  RoleAction["epma_fulfil_formulary_supplyrequest"] = "epma_fulfil_formulary_supplyrequest";
  RoleAction["epma_approve_nonformulary_supplyequest"] = "epma_approve_nonformulary_supplyequest";
  RoleAction["epma_reject_nonformulary_supplyequest"] = "epma_reject_nonformulary_supplyequest";
  RoleAction["epma_fulfil_nonformulary_supplyrequest"] = "epma_fulfil_nonformulary_supplyrequest";
  RoleAction["epma_edit_moa/epma_start_moa"] = "epma_edit_moa/epma_start_moa";
  RoleAction["epma_complete_moa"] = "epma_complete_moa";
  RoleAction["epma_complete_mod"] = "epma_complete_mod";
  RoleAction["epma_edit_modnotes"] = "epma_edit_modnotes";
  RoleAction["epma_record_additionaladministration"] = "epma_record_additionaladministration";
  RoleAction["epma_add_doctorscomments"] = "epma_add_doctorscomments";
  RoleAction["epma_skip_witnessauthentication"] = "epma_skip_witnessauthentication";
  RoleAction["epma_mandate_witnessauthentication"] = "epma_mandate_witnessauthentication";
  RoleAction["epma_confirm_doctorsorder"] = "epma_confirm_doctorsorder";
  RoleAction["epma_create_org_orderset"] = "epma_create_org_orderset";
  RoleAction["epma_edit_org_orderset"] = "epma_edit_org_orderset";
  RoleAction["epma_delete_org_orderset"] = "epma_delete_org_orderset";
  RoleAction["epma_override_warning"] = "epma_override_warning";
  RoleAction["epma_canwitnessauth"] = "epma_canwitnessauth";
  RoleAction["epma_administer_administrationevent"] = "epma_administer_administrationevent";
  RoleAction["epma_reconciliation_pharmacist"] = "epma_reconciliation_pharmacist";
  RoleAction["epma_reconciliation_pharmacytech"] = "epma_reconciliation_pharmacytech";
  RoleAction["epma_display_dose_as_quantity"] = "epma_display_dose_as_quantity";
})(RoleAction || (RoleAction = {}));
var RefWeightType;
(function (RefWeightType) {
  RefWeightType["estimated"] = "estimated";
  RefWeightType["actual"] = "actual";
})(RefWeightType || (RefWeightType = {}));
var Common;
(function (Common) {
  Common["op_encounter_placeholder"] = "op_encounter_placeholder";
})(Common || (Common = {}));

/***/ }),

/***/ 4102:
/*!********************************************!*\
  !*** ./src/app/services/helper.service.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HelperService: () => (/* binding */ HelperService)
/* harmony export */ });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enum */ 6134);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var _app_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app.service */ 529);
/* harmony import */ var _components_drug_chart_timer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/drug-chart/timer-helper */ 5255);





class HelperService {
  constructor(appService, timeerHelper) {
    this.appService = appService;
    this.timeerHelper = timeerHelper;
    this.marRecords = [];
    this.prescriptionDictionary = {};
  }
  getDosesPrescriptions(prescriptions) {
    prescriptions.forEach(pres => {
      this.marRecords = [];
      const doses = this.appService.GetCurrentPosology(pres).__dose;
      // this.addAdditionalDoses(doses);
      const frequency = this.appService.GetCurrentPosology(pres).frequency;
      let showDoses = this.createDosesForTemplate(pres);
      let protocolDays;
      if (frequency === 'protocol') {
        protocolDays = showDoses.length;
      }
      if (!(showDoses instanceof Object)) {
        if (pres.__routes.length > 0) {
          showDoses = showDoses + ' - ' + pres.__routes[0].route;
        }
      }
      this.marRecords.forEach(obj => {
        let endDate = this.appService.GetCurrentPosology(pres).prescriptionenddate ? this.appService.GetCurrentPosology(pres).prescriptionenddate.split('T')[0] : null;
        obj.endDate = endDate ? this.changeDateFormat(endDate) : null;
        if (obj.frequency === 'protocol' || obj.ciDose) {
          if (protocolDays == 2) {
            obj.protocolCount = this.protocolCount;
          } else {
            obj.protocolCount = this.protocolCount + 1;
          }
          obj.protocolDays = protocolDays;
        }
      });
      pres['showDoses'] = showDoses;
      this.addMarObjectToPrescriptionId(pres.prescription_id);
    });
  }
  addAdditionalDoses(doses) {
    doses.forEach((dose, i) => {
      let date = dose.dosestartdatetime.split('T')[0];
      let time = dose.dosestartdatetime.split('T')[1].slice(0, 5);
      const doseEvent = this.appService.DoseEvents.filter(doseEvent => {
        let [startDate, startTime] = doseEvent.startdatetime.split('T');
        startTime = startTime.slice(0, 5);
        return doseEvent.dose_id === dose.dose_id && startDate === date && startTime === time;
      });
      if (doseEvent.length) {
        dose.dosestartdatetime = doseEvent[0].startdatetime;
      }
    });
  }
  addMarObjectToPrescriptionId(presId) {
    this.prescriptionDictionary[presId] = JSON.parse(JSON.stringify(this.marRecords));
  }
  changeDateFormat(s) {
    return s.split("").reverse().join("").replace('-', '/');
  }
  createDosesForTemplate(prescriptions) {
    let doseToShow = '';
    let posology = this.appService.GetCurrentPosology(prescriptions);
    if (posology.frequency == 'variable' && posology.infusiontypeid !== 'ci' && posology.infusiontypeid !== 'pca') {
      // check dose type for strength unit ......
      posology.__dose.forEach(dose => {
        let date = dose.dosestartdatetime.split('T')[0];
        let time = dose.dosestartdatetime.split('T')[1].slice(0, 5);
        let changeTimeFormat = time.split(':');
        if (dose.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.descriptive) {
          let x = time + ' - ' + dose.descriptivedose + ',';
          doseToShow = doseToShow + ' ' + x;
        } else if (dose.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.strength) {
          let x = dose.dosestartdatetime.split('T')[1].slice(0, 5) + ' - ' + dose.dosesize + ' ' + dose.strengthdenominatorunit + ',';
          doseToShow = doseToShow + ' ' + x;
        } else {
          let x = dose.dosestartdatetime.split('T')[1].slice(0, 5) + ' - ' + dose.dosesize + ' ' + dose.doseunit + ',';
          doseToShow = doseToShow + ' ' + x;
        }
        this.marRecords.push({
          time,
          descriptiveDose: dose.descriptivedose,
          doseType: dose.dosetype,
          frequency: posology.frequency,
          dose: dose.dosesize,
          doseunit: dose.strengthdenominatorunit || dose.doseunit,
          ciDose: dose.infusionrate + ' ' + dose.strengthdenominatorunit,
          doseId: dose.dose_id,
          logicalId: moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).format('YYYYMMDD') + changeTimeFormat[0] + changeTimeFormat[1] + "_" + dose.dose_id.toString()
        });
      });
    } else if (posology.frequency == 'protocol' || posology.infusiontypeid === 'ci' || posology.infusiontypeid === 'pca') {
      let currDoses = [];
      let currDose = '';
      let currDate = '';
      let count = 0;
      posology.__dose.forEach((dose, index) => {
        let dateTime = dose.dosestartdatetime.split('T');
        let date = dateTime[0];
        let time = dateTime[1].slice(0, 5);
        let changeTimeFormat = time.split(':');
        let doseDescription;
        if (dose.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.descriptive) {
          doseDescription = dose.descriptivedose;
        } else if (dose.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.strength) {
          doseDescription = dose.dosesize + ' ' + dose.strengthdenominatorunit;
        } else {
          doseDescription = dose.dosesize + ' ' + dose.doseunit;
        }
        if (currDate !== date && index) {
          currDoses.push(currDose);
          currDate = date;
          currDose = ' ' + time + ' - ' + doseDescription + ',';
          this.protocolCount = count;
          count = 0;
        } else if (currDate !== date && !index) {
          currDate = date;
          currDose += ' ' + time + ' - ' + doseDescription + ',';
          count += 1;
        } else {
          currDose += ' ' + time + ' - ' + doseDescription + ',';
          count += 1;
        }
        this.marRecords.push({
          time,
          descriptiveDose: dose.descriptivedose,
          doseType: dose.dosetype,
          frequency: posology.frequency,
          dose: dose.dosesize,
          doseunit: dose.strengthdenominatorunit || dose.doseunit,
          ciDose: posology.infusiontypeid === 'ci' || posology.infusiontypeid === 'pca' ? dose.infusionrate + ' ' + posology.infusionrateunits : '',
          ciDate: date,
          doseId: dose.dose_id,
          logicalId: 'start_' + moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).format('YYYYMMDD') + changeTimeFormat[0] + changeTimeFormat[1] + "_" + dose.dose_id.toString()
        });
      });
      currDoses.push(currDose);
      let presAdditionalCondition = '';
      let additional_condition = this.appService.MetaPrescriptionadditionalcondition.find(x => x.prescriptionadditionalconditions_id == prescriptions.prescriptionadditionalconditions_id);
      if (additional_condition) {
        presAdditionalCondition = additional_condition.additionalcondition;
      } else {
        presAdditionalCondition = " ";
      }
      currDoses[currDoses.length - 1] = currDoses[currDoses.length - 1] + (presAdditionalCondition != ' ' ? ' - ' : ' ') + presAdditionalCondition + ' - ' + (prescriptions.__routes.length > 0 ? prescriptions.__routes[0].route : '');
      return currDoses;
    } else if (posology.infusiontypeid == "rate") {
      const activeStartDate = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(-1, 'd');
      activeStartDate.set({
        'hour': 23,
        'minute': 59,
        'second': 59
      });
      const dateTo = moment__WEBPACK_IMPORTED_MODULE_0___default()().add(3, 'd');
      dateTo.set({
        'hour': 23,
        'minute': 59,
        'second': 59
      });
      this.timeerHelper.createEvents(activeStartDate, dateTo, true);
      this.appService.reportData = this.appService.reportData.filter(function (element) {
        return element !== undefined;
      });
      var todayDate = moment__WEBPACK_IMPORTED_MODULE_0___default()();
      todayDate.set({
        'hour': 0,
        'minute': 0,
        'second': 0
      });
      const next5DayIntermittedData = this.appService.reportData.filter(e => {
        return !e.dose_id.includes("dur") && !e.dose_id.includes("pause") && !e.dose_id.includes("flowrate") && !e.dose_id.includes("infusionevent") && moment__WEBPACK_IMPORTED_MODULE_0___default()(e.eventStart).isBetween(moment__WEBPACK_IMPORTED_MODULE_0___default()(activeStartDate), dateTo) && prescriptions.prescription_id == e.prescription_id;
      });
      next5DayIntermittedData.sort(function (left, right) {
        return moment__WEBPACK_IMPORTED_MODULE_0___default().utc(left.eventStart).diff(moment__WEBPACK_IMPORTED_MODULE_0___default().utc(right.eventStart));
      });
      next5DayIntermittedData.forEach(element => {
        let administeredIntermittedDose = this.appService.Medicationadministration.find(x => x.logicalid == element.dose_id);
        let splitDoseID = element.dose_id.split('_');
        let intermittedPosology = prescriptions.__posology.find(x => x.posology_id == element.posology_id);
        let intermittedDose;
        if (intermittedPosology) {
          intermittedDose = intermittedPosology.__dose.find(x => x.dose_id == splitDoseID[splitDoseID.length - 1]);
        }
        let dose;
        let doseunit = posology.infusionrateunits;
        if (administeredIntermittedDose != undefined) {
          dose = administeredIntermittedDose.administredinfusionrate + " " + posology.infusionrateunits;
        } else {
          if (intermittedDose != undefined) {
            dose = intermittedDose.infusionrate + " " + posology.infusionrateunits;
          }
        }
        this.marRecords.push({
          time: moment__WEBPACK_IMPORTED_MODULE_0___default()(element.eventStart).format("HH:mm"),
          date: moment__WEBPACK_IMPORTED_MODULE_0___default()(element.eventStart).format("YYYYMMDD"),
          administrationStatus: administeredIntermittedDose != undefined ? administeredIntermittedDose.adminstrationstatus ? 'started' : "" : "",
          content: element.content,
          // descriptiveDose: dose.descriptivedose,
          // doseType: dose.dosetype,
          // frequency: posology.frequency,
          dose: dose,
          doseunit: doseunit,
          // bolusDose: (posology.dosetype == 'strength') ? dose.strengthdenominator + ' ' + dose.strengthdenominatorunit : (posology.dosetype == 'units') ? dose.dosesize + ' ' + dose.doseunit : '' ,
          // rateDose: dose.infusionrate + ' ' +  posology.infusionrateunits,
          // ciDose: dose.infusionrate + ' ' + posology.infusionrateunits,
          // ciDate: date,
          startDate: element.eventStart,
          prescription_id: element.prescription_id,
          posologyId: element.posology_id,
          doseId: splitDoseID[splitDoseID.length - 1],
          logicalId: element.dose_id
        });
      });
    } else {
      if (posology.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.units) {
        if (this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == '' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'x' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'h' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'stat' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'mor' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'mid' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'eve' || this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).frequency == 'night') {
          if (this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).__dose.length > 0 && !this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).__dose[0].dosestrength) {
            let x = posology.__dose[0].dosestartdatetime.split('T')[1].slice(0, 5) + ' - ' + posology.__dose[0].dosesize + ' ' + posology.__dose[0].doseunit + ',';
            doseToShow = doseToShow + ' ' + x;
          }
          if (this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).__dose.length > 0 && this.appService.GetCurrentPosology(prescriptions, prescriptions.posologyid).__dose[0].dosestrength) {
            let x = posology.__dose[0].dosestartdatetime.split('T')[1].slice(0, 5) + ' - ' + posology.__dose[0].dosestrength + ' ' + posology.__dose[0].dosestrengthunits + ',';
            doseToShow = doseToShow + ' ' + x;
          }
        }
      }
      if (posology.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.strength) {
        let x = posology.__dose[0].dosestartdatetime.split('T')[1].slice(0, 5) + ' - ' + posology.__dose[0].strengthneumerator + ' ' + posology.__dose[0].strengthdenominatorunit + ',';
        doseToShow = doseToShow + ' ' + x;
      }
      if (posology.dosetype == _enum__WEBPACK_IMPORTED_MODULE_1__.DoseType.descriptive) {
        let x = posology.__dose[0].dosestartdatetime.split('T')[1].slice(0, 5) + ' - ' + posology.__dose[0].descriptivedose + ',';
        doseToShow = doseToShow + ' ' + x;
      }
      posology.__dose.forEach(dose => {
        let date = dose.dosestartdatetime.split('T')[0];
        let time = dose.dosestartdatetime.split('T')[1].slice(0, 5);
        let changeTimeFormat = time.split(':');
        doseToShow = doseToShow + ' ' + time + ',';
        this.marRecords.push({
          time,
          descriptiveDose: dose.descriptivedose,
          doseType: dose.dosetype != null ? dose.dosetype : posology.dosetype,
          frequency: posology.frequency,
          posologyId: posology.posology_id,
          dose: posology.dosetype == 'strength' ? dose.strengthdenominator + ' ' + dose.strengthdenominatorunit : posology.titration == true ? posology.titrationtargetmax + ' ' + posology.titrationtargetmin : dose.dosesize,
          doseunit: dose.strengthdenominatorunit || dose.doseunit,
          bolusDose: posology.dosetype == 'strength' ? dose.strengthdenominator + ' ' + dose.strengthdenominatorunit : posology.dosetype == 'units' ? dose.dosesize + ' ' + (dose.doseunit == 'suppository' ? 'supp' : dose.doseunit) : '',
          rateDose: dose.infusionrate + ' ' + posology.infusionrateunits,
          ciDose: dose.infusionrate + ' ' + posology.infusionrateunits,
          ciDate: date,
          doseId: dose.dose_id,
          titration: posology.titration,
          doctorsorder: posology.doctorsorder,
          logicalId: posology.infusiontypeid === 'bolus' ? 'start_' + moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).format('YYYYMMDD') + changeTimeFormat[0] + changeTimeFormat[1] + "_" + dose.dose_id.toString() : moment__WEBPACK_IMPORTED_MODULE_0___default()(new Date()).format('YYYYMMDD') + changeTimeFormat[0] + changeTimeFormat[1] + "_" + dose.dose_id.toString()
        });
      });
      this.protocolCount = posology.__dose.length;
    }
    let presAdditionalCondition = '';
    let additional_condition = this.appService.MetaPrescriptionadditionalcondition.find(x => x.prescriptionadditionalconditions_id == prescriptions.prescriptionadditionalconditions_id);
    if (additional_condition) {
      presAdditionalCondition = additional_condition.additionalcondition;
    } else {
      presAdditionalCondition = " ";
    }
    return doseToShow + (presAdditionalCondition != ' ' ? ' - ' : ' ') + presAdditionalCondition;
  }
  static #_ = this.ɵfac = function HelperService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || HelperService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_app_service__WEBPACK_IMPORTED_MODULE_2__.AppService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_components_drug_chart_timer_helper__WEBPACK_IMPORTED_MODULE_3__.TimeerHelper));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: HelperService,
    factory: HelperService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 3939:
/*!**********************************************!*\
  !*** ./src/app/services/subjects.service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SubjectsService: () => (/* binding */ SubjectsService)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 819);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 7580);


class SubjectsService {
  constructor() {
    this.encounterChange = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.personIdChange = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.apiServiceReferenceChange = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.unload = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.moduleAction = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.frameworkEvent = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.weightChanged = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.prescriptionHistory = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.additionalAdministration = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.drugInformation = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.addBolus = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.changeInfusion = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.adjustInfusion = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.pauseInfusion = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.restartInfusion = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.refreshDrugChart = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.editPrescription = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.reloadPrescriptions = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.refreshTemplate = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.clonePrescription = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.therapyOverview = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.comments = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.viewReminder = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.patientDrug = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.supplyRequest = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.pharmacyReview = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.reconcillationNotes = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.CompleteReconciliation = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.nursingInstruction = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.closePform = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.movePatientDrugs = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.showWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.closeWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.showMODWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.closeMODWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.closeAppComponentPopover = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.showBannerWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.showopAdministration = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.closeBannerWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.captureWeight = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.titrationChart = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.endInfusion = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.loadModule = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.reloadCurrentModule = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.ShowRefreshPageMessage = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.recheckBasketWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.showOPWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.closeOPWarnings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.showAwayPeriod = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
  }
  static #_ = this.ɵfac = function SubjectsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || SubjectsService)();
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: SubjectsService,
    factory: SubjectsService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 4651:
/*!******************************************************!*\
  !*** ./src/app/services/timeline-service.service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimelineServiceService: () => (/* binding */ TimelineServiceService)
/* harmony export */ });
/* harmony import */ var vis_timeline_standalone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vis-timeline/standalone */ 9543);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ 9545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _models_encounter_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/encounter.model */ 4123);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/app.service */ 529);





class TimelineServiceService {
  constructor(appService) {
    this.appService = appService;
    this.options = {};
    this.timelineZoomLevel = new _models_encounter_model__WEBPACK_IMPORTED_MODULE_2__.TimelineZoomLevel();
    this.PRNids = new Array();
    this.configureOptions("top");
  }
  Reset() {
    this.timeline = null;
    this.toptimeline = null;
    this.options = {};
    this.items = null;
    this.groups = null;
    this.PRNids = new Array();
  }
  mapGroupids(filterValue, option) {
    this.options = {};
    this.PRNids = new Array();
    this.groups = new vis_timeline_standalone__WEBPACK_IMPORTED_MODULE_0__.DataSet();
    this.items = new vis_timeline_standalone__WEBPACK_IMPORTED_MODULE_0__.DataSet();
    this.configureOptions("none");
    for (var val of this.appService.FilteredPrescription) {
      let med = val.__medications.find(x => x.prescription_id === val.prescription_id && x.isprimary == true);
      if (option == "Basic") {
        if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id && x.group == filterValue)) {
          continue;
        }
        // Add all to this no grouping
      } else if (option == "custom group") {
        if (med.customgroup != filterValue) {
          continue;
        }
      } else if (option == "Base") {
        if (this.appService.appConfig.AppSettings.UseStoredClassification) {
          let cl = med.classification ? med.classification : "Others";
          if (cl != filterValue) {
            continue;
          }
        } else {
          let cl = (val.__drugcodes ?? []).filter(x => x.additionalCodeSystem == "FDB");
          cl = cl.length > 0 && cl[0].additionalCodeDesc ? cl[0].additionalCodeDesc : "Others";
          if (cl != filterValue) {
            continue;
          }
        }
      } else if (option == "Route") {
        // if (this.appService.Prescriptionroutes.find(x => x.prescription_id === val.prescription_id && x.isdefault == true).route != filterValue) {
        //   continue;
        // } 
        if (val.__routes.length == 0 || val.__routes.find(x => x.isdefault == true).route != filterValue) {
          continue;
        }
      }
      var container = document.getElementById(val.prescription_id.toString());
      this.groups.update({
        id: val.prescription_id,
        content: container
      });
    }
    this.loadEvents(filterValue, option);
    // this.createPRNEEvent(classification);
  }
  loadEvents(filterValue, option) {
    for (var arr of this.appService.PersonAwayPeriod) {
      if (arr.isenabled) {
        this.items.update({
          id: arr.epma_personawayperiod_id,
          content: this.appService.appConfig.AppSettings.personAwayHeading,
          start: moment__WEBPACK_IMPORTED_MODULE_1___default()(arr.awayfrom).format("YYYY-MM-DD HH:mm"),
          end: moment__WEBPACK_IMPORTED_MODULE_1___default()(arr.awayto).format("YYYY-MM-DD HH:mm"),
          type: 'background',
          className: 'negative',
          tooltip: ''
        });
      }
    }
    for (var dose of this.appService.events) {
      if (option == "Basic") {
        if (!this.appService.dcgroupadded.find(x => x.prescriptionid == dose.prescription_id && x.group == filterValue)) {
          continue;
        }
        // Add all to this no grouping
      } else if (option == "Base") {
        let cl = (this.appService.Prescription.find(p => p.prescription_id == dose.prescription_id).__drugcodes ?? []).filter(x => x.additionalCodeSystem == "FDB");
        cl = cl.length > 0 && cl[0].additionalCodeDesc ? cl[0].additionalCodeDesc : "Others";
        if (cl != filterValue) {
          continue;
        }
      } else if (option == "Route") {
        if ([].concat(...this.appService.Prescription.map(p => p.__routes)).find(x => x.prescription_id === dose.prescription_id && x.isdefault == true).route != filterValue) {
          continue;
        }
      }
      //  need to change not in if condetion
      if (this.appService.Prescription.find(x => x.prescription_id === dose.prescription_id).isinfusion) {
        if (dose.eventEnd) {
          dose.eventEnd = moment__WEBPACK_IMPORTED_MODULE_1___default()(dose.eventEnd);
          // this.items.update({
          //   id: dose.dose_id, content: dose.content, start: dose.eventStart, end: dose.eventEnd, group: dose.prescription_id
          // })
          this.addUpdateItem(dose.dose_id, dose.content, dose.opacityclass, dose.eventStart, dose.eventEnd, dose.prescription_id, dose.title);
        } else {
          this.addUpdateItem(dose.dose_id, dose.content, dose.opacityclass, dose.eventStart, dose.eventEnd, dose.prescription_id, dose.title);
        }
      } else {
        this.addUpdateItem(dose.dose_id, dose.content, dose.opacityclass, dose.eventStart, dose.eventEnd, dose.prescription_id, dose.title);
        // if (dose.iscancelled) {
        //   this.addUpdateItem(dose.doseventEnde_id, contents.Administration_withheld_by_doctor, "transparant", dose.dosestartdatetime, dose.dosestartdatetime, dose.prescription_id, "title")
        // }
        // else {
        // this.createMedicineDoseEvent(dose);
        // }
      }
    }
    for (var arrp of this.appService.CurrentReminderevents) {
      this.items.add({
        id: arrp.dose_id,
        content: arrp.content,
        className: "transparant" + arrp.opacityclass,
        start: arrp.eventStart,
        end: arrp.eventEnd,
        group: arrp.prescription_id,
        title: arrp.title
      });
    }
    for (var arrp of this.appService.arrPrescriptionCurrentFlowRate) {
      this.items.update({
        id: "status" + arrp.prescriptionid,
        content: arrp.content,
        start: moment__WEBPACK_IMPORTED_MODULE_1___default()(arrp.start).format("YYYY-MM-DD HH:mm"),
        end: moment__WEBPACK_IMPORTED_MODULE_1___default()(arrp.end).format("YYYY-MM-DD HH:mm"),
        type: 'background',
        className: 'transbackground',
        tooltip: '',
        group: arrp.prescriptionid
      });
    }
  }
  getConcadeCode(Code) {
    // let Code= this.appService.DCGroups[0].MatchConditions.ClassificationCodes[0].Code.split(".");
    let concadCode = "";
    for (let x of Code) {
      if (!isNaN(x)) {
        concadCode = concadCode + +x;
      }
    }
    return concadCode;
  }
  groupingBasics() {
    this.appService.dcgroupadded = [];
    for (var val of this.appService.FilteredPrescription) {
      let isIvFluid = false;
      if (val.__drugcodes) {
        const customrows = val.__drugcodes.filter(x => x.additionalCodeSystem.toLowerCase() == "custom");
        const ivfluids = customrows.filter(x => x.additionalCode.toUpperCase() == "BASIC_FLUID");
        if (ivfluids.length > 0) isIvFluid = true;else isIvFluid = false;
      }
      if (val.__posology.find(x => x.iscurrent == true).frequency == "stat") {
        this.appService.dcgroupadded.push({
          group: "Stat",
          prescriptionid: val.prescription_id
        });
      }
      let Presindecation = JSON.parse(val.indication);
      let drug_bnf = "";
      let drug_fdb = "";
      if (val.__drugcodes) {
        const bnfrow = val.__drugcodes.filter(x => x.additionalCodeSystem == "BNF");
        if (bnfrow.length > 0) drug_bnf = bnfrow[0].additionalCode;
        const fdbfow = val.__drugcodes.filter(x => x.additionalCodeSystem == "FDB");
        if (fdbfow.length > 0) drug_fdb = fdbfow[0].additionalCode;
      }
      drug_bnf.padEnd(10, "0");
      drug_fdb.padEnd(10, "0");
      for (let group of this.appService.DCGroups) {
        let isbnfmatch = false;
        for (let arrcode of group.MatchConditions.ClassificationCodes) {
          let drugMatchCode = "";
          let configMatchCode = (arrcode.Code ?? "").replace(/\./g, "");
          if (arrcode.CodeType.toLowerCase() == "bnf") {
            drugMatchCode = (drug_bnf ?? "").replace(/\./g, "").substring(0, configMatchCode.length);
          } else if (arrcode.CodeType.toLowerCase() == "fdb") {
            drugMatchCode = (drug_fdb ?? "").replace(/\./g, "").substring(0, configMatchCode.length);
          }
          if (drugMatchCode == configMatchCode) {
            isbnfmatch = true;
          }
        }
        let isindecationmatch = false;
        for (let arrindecation of group.MatchConditions.Indications) {
          if (Presindecation) {
            if (arrindecation.Code == Presindecation.code || arrindecation.Indication == Presindecation?.indication) {
              isindecationmatch = true;
            }
          }
        }
        if (group.MatchType == "AND") {
          if (isindecationmatch && isbnfmatch) {
            const isSkipStat = group.SkipStatGroup && group.SkipStatGroup == true;
            let isInStat = this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id && x.group == "Stat");
            if (isSkipStat == true && isInStat) {
              isInStat.group = group.GroupName;
            } else {
              if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
                // checking is allready add this pres 47  4.0.1.0
                this.appService.dcgroupadded.push({
                  group: group.GroupName,
                  prescriptionid: val.prescription_id
                });
              }
            }
          }
        } else {
          if (isindecationmatch || isbnfmatch) {
            const isSkipStat = group.SkipStatGroup && group.SkipStatGroup == true;
            let isInStat = this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id && x.group == "Stat");
            if (isSkipStat == true && isInStat) {
              isInStat.group = group.GroupName;
            } else {
              if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
                // checking is allready add this pres 47  4.0.1.0
                this.appService.dcgroupadded.push({
                  group: group.GroupName,
                  prescriptionid: val.prescription_id
                });
              }
            }
          }
        }
      }
      if (val.__posology.find(x => x.iscurrent == true).infusiontypeid == 'ci' || val.__posology.find(x => x.iscurrent == true).infusiontypeid == 'pca' || val.__posology.find(x => x.iscurrent == true).infusiontypeid == 'rate' && val.__posology.find(x => x.iscurrent == true).frequency == "variable") {
        if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          this.appService.dcgroupadded.push({
            group: "Variable/Continuous infusion",
            prescriptionid: val.prescription_id
          });
        }
      } else if (val.__posology.find(x => x.iscurrent == true).prn == true) {
        if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          this.appService.dcgroupadded.push({
            group: "PRN",
            prescriptionid: val.prescription_id
          });
        }
      } else if (isIvFluid) {
        let i = this.appService.DCGroups.find(x => x.GroupName == "IV Fluid");
        let isInStat = this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id && x.group == "Stat");
        if (i && i.SkipStatGroup && i.SkipStatGroup == "true") {
          isInStat.group = "IV Fluid";
        } else {
          if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
            // checking is allready add this pres
            this.appService.dcgroupadded.push({
              group: "IV Fluid",
              prescriptionid: val.prescription_id
            });
          }
        }
      } else {
        if (!this.appService.dcgroupadded.find(x => x.prescriptionid == val.prescription_id)) {
          // checking is allready add this pres
          this.appService.dcgroupadded.push({
            group: "Regular drugs",
            prescriptionid: val.prescription_id
          });
        }
      }
    }
  }
  addUpdateItem(id, content, className, start, end = null, groupid, title) {
    if (content.indexOf("divPRN") >= 0) {
      this.items.update({
        id: id,
        content: content,
        className: "PRNRange" + className,
        start: start,
        end: end,
        group: groupid,
        title: title
      });
    } else if (content.indexOf("PauseDurline") >= 0) {
      this.items.update({
        id: id,
        content: content,
        className: "PauseDurline" + className,
        start: start,
        end: end,
        group: groupid,
        title: title
      });
    } else {
      this.items.update({
        id: id,
        content: content,
        className: "transparant" + className,
        start: start,
        end: end,
        group: groupid,
        title: title
      });
    }
  }
  configureOptions(orientation) {
    // Configuration for the Timeline
    this.timelineZoomLevel.start = this.appService.changechoosenFilterDate.toDate();
    this.timelineZoomLevel.start.setHours(0);
    this.timelineZoomLevel.end = new Date(this.timelineZoomLevel.start);
    this.timelineZoomLevel.end.setHours(12);
    this.timelineZoomLevel.end.setDate(this.timelineZoomLevel.end.getDate() + 1);
    let currentDate = this.appService.changechoosenFilterDate.toDate();
    let maxUsercanscroll = moment__WEBPACK_IMPORTED_MODULE_1___default()(currentDate).add(7, 'days');
    let minUsercanscroll = moment__WEBPACK_IMPORTED_MODULE_1___default()(currentDate).add(-7, 'days');
    maxUsercanscroll.set({
      hour: 23,
      minute: 59,
      second: 0,
      millisecond: 0
    });
    minUsercanscroll.set({
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    });
    this.options = {
      stack: false,
      zoomKey: "altKey",
      start: this.timelineZoomLevel.start,
      end: this.timelineZoomLevel.end,
      min: minUsercanscroll,
      // lower limit of visible range
      max: maxUsercanscroll,
      zoomMin: 60000 * 5,
      zoomMax: 1000 * 60 * 60 * 24 * 7 + 10,
      orientation: {
        axis: orientation
      },
      xss: {
        disabled: false,
        filterOptions: {
          whiteList: {
            div: ['class'],
            strong: []
          }
        }
      }
    };
  }
  static #_ = this.ɵfac = function TimelineServiceService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || TimelineServiceService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_services_app_service__WEBPACK_IMPORTED_MODULE_3__.AppService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: TimelineServiceService,
    factory: TimelineServiceService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 9862:
/*!****************************************************************!*\
  !*** ./src/app/services/upsert-transaction-manager.service.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UpsertEntity: () => (/* binding */ UpsertEntity),
/* harmony export */   UpsertTransactionManager: () => (/* binding */ UpsertTransactionManager)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 819);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 3900);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 7580);



class UpsertTransactionManager {
  constructor() {
    this.entities = new Array();
    this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.savedDetails = null;
  }
  beginTran(baseApiUrl, apiServiceObj) {
    this.entities = new Array();
    this.savedDetails = null;
    this.baseApiUrl = baseApiUrl;
    this.apiServiceObj = apiServiceObj;
  }
  addEntity(synapseNamespace, entityName, data, dbOp) {
    if (synapseNamespace && entityName && data) {
      //cloning the object - let original remain intact
      let dataToSave = JSON.parse(JSON.stringify(data));
      dbOp = dbOp ? dbOp : 'ins';
      let entity = new UpsertEntity();
      entity[`${synapseNamespace}|${entityName}:${dbOp}`] = dataToSave;
      this.entities.push(entity);
    }
  }
  //Note: Once the save function is called, all the added entities will be removed from list
  save(onSuccess, onError, synchronousPost = true) {
    if (this.entities == null || !Array.isArray(this.entities) || this.entities.length == 0) {
      if (onError) onError("No Entities to save");
      return;
    }
    const url = `${this.baseApiUrl}/PostObjectsInTransaction`;
    console.log(JSON.stringify(this.entities));
    this.apiServiceObj.postRequest(url, this.entities, synchronousPost).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.takeUntil)(this.destroy$)).subscribe(newEntityDetails => {
      console.log('Saved Details');
      console.log(newEntityDetails);
      this.entities = null;
      this.savedDetails = newEntityDetails.data ? newEntityDetails.data : newEntityDetails;
      if (onSuccess) onSuccess(newEntityDetails);
    }, err => {
      console.log('Error Details');
      console.log(err);
      this.entities = null;
      this.savedDetails = null;
      if (onError) onError(err);
    });
  }
  getSavedEntity(synapseNamespace, entityName, filter) {
    if (!this.savedDetails) return null;
    var entityToFind = this.savedDetails[`${synapseNamespace}|${entityName}`]; //this.savedDetails.find(sd=> sd.key == `${synapseNamespace}|${entityName}`);
    if (!entityToFind) return null;
    if (filter && Array.isArray(entityToFind)) {
      return entityToFind.filter(e => filter(e));
    }
    return entityToFind;
  }
  destroy() {
    if (this.destroy$) {
      this.destroy$.next(true);
      this.destroy$.complete();
    }
  }
  static #_ = this.ɵfac = function UpsertTransactionManager_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || UpsertTransactionManager)();
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
    token: UpsertTransactionManager,
    factory: UpsertTransactionManager.ɵfac
  });
}
class UpsertEntity {}

/***/ }),

/***/ 5312:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   environment: () => (/* binding */ environment)
/* harmony export */ });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
  production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.

/***/ }),

/***/ 4429:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 436);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 7580);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 635);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 5312);




if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.enableProdMode)();
}
_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.platformBrowser().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule).catch(err => console.error(err));

/***/ }),

/***/ 5358:
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": 5637,
	"./af.js": 5637,
	"./ar": 6777,
	"./ar-dz": 4508,
	"./ar-dz.js": 4508,
	"./ar-kw": 7504,
	"./ar-kw.js": 7504,
	"./ar-ly": 5373,
	"./ar-ly.js": 5373,
	"./ar-ma": 2412,
	"./ar-ma.js": 2412,
	"./ar-ps": 8823,
	"./ar-ps.js": 8823,
	"./ar-sa": 6670,
	"./ar-sa.js": 6670,
	"./ar-tn": 6448,
	"./ar-tn.js": 6448,
	"./ar.js": 6777,
	"./az": 3009,
	"./az.js": 3009,
	"./be": 8299,
	"./be.js": 8299,
	"./bg": 4685,
	"./bg.js": 4685,
	"./bm": 1171,
	"./bm.js": 1171,
	"./bn": 3590,
	"./bn-bd": 5841,
	"./bn-bd.js": 5841,
	"./bn.js": 3590,
	"./bo": 4309,
	"./bo.js": 4309,
	"./br": 4130,
	"./br.js": 4130,
	"./bs": 8033,
	"./bs.js": 8033,
	"./ca": 5294,
	"./ca.js": 5294,
	"./cs": 3028,
	"./cs.js": 3028,
	"./cv": 5807,
	"./cv.js": 5807,
	"./cy": 342,
	"./cy.js": 342,
	"./da": 8269,
	"./da.js": 8269,
	"./de": 1489,
	"./de-at": 2123,
	"./de-at.js": 2123,
	"./de-ch": 7757,
	"./de-ch.js": 7757,
	"./de.js": 1489,
	"./dv": 8152,
	"./dv.js": 8152,
	"./el": 7687,
	"./el.js": 7687,
	"./en-au": 6668,
	"./en-au.js": 6668,
	"./en-ca": 6798,
	"./en-ca.js": 6798,
	"./en-gb": 3615,
	"./en-gb.js": 3615,
	"./en-ie": 1364,
	"./en-ie.js": 1364,
	"./en-il": 9907,
	"./en-il.js": 9907,
	"./en-in": 533,
	"./en-in.js": 533,
	"./en-nz": 3190,
	"./en-nz.js": 3190,
	"./en-sg": 1096,
	"./en-sg.js": 1096,
	"./eo": 3962,
	"./eo.js": 3962,
	"./es": 7726,
	"./es-do": 5010,
	"./es-do.js": 5010,
	"./es-mx": 3654,
	"./es-mx.js": 3654,
	"./es-us": 9043,
	"./es-us.js": 9043,
	"./es.js": 7726,
	"./et": 5343,
	"./et.js": 5343,
	"./eu": 728,
	"./eu.js": 728,
	"./fa": 787,
	"./fa.js": 787,
	"./fi": 1771,
	"./fi.js": 1771,
	"./fil": 5335,
	"./fil.js": 5335,
	"./fo": 9761,
	"./fo.js": 9761,
	"./fr": 1670,
	"./fr-ca": 8991,
	"./fr-ca.js": 8991,
	"./fr-ch": 7280,
	"./fr-ch.js": 7280,
	"./fr.js": 1670,
	"./fy": 4203,
	"./fy.js": 4203,
	"./ga": 9858,
	"./ga.js": 9858,
	"./gd": 8605,
	"./gd.js": 8605,
	"./gl": 7365,
	"./gl.js": 7365,
	"./gom-deva": 3896,
	"./gom-deva.js": 3896,
	"./gom-latn": 5587,
	"./gom-latn.js": 5587,
	"./gu": 7950,
	"./gu.js": 7950,
	"./he": 2029,
	"./he.js": 2029,
	"./hi": 1897,
	"./hi.js": 1897,
	"./hr": 9816,
	"./hr.js": 9816,
	"./hu": 2253,
	"./hu.js": 2253,
	"./hy-am": 8196,
	"./hy-am.js": 8196,
	"./id": 1307,
	"./id.js": 1307,
	"./is": 5474,
	"./is.js": 5474,
	"./it": 3099,
	"./it-ch": 8188,
	"./it-ch.js": 8188,
	"./it.js": 3099,
	"./ja": 9127,
	"./ja.js": 9127,
	"./jv": 182,
	"./jv.js": 182,
	"./ka": 758,
	"./ka.js": 758,
	"./kk": 3444,
	"./kk.js": 3444,
	"./km": 2034,
	"./km.js": 2034,
	"./kn": 6223,
	"./kn.js": 6223,
	"./ko": 3064,
	"./ko.js": 3064,
	"./ku": 8714,
	"./ku-kmr": 961,
	"./ku-kmr.js": 961,
	"./ku.js": 8714,
	"./ky": 2062,
	"./ky.js": 2062,
	"./lb": 4796,
	"./lb.js": 4796,
	"./lo": 9279,
	"./lo.js": 9279,
	"./lt": 106,
	"./lt.js": 106,
	"./lv": 1840,
	"./lv.js": 1840,
	"./me": 2240,
	"./me.js": 2240,
	"./mi": 3588,
	"./mi.js": 3588,
	"./mk": 5518,
	"./mk.js": 5518,
	"./ml": 7823,
	"./ml.js": 7823,
	"./mn": 8657,
	"./mn.js": 8657,
	"./mr": 1285,
	"./mr.js": 1285,
	"./ms": 3014,
	"./ms-my": 6253,
	"./ms-my.js": 6253,
	"./ms.js": 3014,
	"./mt": 167,
	"./mt.js": 167,
	"./my": 7940,
	"./my.js": 7940,
	"./nb": 14,
	"./nb.js": 14,
	"./ne": 9023,
	"./ne.js": 9023,
	"./nl": 4208,
	"./nl-be": 1412,
	"./nl-be.js": 1412,
	"./nl.js": 4208,
	"./nn": 1354,
	"./nn.js": 1354,
	"./oc-lnc": 870,
	"./oc-lnc.js": 870,
	"./pa-in": 389,
	"./pa-in.js": 389,
	"./pl": 7342,
	"./pl.js": 7342,
	"./pt": 4774,
	"./pt-br": 3003,
	"./pt-br.js": 3003,
	"./pt.js": 4774,
	"./ro": 5333,
	"./ro.js": 5333,
	"./ru": 3451,
	"./ru.js": 3451,
	"./sd": 3921,
	"./sd.js": 3921,
	"./se": 9682,
	"./se.js": 9682,
	"./si": 582,
	"./si.js": 582,
	"./sk": 4348,
	"./sk.js": 4348,
	"./sl": 5337,
	"./sl.js": 5337,
	"./sq": 9358,
	"./sq.js": 9358,
	"./sr": 683,
	"./sr-cyrl": 9382,
	"./sr-cyrl.js": 9382,
	"./sr.js": 683,
	"./ss": 1156,
	"./ss.js": 1156,
	"./sv": 9855,
	"./sv.js": 9855,
	"./sw": 8536,
	"./sw.js": 8536,
	"./ta": 7754,
	"./ta.js": 7754,
	"./te": 7809,
	"./te.js": 7809,
	"./tet": 1297,
	"./tet.js": 1297,
	"./tg": 2527,
	"./tg.js": 2527,
	"./th": 5862,
	"./th.js": 5862,
	"./tk": 9331,
	"./tk.js": 9331,
	"./tl-ph": 4387,
	"./tl-ph.js": 4387,
	"./tlh": 3592,
	"./tlh.js": 3592,
	"./tr": 9732,
	"./tr.js": 9732,
	"./tzl": 9570,
	"./tzl.js": 9570,
	"./tzm": 3553,
	"./tzm-latn": 7699,
	"./tzm-latn.js": 7699,
	"./tzm.js": 3553,
	"./ug-cn": 5674,
	"./ug-cn.js": 5674,
	"./uk": 9974,
	"./uk.js": 9974,
	"./ur": 5773,
	"./ur.js": 5773,
	"./uz": 357,
	"./uz-latn": 7135,
	"./uz-latn.js": 7135,
	"./uz.js": 357,
	"./vi": 43,
	"./vi.js": 43,
	"./x-pseudo": 767,
	"./x-pseudo.js": 767,
	"./yo": 150,
	"./yo.js": 150,
	"./zh-cn": 1828,
	"./zh-cn.js": 1828,
	"./zh-hk": 6644,
	"./zh-hk.js": 6644,
	"./zh-mo": 9305,
	"./zh-mo.js": 9305,
	"./zh-tw": 1860,
	"./zh-tw.js": 1860
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 5358;

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(4429)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map